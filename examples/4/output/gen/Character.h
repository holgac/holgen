// This file is generated by holgen. Do not modify manually.
#pragma once

#include "../holgen.h"
#include <cstdint>
#include <string>
#include <lua.hpp>
#include <rapidjson/fwd.h>
#include "CharacterArmor.h"

struct lua_State;
namespace ex4_schemas {
  class Converter;
  class Weapon;
}
namespace ex4_schemas {
// Defined in 4/schemas/dataManager.hsc
class Character {
public:
  using IdType=uint32_t;
  Character() = default;
  Character(const Character &rhs) = default;
  Character(Character &&rhs) noexcept = default;
  ~Character() = default;
  uint32_t GetId() const;
  const std::string &GetName() const;
  std::string &GetName();
  uint32_t GetPartnerId() const;
  const Character *GetPartner() const;
  Character *GetPartner();
  uint32_t GetWeaponId() const;
  const Weapon *GetWeapon() const;
  Weapon *GetWeapon();
  const CharacterArmor &GetArmor() const;
  CharacterArmor &GetArmor();
  void SetId(uint32_t val);
  void SetName(const std::string &val);
  void SetPartnerId(uint32_t val);
  void SetWeaponId(uint32_t val);
  void SetArmor(const CharacterArmor &val);
  static Character *Get(uint32_t id);
  static Character *GetFromName(const std::string &key);
  bool operator==(const Character &rhs) const;
  bool ParseJson(const rapidjson::Value &json, const Converter &converter, lua_State *luaState);
  rapidjson::Value DumpJson(rapidjson::Document &doc, lua_State *luaState) const;
  void PushToLua(lua_State *luaState) const;
  void PushMirrorToLua(lua_State *luaState) const;
  void PushGlobalToLua(lua_State *luaState, const char *name) const;
  /*
   * This only works with negative indices
   * Reads proxy object (a table with a metatable and an embedded pointer or an index)
   */
  static Character *ReadProxyFromLua(lua_State *luaState, int32_t idx);
  /*
   * This only works with negative indices
   * Reads a mirror object (a table with entries that mirror the c++ data structure)
   */
  static Character ReadMirrorFromLua(lua_State *luaState, int32_t idx);
  static void CreateLuaMetatable(lua_State *luaState);
  Character &operator=(const Character &rhs) = default;
  Character &operator=(Character &&rhs) noexcept = default;
  inline static const char *CLASS_NAME = "Character";
private:
  static int NewIndexMetaMethod(lua_State *luaState);
  static int IndexMetaMethod(lua_State *luaState);
  uint32_t mId = -1;
  std::string mName;
  uint32_t mPartnerId = -1;
  uint32_t mWeaponId = -1;
  CharacterArmor mArmor;
};
}
