// This file is generated by holgen. Do not modify manually.

using System.Runtime.InteropServices;

namespace CSharpBindings;

public class ModuleVersion
{
  public ModuleVersion(ushort major, ushort minor, uint revision)
  {
    Data = Marshal.GetDelegateForFunctionPointer<ModuleVersionConstructDelegate>(_constructImpl)(major, minor, revision);
  }
  public ModuleVersion()
  {
  }
  
  public ushort Major => Data.Major;
  public ushort Minor => Data.Minor;
  public uint Revision => Data.Revision;
  public Fields Data;
  
  [StructLayout(LayoutKind.Sequential)]
  public struct Fields
  {
    public ushort Major;
    public ushort Minor;
    public uint Revision;
    
  }
  
  public static ModuleVersion ConstructDouble(ushort major, ushort minor, uint revision)
  {
    return new ModuleVersion
    {
      Data = Marshal.GetDelegateForFunctionPointer<ModuleVersionConstructDoubleDelegate>(_constructDoubleImpl)(major, minor, revision)
    };
  }
  public uint GetSum()
  {
    return Marshal.GetDelegateForFunctionPointer<ModuleVersionGetSumDelegate>(_getSumImpl)(ref this.Data);
  }
  public void BumpRevision()
  {
    Marshal.GetDelegateForFunctionPointer<ModuleVersionBumpRevisionDelegate>(_bumpRevisionImpl)(ref this.Data);
  }
  public ModuleVersion SumOfSelfAnd(ModuleVersion v1, ModuleVersion v2)
  {
    return new ModuleVersion
    {
      Data = Marshal.GetDelegateForFunctionPointer<ModuleVersionSumOfSelfAndDelegate>(_sumOfSelfAndImpl)(ref this.Data, ref v1.Data, ref v2.Data)
    };
  }
  public ModuleVersion[] GetNextRevisions(ulong count)
  {
    var holgenResult = Marshal.GetDelegateForFunctionPointer<ModuleVersionGetNextRevisionsDelegate>(_getNextRevisionsImpl)(ref this.Data, count, out var holgenReturnValueHolgenSize, out var holgenDeferredDeleter);
    var holgenReturnValueHolgenSizeInt = (int)holgenReturnValueHolgenSize;
    var holgenReturnValue = new ModuleVersion[holgenReturnValueHolgenSizeInt];
    Span<ModuleVersion.Fields> holgenResultSpan;
    unsafe
    {
      holgenResultSpan = new Span<ModuleVersion.Fields>(holgenResult.ToPointer(), holgenReturnValueHolgenSizeInt);
    }
    for (var i = 0; i < holgenReturnValueHolgenSizeInt; ++i)
    {
      holgenReturnValue[i] = new ModuleVersion{ Data = holgenResultSpan[i] };
    }
    DeferredDeleter.Perform(holgenDeferredDeleter);
    return holgenReturnValue;
  }
  public ModuleVersion[] GetNextThreeRevisions()
  {
    var holgenResult = Marshal.GetDelegateForFunctionPointer<ModuleVersionGetNextThreeRevisionsDelegate>(_getNextThreeRevisionsImpl)(ref this.Data, out var holgenDeferredDeleter);
    var holgenReturnValue = new ModuleVersion[3];
    Span<ModuleVersion.Fields> holgenResultSpan;
    unsafe
    {
      holgenResultSpan = new Span<ModuleVersion.Fields>(holgenResult.ToPointer(), 3);
    }
    for (var i = 0; i < 3; ++i)
    {
      holgenReturnValue[i] = new ModuleVersion{ Data = holgenResultSpan[i] };
    }
    DeferredDeleter.Perform(holgenDeferredDeleter);
    return holgenReturnValue;
  }
  public uint[] GetDataAsVector()
  {
    var holgenResult = Marshal.GetDelegateForFunctionPointer<ModuleVersionGetDataAsVectorDelegate>(_getDataAsVectorImpl)(ref this.Data, out var holgenReturnValueHolgenSize, out var holgenDeferredDeleter);
    var holgenReturnValueHolgenSizeInt = (int)holgenReturnValueHolgenSize;
    var holgenReturnValue = new uint[holgenReturnValueHolgenSizeInt];
    Span<uint> holgenResultSpan;
    unsafe
    {
      holgenResultSpan = new Span<uint>(holgenResult.ToPointer(), holgenReturnValueHolgenSizeInt);
    }
    for (var i = 0; i < holgenReturnValueHolgenSizeInt; ++i)
    {
      holgenReturnValue[i] = holgenResultSpan[i];
    }
    DeferredDeleter.Perform(holgenDeferredDeleter);
    return holgenReturnValue;
  }
  public uint[] GetDataAsArray()
  {
    var holgenResult = Marshal.GetDelegateForFunctionPointer<ModuleVersionGetDataAsArrayDelegate>(_getDataAsArrayImpl)(ref this.Data, out var holgenDeferredDeleter);
    var holgenReturnValue = new uint[3];
    Span<uint> holgenResultSpan;
    unsafe
    {
      holgenResultSpan = new Span<uint>(holgenResult.ToPointer(), 3);
    }
    for (var i = 0; i < 3; ++i)
    {
      holgenReturnValue[i] = holgenResultSpan[i];
    }
    DeferredDeleter.Perform(holgenDeferredDeleter);
    return holgenReturnValue;
  }
  public int[] GetDataAsSignedVector()
  {
    var holgenResult = Marshal.GetDelegateForFunctionPointer<ModuleVersionGetDataAsSignedVectorDelegate>(_getDataAsSignedVectorImpl)(ref this.Data, out var holgenReturnValueHolgenSize, out var holgenDeferredDeleter);
    var holgenReturnValueHolgenSizeInt = (int)holgenReturnValueHolgenSize;
    var holgenReturnValue = new int[holgenReturnValueHolgenSizeInt];
    Marshal.Copy(holgenResult, holgenReturnValue, 0, holgenReturnValueHolgenSizeInt);
    DeferredDeleter.Perform(holgenDeferredDeleter);
    return holgenReturnValue;
  }
  public static void HolgenInitialize(ModuleVersionConstructDelegate moduleVersionConstructDelegate, ModuleVersionConstructDoubleDelegate moduleVersionConstructDoubleDelegate, ModuleVersionGetSumDelegate moduleVersionGetSumDelegate, ModuleVersionBumpRevisionDelegate moduleVersionBumpRevisionDelegate, ModuleVersionSumOfSelfAndDelegate moduleVersionSumOfSelfAndDelegate, ModuleVersionGetNextRevisionsDelegate moduleVersionGetNextRevisionsDelegate, ModuleVersionGetNextThreeRevisionsDelegate moduleVersionGetNextThreeRevisionsDelegate, ModuleVersionGetDataAsVectorDelegate moduleVersionGetDataAsVectorDelegate, ModuleVersionGetDataAsArrayDelegate moduleVersionGetDataAsArrayDelegate, ModuleVersionGetDataAsSignedVectorDelegate moduleVersionGetDataAsSignedVectorDelegate)
  {
    _constructImpl = Marshal.GetFunctionPointerForDelegate(moduleVersionConstructDelegate);
    _constructDoubleImpl = Marshal.GetFunctionPointerForDelegate(moduleVersionConstructDoubleDelegate);
    _getSumImpl = Marshal.GetFunctionPointerForDelegate(moduleVersionGetSumDelegate);
    _bumpRevisionImpl = Marshal.GetFunctionPointerForDelegate(moduleVersionBumpRevisionDelegate);
    _sumOfSelfAndImpl = Marshal.GetFunctionPointerForDelegate(moduleVersionSumOfSelfAndDelegate);
    _getNextRevisionsImpl = Marshal.GetFunctionPointerForDelegate(moduleVersionGetNextRevisionsDelegate);
    _getNextThreeRevisionsImpl = Marshal.GetFunctionPointerForDelegate(moduleVersionGetNextThreeRevisionsDelegate);
    _getDataAsVectorImpl = Marshal.GetFunctionPointerForDelegate(moduleVersionGetDataAsVectorDelegate);
    _getDataAsArrayImpl = Marshal.GetFunctionPointerForDelegate(moduleVersionGetDataAsArrayDelegate);
    _getDataAsSignedVectorImpl = Marshal.GetFunctionPointerForDelegate(moduleVersionGetDataAsSignedVectorDelegate);
  }
  
  public delegate ModuleVersion.Fields ModuleVersionConstructDelegate(ushort major, ushort minor, uint revision);
  public delegate ModuleVersion.Fields ModuleVersionConstructDoubleDelegate(ushort major, ushort minor, uint revision);
  public delegate uint ModuleVersionGetSumDelegate(ref ModuleVersion.Fields holgenObject);
  public delegate void ModuleVersionBumpRevisionDelegate(ref ModuleVersion.Fields holgenObject);
  public delegate ModuleVersion.Fields ModuleVersionSumOfSelfAndDelegate(ref ModuleVersion.Fields holgenObject, ref ModuleVersion.Fields v1, ref ModuleVersion.Fields v2);
  public delegate IntPtr ModuleVersionGetNextRevisionsDelegate(ref ModuleVersion.Fields holgenObject, ulong count, out ulong holgenReturnValueHolgenSize, out IntPtr holgenDeferredDeleter);
  public delegate IntPtr ModuleVersionGetNextThreeRevisionsDelegate(ref ModuleVersion.Fields holgenObject, out IntPtr holgenDeferredDeleter);
  public delegate IntPtr ModuleVersionGetDataAsVectorDelegate(ref ModuleVersion.Fields holgenObject, out ulong holgenReturnValueHolgenSize, out IntPtr holgenDeferredDeleter);
  public delegate IntPtr ModuleVersionGetDataAsArrayDelegate(ref ModuleVersion.Fields holgenObject, out IntPtr holgenDeferredDeleter);
  public delegate IntPtr ModuleVersionGetDataAsSignedVectorDelegate(ref ModuleVersion.Fields holgenObject, out ulong holgenReturnValueHolgenSize, out IntPtr holgenDeferredDeleter);
  public delegate void ModuleVersionHolgenInitializeDelegate(ModuleVersionConstructDelegate moduleVersionConstructDelegate, ModuleVersionConstructDoubleDelegate moduleVersionConstructDoubleDelegate, ModuleVersionGetSumDelegate moduleVersionGetSumDelegate, ModuleVersionBumpRevisionDelegate moduleVersionBumpRevisionDelegate, ModuleVersionSumOfSelfAndDelegate moduleVersionSumOfSelfAndDelegate, ModuleVersionGetNextRevisionsDelegate moduleVersionGetNextRevisionsDelegate, ModuleVersionGetNextThreeRevisionsDelegate moduleVersionGetNextThreeRevisionsDelegate, ModuleVersionGetDataAsVectorDelegate moduleVersionGetDataAsVectorDelegate, ModuleVersionGetDataAsArrayDelegate moduleVersionGetDataAsArrayDelegate, ModuleVersionGetDataAsSignedVectorDelegate moduleVersionGetDataAsSignedVectorDelegate);
  
  private static IntPtr _constructImpl = IntPtr.Zero;
  private static IntPtr _constructDoubleImpl = IntPtr.Zero;
  private static IntPtr _getSumImpl = IntPtr.Zero;
  private static IntPtr _bumpRevisionImpl = IntPtr.Zero;
  private static IntPtr _sumOfSelfAndImpl = IntPtr.Zero;
  private static IntPtr _getNextRevisionsImpl = IntPtr.Zero;
  private static IntPtr _getNextThreeRevisionsImpl = IntPtr.Zero;
  private static IntPtr _getDataAsVectorImpl = IntPtr.Zero;
  private static IntPtr _getDataAsArrayImpl = IntPtr.Zero;
  private static IntPtr _getDataAsSignedVectorImpl = IntPtr.Zero;
  
}
