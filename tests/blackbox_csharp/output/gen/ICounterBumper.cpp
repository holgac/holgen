// This file is generated by holgen. Do not modify manually.
#include "ICounterBumper.h"

#include "Counter.h"

namespace holgen_blackbox_csharp {
ICounterBumper::ICounterBumper(void *ptr) :
    HolgenDotNetInterface(ptr) {
}

ICounterBumper::ICounterBumper(ICounterBumper &&rhs) noexcept :
    HolgenDotNetInterface(std::move(rhs)) {
}

ICounterBumper &ICounterBumper::operator=(ICounterBumper &&rhs) noexcept {
  std::swap(mHolgenDotNetInstance, rhs.mHolgenDotNetInstance);
  return *this;
}

void ICounterBumper::SetName(const std::string &name) {
  SetNameHolgenPtr(mHolgenDotNetInstance, name.c_str());
}

std::string ICounterBumper::GetName() {
  return GetNameHolgenPtr(mHolgenDotNetInstance);
}

void ICounterBumper::Bump() {
  BumpHolgenPtr(mHolgenDotNetInstance);
}

void ICounterBumper::SetNameFromCounter(const Counter &ctr) {
  SetNameFromCounterHolgenPtr(mHolgenDotNetInstance, &ctr);
}

void ICounterBumper::SetNameFromRevision(const ModuleVersion &version) {
  SetNameFromRevisionHolgenPtr(mHolgenDotNetInstance, &version);
}

ModuleVersion ICounterBumper::GetVersion() {
  return GetVersionHolgenPtr(mHolgenDotNetInstance);
}

Counter &ICounterBumper::GetCounter() {
  return *GetCounterHolgenPtr(mHolgenDotNetInstance);
}

ICounterBumper ICounterBumper::Clone() {
  return ICounterBumper(CloneHolgenPtr(mHolgenDotNetInstance));
}

void ICounterBumper::CopyFrom(const ICounterBumper &other) {
  CopyFromHolgenPtr(mHolgenDotNetInstance, other.GetHolgenDotNetInstance());
}

void ICounterBumper::BumpMultiple(const std::vector<std::string> &names, const std::vector<uint32_t> &counts) {
  std::vector<const char *> namesHolgenTemp;
  namesHolgenTemp.reserve(names.size());
  for (auto& elem: names) {
    namesHolgenTemp.push_back(elem.c_str());
  }
  BumpMultipleHolgenPtr(mHolgenDotNetInstance, namesHolgenTemp.data(), namesHolgenTemp.size(), counts.data(), counts.size());
}

void ICounterBumper::SetNameConcatArray(const std::array<std::string, 3> &name) {
  std::vector<const char *> nameHolgenTemp;
  nameHolgenTemp.reserve(name.size());
  for (auto& elem: name) {
    nameHolgenTemp.push_back(elem.c_str());
  }
  SetNameConcatArrayHolgenPtr(mHolgenDotNetInstance, nameHolgenTemp.data());
}

std::vector<int32_t> ICounterBumper::SplitNameAndParseSigned(const int8_t delim) {
  size_t holgenReturnValueHolgenSize = 0;
  auto holgenTempValue = SplitNameAndParseSignedHolgenPtr(mHolgenDotNetInstance, delim, &holgenReturnValueHolgenSize);
  std::vector<int32_t> holgenFinalValue;
  holgenFinalValue.reserve(holgenReturnValueHolgenSize);
  for (size_t holgenIterator = 0; holgenIterator < holgenReturnValueHolgenSize; ++holgenIterator) {
    holgenFinalValue.emplace_back(holgenTempValue[holgenIterator]);
  }
  DeferredDeleter::PerformManaged(holgenTempValue);
  return holgenFinalValue;
}

std::vector<std::string> ICounterBumper::SplitName(const int8_t delim) {
  size_t holgenReturnValueHolgenSize = 0;
  auto holgenTempValue = SplitNameHolgenPtr(mHolgenDotNetInstance, delim, &holgenReturnValueHolgenSize);
  std::vector<std::string> holgenFinalValue;
  holgenFinalValue.reserve(holgenReturnValueHolgenSize);
  for (size_t holgenIterator = 0; holgenIterator < holgenReturnValueHolgenSize; ++holgenIterator) {
    holgenFinalValue.emplace_back(holgenTempValue[holgenIterator]);
  }
  DeferredDeleter::PerformManagedArray(holgenTempValue, holgenReturnValueHolgenSize);
  return holgenFinalValue;
}

std::vector<ICounterBumper> ICounterBumper::CloneMultiple(const uint64_t count) {
  size_t holgenReturnValueHolgenSize = 0;
  auto holgenTempValue = CloneMultipleHolgenPtr(mHolgenDotNetInstance, count, &holgenReturnValueHolgenSize);
  std::vector<ICounterBumper> holgenFinalValue;
  holgenFinalValue.reserve(holgenReturnValueHolgenSize);
  for (size_t holgenIterator = 0; holgenIterator < holgenReturnValueHolgenSize; ++holgenIterator) {
    holgenFinalValue.emplace_back(static_cast<void **>(holgenTempValue)[holgenIterator]);
  }
  DeferredDeleter::PerformManaged(holgenTempValue);
  return holgenFinalValue;
}

std::vector<ModuleVersion> ICounterBumper::GetVersions(const uint64_t count) {
  size_t holgenReturnValueHolgenSize = 0;
  auto holgenTempValue = GetVersionsHolgenPtr(mHolgenDotNetInstance, count, &holgenReturnValueHolgenSize);
  std::vector<ModuleVersion> holgenFinalValue;
  holgenFinalValue.reserve(holgenReturnValueHolgenSize);
  for (size_t holgenIterator = 0; holgenIterator < holgenReturnValueHolgenSize; ++holgenIterator) {
    holgenFinalValue.emplace_back(holgenTempValue[holgenIterator]);
  }
  DeferredDeleter::PerformManaged(holgenTempValue);
  return holgenFinalValue;
}

std::vector<Counter *> ICounterBumper::GetCounters(const uint64_t count) {
  size_t holgenReturnValueHolgenSize = 0;
  auto holgenTempValue = GetCountersHolgenPtr(mHolgenDotNetInstance, count, &holgenReturnValueHolgenSize);
  std::vector<Counter *> holgenFinalValue;
  holgenFinalValue.reserve(holgenReturnValueHolgenSize);
  for (size_t holgenIterator = 0; holgenIterator < holgenReturnValueHolgenSize; ++holgenIterator) {
    holgenFinalValue.emplace_back(holgenTempValue[holgenIterator]);
  }
  DeferredDeleter::PerformManaged(holgenTempValue);
  return holgenFinalValue;
}

bool ICounterBumper::operator==(const ICounterBumper &rhs) const {
  return true;
}
}
