// This file is generated by holgen. Do not modify manually.
#pragma once

#include "../holgen.h"
#include <cstdint>
#include <functional>
#include <map>
#include <string>

struct lua_State;
namespace holgen_blackbox_test {
// Defined in tests/blackbox/schemas/testeventpublisher.hsc
class TestStaticEventPublisher {
public:
  TestStaticEventPublisher() = default;
  TestStaticEventPublisher(const TestStaticEventPublisher &rhs) = default;
  TestStaticEventPublisher(TestStaticEventPublisher &&rhs) noexcept = default;
  ~TestStaticEventPublisher() = default;
  const std::string &GetName() const;
  std::string &GetName();
  void SetName(const std::string &val);
  static void OnEvent1(lua_State *luaState, int val);
  static std::map<std::string, int> OnEvent2(lua_State *luaState);
  static void RegisterSubscriber(lua_State *luaState, const std::function<void(lua_State *)> &subscriber);
  static void UnregisterSubscriber(lua_State *luaState, const std::function<void(lua_State *)> &subscriber);
  static void UnregisterSubscriberByName(lua_State *luaState, const std::string &subscriberName);
  static void ClearSubscribers(lua_State *luaState);
  bool operator==(const TestStaticEventPublisher &rhs) const;
  void PushToLua(lua_State *luaState) const;
  void PushMirrorToLua(lua_State *luaState) const;
  void PushGlobalToLua(lua_State *luaState, const char *name) const;
  /*
   * This only works with negative indices
   * Reads proxy object (a table with a metatable and an embedded pointer or an index)
   */
  static TestStaticEventPublisher *ReadProxyFromLua(lua_State *luaState, int32_t idx);
  /*
   * This only works with negative indices
   * Reads a mirror object (a table with entries that mirror the c++ data structure)
   */
  static TestStaticEventPublisher ReadMirrorFromLua(lua_State *luaState, int32_t idx);
  TestStaticEventPublisher &operator=(const TestStaticEventPublisher &rhs) = default;
  TestStaticEventPublisher &operator=(TestStaticEventPublisher &&rhs) noexcept = default;
  inline static const char *CLASS_NAME = "TestStaticEventPublisher";
private:
  std::string mName;
};
}
