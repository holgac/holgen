// This file is generated by holgen. Do not modify manually.
#include "TestStructArrayType.h"

#include <rapidjson/document.h>
#include <lua.hpp>
#include "JsonHelper.h"
#include "LuaHelper.h"

namespace holgen_blackbox_test {
const TestStructArrayType TestStructArrayType::Type1(0);
const TestStructArrayType TestStructArrayType::Type2(1);

TestStructArrayType::TestStructArrayType(TestStructArrayType::UnderlyingType value) :
  mValue(value)
{
}

TestStructArrayType::UnderlyingType TestStructArrayType::GetValue() const {
  return mValue;
}

TestStructArrayType TestStructArrayType::FromString(std::string_view str) {
  if (str == "Type1") {
    return TestStructArrayType(0);
  } else if (str == "Type2") {
    return TestStructArrayType(1);
  } else {
    return TestStructArrayType(TestStructArrayType::Invalid);
  }
}

const char* TestStructArrayType::ToString() const {
  switch (mValue) {
    case 0: return "Type1";
    case 1: return "Type2";
    default: return "INVALID";
  }
}

TestStructArrayType& TestStructArrayType::operator =(UnderlyingType rhs) {
  mValue = rhs;
  return *this;
}

bool TestStructArrayType::operator ==(UnderlyingType rhs) const {
  return mValue == rhs;
}

bool TestStructArrayType::operator ==(const TestStructArrayType& rhs) const {
  return mValue == rhs.mValue;
}

bool TestStructArrayType::operator !=(UnderlyingType rhs) const {
  return mValue != rhs;
}

bool TestStructArrayType::operator !=(const TestStructArrayType& rhs) const {
  return mValue != rhs.mValue;
}

bool TestStructArrayType::operator <(UnderlyingType rhs) const {
  return mValue < rhs;
}

bool TestStructArrayType::operator <(const TestStructArrayType& rhs) const {
  return mValue < rhs.mValue;
}

std::array<TestStructArrayType, 2> TestStructArrayType::GetEntries() {
  return std::array<TestStructArrayType, 2>{Type1, Type2};
}

bool TestStructArrayType::ParseJson(const rapidjson::Value& json, const Converter& converter) {
  if (json.IsString()) {
    *this = TestStructArrayType::FromString(std::string_view(json.GetString(), json.GetStringLength()));
  } else if (json.IsInt64()) {
    *this = TestStructArrayType(json.GetInt64());
  } else {
    *this = TestStructArrayType(TestStructArrayType::Invalid);
    HOLGEN_WARN("Could not json-parse TestStructArrayType enum: invalid json type");
    return false;
  }
  return true;
}

void TestStructArrayType::PushToLua(lua_State* luaState) const {
  LuaHelper::Push(mValue, luaState);
}
}
