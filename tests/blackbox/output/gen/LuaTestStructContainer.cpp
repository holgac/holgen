// This file is generated by holgen. Do not modify manually.
#include "LuaTestStructContainer.h"

#include <cstring>
#include <lua.hpp>
#include <rapidjson/document.h>
#include "Converter.h"
#include "JsonHelper.h"
#include "LuaHelper.h"

namespace holgen_blackbox_test {
const std::vector<uint32_t> &LuaTestStructContainer::GetTestVector() const {
  return mTestVector;
}

std::vector<uint32_t> &LuaTestStructContainer::GetTestVector() {
  return mTestVector;
}

const std::map<std::string, uint32_t> &LuaTestStructContainer::GetTestMap() const {
  return mTestMap;
}

std::map<std::string, uint32_t> &LuaTestStructContainer::GetTestMap() {
  return mTestMap;
}

void LuaTestStructContainer::SetTestVector(const std::vector<uint32_t> &val) {
  mTestVector = val;
}

void LuaTestStructContainer::SetTestMap(const std::map<std::string, uint32_t> &val) {
  mTestMap = val;
}

uint32_t *LuaTestStructContainer::AddTestVectorElem(uint32_t elem) {
  return &(mTestVector.emplace_back(elem));
}

const uint32_t *LuaTestStructContainer::GetTestVectorElem(size_t idx) const {
  if (idx >= mTestVector.size())
    return nullptr;
  return &mTestVector[idx];
}

uint32_t *LuaTestStructContainer::GetTestVectorElem(size_t idx) {
  if (idx >= mTestVector.size())
    return nullptr;
  return &mTestVector[idx];
}

void LuaTestStructContainer::DeleteTestVectorElem(size_t idx) {
  if (idx != mTestVector.size() - 1) {
    mTestVector[idx] = std::move(mTestVector.back());
  }
  mTestVector.pop_back();
}

size_t LuaTestStructContainer::GetTestVectorElemCount() const {
  return mTestVector.size();
}

bool LuaTestStructContainer::operator==(const LuaTestStructContainer &rhs) const {
  return !(
      mTestVector != rhs.mTestVector ||
      mTestMap != rhs.mTestMap
  );
}

bool LuaTestStructContainer::ParseJson(const rapidjson::Value &json, const Converter &converter) {
  if (json.IsObject()) {
    for (const auto &data: json.GetObject()) {
      const auto &name = data.name.GetString();
      if (0 == strcmp("testVector", name)) {
        auto res = JsonHelper::Parse(mTestVector, data.value, converter);
        HOLGEN_WARN_AND_RETURN_IF(!res, false, "Could not json-parse LuaTestStructContainer.testVector field");
      } else if (0 == strcmp("testMap", name)) {
        auto res = JsonHelper::Parse(mTestMap, data.value, converter);
        HOLGEN_WARN_AND_RETURN_IF(!res, false, "Could not json-parse LuaTestStructContainer.testMap field");
      } else {
        HOLGEN_WARN("Unexpected entry in json when parsing LuaTestStructContainer: {}", name);
      }
    }
  } else if (json.IsArray()) {
    auto it = json.Begin();
    {
      HOLGEN_WARN_AND_RETURN_IF(it == json.End(), false, "Exhausted elements when parsing LuaTestStructContainer!");
      auto res = JsonHelper::Parse(mTestVector, (*it), converter);
      HOLGEN_WARN_AND_RETURN_IF(!res, false, "Could not json-parse LuaTestStructContainer.testVector field");
      ++it;
    }
    {
      HOLGEN_WARN_AND_RETURN_IF(it == json.End(), false, "Exhausted elements when parsing LuaTestStructContainer!");
      auto res = JsonHelper::Parse(mTestMap, (*it), converter);
      HOLGEN_WARN_AND_RETURN_IF(!res, false, "Could not json-parse LuaTestStructContainer.testMap field");
      ++it;
    }
    HOLGEN_WARN_AND_RETURN_IF(it != json.End(), false, "Too many elements when parsing LuaTestStructContainer!");
  } else {
    HOLGEN_WARN("Unexpected json type when parsing LuaTestStructContainer.");
    return false;
  }
  return true;
}

void LuaTestStructContainer::PushToLua(lua_State *luaState) const {
  lua_newtable(luaState);
  lua_pushstring(luaState, "p");
  lua_pushlightuserdata(luaState, (void *) this);
  lua_settable(luaState, -3);
  lua_pushstring(luaState, "c");
  lua_pushlightuserdata(luaState, &CLASS_NAME);
  lua_settable(luaState, -3);
  lua_getglobal(luaState, "LuaTestStructContainer");
  lua_setmetatable(luaState, -2);
}

void LuaTestStructContainer::PushMirrorToLua(lua_State *luaState) const {
  lua_newtable(luaState);
  lua_pushstring(luaState, "testVector");
  LuaHelper::Push<true>(mTestVector, luaState);
  lua_settable(luaState, -3);
  lua_pushstring(luaState, "testMap");
  LuaHelper::Push<true>(mTestMap, luaState);
  lua_settable(luaState, -3);
}

void LuaTestStructContainer::PushGlobalToLua(lua_State *luaState, const char *name) const {
  PushToLua(luaState);
  lua_setglobal(luaState, name);
}

LuaTestStructContainer *LuaTestStructContainer::ReadProxyFromLua(lua_State *luaState, int32_t idx) {
  lua_pushstring(luaState, "c");
  lua_gettable(luaState, idx - 1);
  if (!lua_isuserdata(luaState, -1)) {
    HOLGEN_WARN("Proxy object does not contain the correct metadata!");
    return nullptr;
  }
  auto className = *static_cast<const char**>(lua_touserdata(luaState, -1));
  lua_pop(luaState, 1);
  HOLGEN_WARN_AND_RETURN_IF(className != CLASS_NAME, nullptr, "Received {} instance when expecting LuaTestStructContainer", className);
  lua_pushstring(luaState, "p");
  lua_gettable(luaState, idx - 1);
  auto ptr = (LuaTestStructContainer *) lua_touserdata(luaState, -1);
  lua_pop(luaState, 1);
  return ptr;
}

LuaTestStructContainer LuaTestStructContainer::ReadMirrorFromLua(lua_State *luaState, int32_t idx) {
  auto result = LuaTestStructContainer{};
  lua_pushvalue(luaState, idx);
  lua_pushnil(luaState);
  while (lua_next(luaState, -2)) {
    auto key = lua_tostring(luaState, -2);
    if (0 == strcmp("testVector", key)) {
      LuaHelper::Read(result.mTestVector, luaState, -1);
      lua_pop(luaState, 1);
    } else if (0 == strcmp("testMap", key)) {
      LuaHelper::Read(result.mTestMap, luaState, -1);
      lua_pop(luaState, 1);
    } else {
      HOLGEN_WARN("Unexpected lua field: LuaTestStructContainer.{}", key);
      lua_pop(luaState, 1);
    }
  }
  lua_pop(luaState, 1);
  return result;
}

int LuaTestStructContainer::NewIndexMetaMethod(lua_State *luaState) {
  auto instance = LuaTestStructContainer::ReadProxyFromLua(luaState, -3);
  const char *key = lua_tostring(luaState, -2);
  if (0 == strcmp("testVector", key)) {
    auto res = LuaHelper::Read(instance->mTestVector, luaState, -1);
    HOLGEN_WARN_IF(!res, "Assigning LuaTestStructContainer.testVector from lua failed!");
  } else if (0 == strcmp("testMap", key)) {
    auto res = LuaHelper::Read(instance->mTestMap, luaState, -1);
    HOLGEN_WARN_IF(!res, "Assigning LuaTestStructContainer.testMap from lua failed!");
  } else {
    HOLGEN_WARN("Unexpected lua field: LuaTestStructContainer.{}", key);
  }
  return 0;
}

void LuaTestStructContainer::CreateLuaMetatable(lua_State *luaState) {
  lua_newtable(luaState);
  lua_pushstring(luaState, "__index");
  lua_pushcfunction(luaState, LuaTestStructContainer::IndexMetaMethod);
  lua_settable(luaState, -3);
  lua_pushstring(luaState, "__newindex");
  lua_pushcfunction(luaState, LuaTestStructContainer::NewIndexMetaMethod);
  lua_settable(luaState, -3);
  lua_setglobal(luaState, "LuaTestStructContainer");
}

int LuaTestStructContainer::AddTestVectorElemCallerFromLua(lua_State *luaState) {
  auto instance = LuaTestStructContainer::ReadProxyFromLua(luaState, -2);
  HOLGEN_WARN_AND_RETURN_IF(!instance, 0, "Calling LuaTestStructContainer.AddTestVectorElem method with an invalid lua proxy object!");
  uint32_t arg0;
  LuaHelper::Read(arg0, luaState, -1);
  auto result = instance->AddTestVectorElem(arg0);
  LuaHelper::Push<false>(result, luaState);
  return 1;
}

int LuaTestStructContainer::GetTestVectorElemCallerFromLua(lua_State *luaState) {
  auto instance = LuaTestStructContainer::ReadProxyFromLua(luaState, -2);
  HOLGEN_WARN_AND_RETURN_IF(!instance, 0, "Calling LuaTestStructContainer.GetTestVectorElem method with an invalid lua proxy object!");
  size_t arg0;
  LuaHelper::Read(arg0, luaState, -1);
  auto result = instance->GetTestVectorElem(arg0);
  LuaHelper::Push<false>(result, luaState);
  return 1;
}

int LuaTestStructContainer::DeleteTestVectorElemCallerFromLua(lua_State *luaState) {
  auto instance = LuaTestStructContainer::ReadProxyFromLua(luaState, -2);
  HOLGEN_WARN_AND_RETURN_IF(!instance, 0, "Calling LuaTestStructContainer.DeleteTestVectorElem method with an invalid lua proxy object!");
  size_t arg0;
  LuaHelper::Read(arg0, luaState, -1);
  instance->DeleteTestVectorElem(arg0);
  return 0;
}

int LuaTestStructContainer::GetTestVectorElemCountCallerFromLua(lua_State *luaState) {
  auto instance = LuaTestStructContainer::ReadProxyFromLua(luaState, -1);
  HOLGEN_WARN_AND_RETURN_IF(!instance, 0, "Calling LuaTestStructContainer.GetTestVectorElemCount method with an invalid lua proxy object!");
  auto result = instance->GetTestVectorElemCount();
  LuaHelper::Push<true>(result, luaState);
  return 1;
}

int LuaTestStructContainer::IndexMetaMethod(lua_State *luaState) {
  const char *key = lua_tostring(luaState, -1);
  if (0 == strcmp("testVector", key)) {
    auto instance = LuaTestStructContainer::ReadProxyFromLua(luaState, -2);
    HOLGEN_WARN_AND_RETURN_IF(!instance, 0, "Requesting for LuaTestStructContainer.testVector with an invalid lua proxy object!");
    LuaHelper::Push<false>(instance->mTestVector, luaState);
  } else if (0 == strcmp("testMap", key)) {
    auto instance = LuaTestStructContainer::ReadProxyFromLua(luaState, -2);
    HOLGEN_WARN_AND_RETURN_IF(!instance, 0, "Requesting for LuaTestStructContainer.testMap with an invalid lua proxy object!");
    LuaHelper::Push<false>(instance->mTestMap, luaState);
  } else if (0 == strcmp("AddTestVectorElem", key)) {
    lua_pushcfunction(luaState, LuaTestStructContainer::AddTestVectorElemCallerFromLua);
  } else if (0 == strcmp("GetTestVectorElem", key)) {
    lua_pushcfunction(luaState, LuaTestStructContainer::GetTestVectorElemCallerFromLua);
  } else if (0 == strcmp("DeleteTestVectorElem", key)) {
    lua_pushcfunction(luaState, LuaTestStructContainer::DeleteTestVectorElemCallerFromLua);
  } else if (0 == strcmp("GetTestVectorElemCount", key)) {
    lua_pushcfunction(luaState, LuaTestStructContainer::GetTestVectorElemCountCallerFromLua);
  } else {
    HOLGEN_WARN("Unexpected lua field: LuaTestStructContainer.{}", key);
    return 0;
  }
  return 1;
}
}
