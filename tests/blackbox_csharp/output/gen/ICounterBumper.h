// This file is generated by holgen. Do not modify manually.
#pragma once

#include "../holgen.h"
#include <array>
#include <cstdint>
#include <string>
#include <vector>
#include "HolgenDotNetInterface.h"
#include "ModuleVersion.h"

namespace holgen_blackbox_csharp {
  class Counter;
  class DotNetHost;
}
namespace holgen_blackbox_csharp {
// Defined in tests/blackbox_csharp/schemas/CounterManager.hsc
class ICounterBumper : public HolgenDotNetInterface {
friend class DotNetHost;

public:
  explicit ICounterBumper(void *ptr);
  ICounterBumper(const ICounterBumper &rhs) = delete;
  ICounterBumper(ICounterBumper &&rhs) noexcept;
  const ICounterBumper &operator=(const ICounterBumper &rhs) const = delete;
  ICounterBumper &operator=(ICounterBumper &&rhs) noexcept;
  void SetName(const std::string &name);
  std::string GetName();
  void Bump();
  void SetNameFromCounter(const Counter &ctr);
  void SetNameFromRevision(const ModuleVersion &version);
  ModuleVersion GetVersion();
  Counter &GetCounter();
  ICounterBumper Clone();
  void CopyFrom(const ICounterBumper &other);
  void BumpMultiple(const std::vector<std::string> &names, const std::vector<uint32_t> &counts);
  void SetNameConcatArray(const std::array<std::string, 3> &name);
  std::vector<int32_t> SplitNameAndParseSigned(const int8_t delim);
  std::vector<std::string> SplitName(const int8_t delim);
  std::vector<ICounterBumper> CloneMultiple(const uint64_t count);
  std::vector<ModuleVersion> GetVersions(const uint64_t count);
  std::vector<Counter *> GetCounters(const uint64_t count);
  bool operator==(const ICounterBumper &rhs) const;
  inline static const char *CLASS_NAME = "ICounterBumper";
private:
  inline static void (*SetNameHolgenPtr)(void *holgenDotNetInstance, const char *name) = nullptr;
  inline static const char *(*GetNameHolgenPtr)(void *holgenDotNetInstance) = nullptr;
  inline static void (*BumpHolgenPtr)(void *holgenDotNetInstance) = nullptr;
  inline static void (*SetNameFromCounterHolgenPtr)(void *holgenDotNetInstance, const Counter *ctr) = nullptr;
  inline static void (*SetNameFromRevisionHolgenPtr)(void *holgenDotNetInstance, const ModuleVersion *version) = nullptr;
  inline static ModuleVersion (*GetVersionHolgenPtr)(void *holgenDotNetInstance) = nullptr;
  inline static Counter *(*GetCounterHolgenPtr)(void *holgenDotNetInstance) = nullptr;
  inline static void *(*CloneHolgenPtr)(void *holgenDotNetInstance) = nullptr;
  inline static void (*CopyFromHolgenPtr)(void *holgenDotNetInstance, void *other) = nullptr;
  inline static void (*BumpMultipleHolgenPtr)(void *holgenDotNetInstance, const char **names, size_t namesHolgenSize, const uint32_t *counts, size_t countsHolgenSize) = nullptr;
  inline static void (*SetNameConcatArrayHolgenPtr)(void *holgenDotNetInstance, const char **name) = nullptr;
  inline static int32_t *(*SplitNameAndParseSignedHolgenPtr)(void *holgenDotNetInstance, const int8_t delim, size_t *holgenReturnValueHolgenSize) = nullptr;
  inline static const char **(*SplitNameHolgenPtr)(void *holgenDotNetInstance, const int8_t delim, size_t *holgenReturnValueHolgenSize) = nullptr;
  inline static void *(*CloneMultipleHolgenPtr)(void *holgenDotNetInstance, const uint64_t count, size_t *holgenReturnValueHolgenSize) = nullptr;
  inline static ModuleVersion *(*GetVersionsHolgenPtr)(void *holgenDotNetInstance, const uint64_t count, size_t *holgenReturnValueHolgenSize) = nullptr;
  inline static Counter **(*GetCountersHolgenPtr)(void *holgenDotNetInstance, const uint64_t count, size_t *holgenReturnValueHolgenSize) = nullptr;
};
}
