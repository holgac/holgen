// This file is generated by holgen. Do not modify manually.
#include "TestCompositeIdHuman.h"

#include <cstring>
#include <rapidjson/document.h>
#include "Converter.h"
#include "JsonHelper.h"
#include "LuaHelper.h"

namespace holgen_blackbox_test {
int32_t TestCompositeIdHuman::GetId() const {
  return mId;
}

int16_t TestCompositeIdHuman::GetVersion() const {
  return mVersion;
}

void TestCompositeIdHuman::SetId(int32_t val) {
  mId = val;
}

void TestCompositeIdHuman::SetVersion(int16_t val) {
  mVersion = val;
}

TestCompositeIdCompositeId TestCompositeIdHuman::GetCompositeId() const {
  return TestCompositeIdCompositeId(TestCompositeIdObjectType::Human, mId, mVersion);
}

bool TestCompositeIdHuman::operator==(const TestCompositeIdHuman &rhs) const {
  return !(
      mId != rhs.mId ||
      mVersion != rhs.mVersion
  );
}

bool TestCompositeIdHuman::ParseJson(const rapidjson::Value &json, const Converter &converter, lua_State *luaState) {
  if (json.IsObject()) {
    for (const auto &data: json.GetObject()) {
      const auto &name = data.name.GetString();
      if (0 == strcmp("id", name)) {
        auto res = JsonHelper::Parse(mId, data.value, converter, luaState);
        HOLGEN_WARN_AND_RETURN_IF(!res, false, "Could not json-parse TestCompositeIdHuman.id field");
      } else if (0 == strcmp("version", name)) {
        auto res = JsonHelper::Parse(mVersion, data.value, converter, luaState);
        HOLGEN_WARN_AND_RETURN_IF(!res, false, "Could not json-parse TestCompositeIdHuman.version field");
      } else {
        HOLGEN_WARN("Unexpected entry in json when parsing TestCompositeIdHuman: {}", name);
      }
    }
  } else if (json.IsArray()) {
    auto it = json.Begin();
    {
      HOLGEN_WARN_AND_RETURN_IF(it == json.End(), false, "Exhausted elements when parsing TestCompositeIdHuman!");
      auto res = JsonHelper::Parse(mId, (*it), converter, luaState);
      HOLGEN_WARN_AND_RETURN_IF(!res, false, "Could not json-parse TestCompositeIdHuman.id field");
      ++it;
    }
    {
      HOLGEN_WARN_AND_RETURN_IF(it == json.End(), false, "Exhausted elements when parsing TestCompositeIdHuman!");
      auto res = JsonHelper::Parse(mVersion, (*it), converter, luaState);
      HOLGEN_WARN_AND_RETURN_IF(!res, false, "Could not json-parse TestCompositeIdHuman.version field");
      ++it;
    }
    HOLGEN_WARN_AND_RETURN_IF(it != json.End(), false, "Too many elements when parsing TestCompositeIdHuman!");
  } else {
    HOLGEN_WARN("Unexpected json type when parsing TestCompositeIdHuman.");
    return false;
  }
  return true;
}

rapidjson::Value TestCompositeIdHuman::DumpJson(rapidjson::Document &doc, lua_State *luaState) const {
  rapidjson::Value val(rapidjson::kObjectType);
  val.AddMember("id", JsonHelper::Dump(mId, doc, luaState), doc.GetAllocator());
  val.AddMember("version", JsonHelper::Dump(mVersion, doc, luaState), doc.GetAllocator());
  return val;
}

void TestCompositeIdHuman::PushToLua(lua_State *luaState) const {
  lua_newtable(luaState);
  lua_pushstring(luaState, "p");
  lua_pushlightuserdata(luaState, (void *) this);
  lua_settable(luaState, -3);
  lua_pushstring(luaState, "c");
  lua_pushlightuserdata(luaState, &CLASS_NAME);
  lua_settable(luaState, -3);
  lua_getglobal(luaState, "TestCompositeIdHuman");
  lua_setmetatable(luaState, -2);
}

void TestCompositeIdHuman::PushMirrorToLua(lua_State *luaState) const {
  lua_newtable(luaState);
  lua_pushstring(luaState, "id");
  LuaHelper::Push<true>(mId, luaState);
  lua_settable(luaState, -3);
  lua_pushstring(luaState, "version");
  LuaHelper::Push<true>(mVersion, luaState);
  lua_settable(luaState, -3);
}

void TestCompositeIdHuman::PushGlobalToLua(lua_State *luaState, const char *name) const {
  PushToLua(luaState);
  lua_setglobal(luaState, name);
}

TestCompositeIdHuman *TestCompositeIdHuman::ReadProxyFromLua(lua_State *luaState, int32_t idx) {
  lua_pushstring(luaState, "c");
  lua_gettable(luaState, idx - 1);
  if (!lua_isuserdata(luaState, -1)) {
    HOLGEN_WARN("Proxy object does not contain the correct metadata!");
    return nullptr;
  }
  auto className = *static_cast<const char**>(lua_touserdata(luaState, -1));
  lua_pop(luaState, 1);
  HOLGEN_WARN_AND_RETURN_IF(className != CLASS_NAME, nullptr, "Received {} instance when expecting TestCompositeIdHuman", className);
  lua_pushstring(luaState, "p");
  lua_gettable(luaState, idx - 1);
  auto ptr = (TestCompositeIdHuman *) lua_touserdata(luaState, -1);
  lua_pop(luaState, 1);
  return ptr;
}

TestCompositeIdHuman TestCompositeIdHuman::ReadMirrorFromLua(lua_State *luaState, int32_t idx) {
  auto result = TestCompositeIdHuman{};
  lua_pushvalue(luaState, idx);
  lua_pushnil(luaState);
  while (lua_next(luaState, -2)) {
    auto key = lua_tostring(luaState, -2);
    if (0 == strcmp("id", key)) {
      LuaHelper::Read(result.mId, luaState, -1);
      lua_pop(luaState, 1);
    } else if (0 == strcmp("version", key)) {
      LuaHelper::Read(result.mVersion, luaState, -1);
      lua_pop(luaState, 1);
    } else {
      HOLGEN_WARN("Unexpected lua field: TestCompositeIdHuman.{}", key);
      lua_pop(luaState, 1);
    }
  }
  lua_pop(luaState, 1);
  return result;
}

int TestCompositeIdHuman::NewIndexMetaMethod(lua_State *luaState) {
  auto instance = TestCompositeIdHuman::ReadProxyFromLua(luaState, -3);
  const char *key = lua_tostring(luaState, -2);
  if (0 == strcmp("id", key)) {
    auto res = LuaHelper::Read(instance->mId, luaState, -1);
    HOLGEN_WARN_IF(!res, "Assigning TestCompositeIdHuman.id from lua failed!");
  } else if (0 == strcmp("version", key)) {
    auto res = LuaHelper::Read(instance->mVersion, luaState, -1);
    HOLGEN_WARN_IF(!res, "Assigning TestCompositeIdHuman.version from lua failed!");
  } else {
    HOLGEN_WARN("Unexpected lua field: TestCompositeIdHuman.{}", key);
  }
  return 0;
}

void TestCompositeIdHuman::CreateLuaMetatable(lua_State *luaState) {
  lua_newtable(luaState);
  lua_pushstring(luaState, "__index");
  lua_pushcfunction(luaState, TestCompositeIdHuman::IndexMetaMethod);
  lua_settable(luaState, -3);
  lua_pushstring(luaState, "__newindex");
  lua_pushcfunction(luaState, TestCompositeIdHuman::NewIndexMetaMethod);
  lua_settable(luaState, -3);
  lua_setglobal(luaState, "TestCompositeIdHuman");
}

int TestCompositeIdHuman::IndexMetaMethod(lua_State *luaState) {
  const char *key = lua_tostring(luaState, -1);
  if (0 == strcmp("id", key)) {
    auto instance = TestCompositeIdHuman::ReadProxyFromLua(luaState, -2);
    HOLGEN_WARN_AND_RETURN_IF(!instance, 0, "Requesting for TestCompositeIdHuman.id with an invalid lua proxy object!");
    LuaHelper::Push<false>(instance->mId, luaState);
  } else if (0 == strcmp("version", key)) {
    auto instance = TestCompositeIdHuman::ReadProxyFromLua(luaState, -2);
    HOLGEN_WARN_AND_RETURN_IF(!instance, 0, "Requesting for TestCompositeIdHuman.version with an invalid lua proxy object!");
    LuaHelper::Push<false>(instance->mVersion, luaState);
  } else {
    HOLGEN_WARN("Unexpected lua field: TestCompositeIdHuman.{}", key);
    return 0;
  }
  return 1;
}
}
