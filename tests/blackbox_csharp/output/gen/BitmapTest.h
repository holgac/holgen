// This file is generated by holgen. Do not modify manually.
#pragma once

#include "../holgen.h"
#include <array>
#include <cstdint>
#include <format>
#include <string>

namespace holgen_blackbox_csharp {
// Defined in tests/blackbox_csharp/schemas/EnumTest.hsc
class BitmapTest {
public:
  using UnderlyingType=uint64_t;
  enum EntryIndex : UnderlyingType {
    Entry1Index = 0,
    Entry2Index = 1,
    Entry5Index = 2,
  };
  enum Entry : UnderlyingType {
    Entry1 = 1,
    Entry2 = 2,
    Entry5 = 4,
  };
  explicit BitmapTest(UnderlyingType value = 0);
  UnderlyingType GetValue() const;
  static BitmapTest FromString(std::string_view str);
  std::string ToString() const;
  BitmapTest &operator=(UnderlyingType rhs);
  bool operator==(UnderlyingType rhs) const;
  bool operator==(const BitmapTest &rhs) const;
  bool operator!=(UnderlyingType rhs) const;
  bool operator!=(const BitmapTest &rhs) const;
  bool operator<(UnderlyingType rhs) const;
  bool operator<(const BitmapTest &rhs) const;
  BitmapTest &operator|=(BitmapTest::Entry rhs);
  BitmapTest &operator|=(const BitmapTest &rhs);
  BitmapTest &operator|=(UnderlyingType rhs);
  bool operator|(const BitmapTest &rhs) const;
  bool operator|(BitmapTest::Entry rhs) const;
  BitmapTest &operator&=(BitmapTest::Entry rhs);
  BitmapTest &operator&=(const BitmapTest &rhs);
  BitmapTest &operator&=(UnderlyingType rhs);
  bool operator&(const BitmapTest &rhs) const;
  bool operator&(BitmapTest::Entry rhs) const;
  BitmapTest &operator^=(BitmapTest::Entry rhs);
  BitmapTest &operator^=(const BitmapTest &rhs);
  BitmapTest &operator^=(UnderlyingType rhs);
  bool operator^(const BitmapTest &rhs) const;
  bool operator^(BitmapTest::Entry rhs) const;
  bool Has(const BitmapTest &val) const;
  void Add(const BitmapTest &val);
  void Remove(const BitmapTest &val);
  void Toggle(const BitmapTest &val);
  bool Has(const BitmapTest::Entry &val) const;
  void Add(const BitmapTest::Entry &val);
  void Remove(const BitmapTest::Entry &val);
  void Toggle(const BitmapTest::Entry &val);
  constexpr static std::array<BitmapTest::Entry, 3> GetEntries() {
    return std::array<BitmapTest::Entry, 3>{Entry1, Entry2, Entry5};
  }
  constexpr static std::array<BitmapTest::EntryIndex, 3> GetEntryIndices() {
    return std::array<BitmapTest::EntryIndex, 3>{Entry1Index, Entry2Index, Entry5Index};
  }
private:
  static BitmapTest FromStringSingle(std::string_view str);
  const char *ToStringSingle() const;
  UnderlyingType mValue;
};
}
namespace std {
template <>
struct formatter<holgen_blackbox_csharp::BitmapTest::Entry> : public formatter<string> {
public:
  template <typename FormatContext>
  auto format(const holgen_blackbox_csharp::BitmapTest::Entry &obj, FormatContext &ctx) const {
    return format_to(ctx.out(), "{}", holgen_blackbox_csharp::BitmapTest(obj).ToString());
  }
};
}
namespace std {
template <>
struct formatter<holgen_blackbox_csharp::BitmapTest> : public formatter<string> {
public:
  template <typename FormatContext>
  auto format(const holgen_blackbox_csharp::BitmapTest &obj, FormatContext &ctx) const {
    return format_to(ctx.out(), "{}", obj.ToString());
  }
};
}
