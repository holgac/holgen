// This file is generated by holgen. Do not modify manually.
#include "TestVariantStructSharedType.h"

#include <rapidjson/document.h>
#include <lua.hpp>
#include "JsonHelper.h"
#include "LuaHelper.h"

namespace holgen_blackbox_test {
TestVariantStructSharedType::~TestVariantStructSharedType() {
  if (mBeingType == TestVariantStructType::Human) {
    GetBeing1AsTestVariantStructHuman()->~TestVariantStructHuman();
  } else if (mBeingType == TestVariantStructType::Cat) {
    GetBeing1AsTestVariantStructCat()->~TestVariantStructCat();
  }
  if (mBeingType == TestVariantStructType::Human) {
    GetBeing2AsTestVariantStructHuman()->~TestVariantStructHuman();
  } else if (mBeingType == TestVariantStructType::Cat) {
    GetBeing2AsTestVariantStructCat()->~TestVariantStructCat();
  }
}
bool TestVariantStructSharedType::operator==(const TestVariantStructSharedType& rhs) const {
  return true;
}

const TestVariantStructHuman* TestVariantStructSharedType::GetBeing1AsTestVariantStructHuman() const {
  HOLGEN_FAIL_IF(mBeingType != TestVariantStructType::Human, "Attempting to get TestVariantStructSharedType.being1 as TestVariantStructHuman while its actual type is {}!", mBeingType);
  return reinterpret_cast<const TestVariantStructHuman*>(mBeing1.data());
}

TestVariantStructHuman* TestVariantStructSharedType::GetBeing1AsTestVariantStructHuman() {
  HOLGEN_FAIL_IF(mBeingType != TestVariantStructType::Human, "Attempting to get TestVariantStructSharedType.being1 as TestVariantStructHuman while its actual type is {}!", mBeingType);
  return reinterpret_cast<TestVariantStructHuman*>(mBeing1.data());
}

const TestVariantStructCat* TestVariantStructSharedType::GetBeing1AsTestVariantStructCat() const {
  HOLGEN_FAIL_IF(mBeingType != TestVariantStructType::Cat, "Attempting to get TestVariantStructSharedType.being1 as TestVariantStructCat while its actual type is {}!", mBeingType);
  return reinterpret_cast<const TestVariantStructCat*>(mBeing1.data());
}

TestVariantStructCat* TestVariantStructSharedType::GetBeing1AsTestVariantStructCat() {
  HOLGEN_FAIL_IF(mBeingType != TestVariantStructType::Cat, "Attempting to get TestVariantStructSharedType.being1 as TestVariantStructCat while its actual type is {}!", mBeingType);
  return reinterpret_cast<TestVariantStructCat*>(mBeing1.data());
}

const TestVariantStructHuman* TestVariantStructSharedType::GetBeing2AsTestVariantStructHuman() const {
  HOLGEN_FAIL_IF(mBeingType != TestVariantStructType::Human, "Attempting to get TestVariantStructSharedType.being2 as TestVariantStructHuman while its actual type is {}!", mBeingType);
  return reinterpret_cast<const TestVariantStructHuman*>(mBeing2.data());
}

TestVariantStructHuman* TestVariantStructSharedType::GetBeing2AsTestVariantStructHuman() {
  HOLGEN_FAIL_IF(mBeingType != TestVariantStructType::Human, "Attempting to get TestVariantStructSharedType.being2 as TestVariantStructHuman while its actual type is {}!", mBeingType);
  return reinterpret_cast<TestVariantStructHuman*>(mBeing2.data());
}

const TestVariantStructCat* TestVariantStructSharedType::GetBeing2AsTestVariantStructCat() const {
  HOLGEN_FAIL_IF(mBeingType != TestVariantStructType::Cat, "Attempting to get TestVariantStructSharedType.being2 as TestVariantStructCat while its actual type is {}!", mBeingType);
  return reinterpret_cast<const TestVariantStructCat*>(mBeing2.data());
}

TestVariantStructCat* TestVariantStructSharedType::GetBeing2AsTestVariantStructCat() {
  HOLGEN_FAIL_IF(mBeingType != TestVariantStructType::Cat, "Attempting to get TestVariantStructSharedType.being2 as TestVariantStructCat while its actual type is {}!", mBeingType);
  return reinterpret_cast<TestVariantStructCat*>(mBeing2.data());
}

void TestVariantStructSharedType::SetBeingType(const TestVariantStructType& val) {
  HOLGEN_FAIL_IF(mBeingType != TestVariantStructType::Invalid, "beingType field was already initialized (as {}), trying to initialize as {}!,", mBeingType, val);
  mBeingType = val;
  if (val == TestVariantStructType::Human) {
    new (mBeing1.data()) TestVariantStructHuman();
    new (mBeing2.data()) TestVariantStructHuman();
  } else if (val == TestVariantStructType::Cat) {
    new (mBeing1.data()) TestVariantStructCat();
    new (mBeing2.data()) TestVariantStructCat();
  }
}

TestVariantStructType TestVariantStructSharedType::GetBeingType() const {
  return mBeingType;
}

bool TestVariantStructSharedType::ParseJson(const rapidjson::Value& json, const Converter& converter) {
  HOLGEN_WARN_AND_RETURN_IF(!json.IsObject(), false, "Found non-object json element when parsing TestVariantStructSharedType");
  for(const auto& data: json.GetObject()) {
    const auto& name = data.name.GetString();
    if (0 == strcmp("beingType", name)) {
      TestVariantStructType temp;
      auto res = JsonHelper::Parse(temp, data.value, converter);
      HOLGEN_WARN_AND_RETURN_IF(!res, false, "Could not json-parse TestVariantStructSharedType.beingType field");
      SetBeingType(temp);
    } else if (0 == strcmp("being1", name)) {
      bool res;
      if (mBeingType == TestVariantStructType::Human) {
        res = JsonHelper::Parse(*GetBeing1AsTestVariantStructHuman(), data.value, converter);
      } else if (mBeingType == TestVariantStructType::Cat) {
        res = JsonHelper::Parse(*GetBeing1AsTestVariantStructCat(), data.value, converter);
      } else {
        HOLGEN_WARN("Could not json-parse TestVariantStructSharedType.being1 variant field, its type {} is unexpected", mBeingType);
        return false;
      }
      HOLGEN_WARN_AND_RETURN_IF(!res, false, "Could not json-parse TestVariantStructSharedType.being1 variant field of type {}", mBeingType);
    } else if (0 == strcmp("being2", name)) {
      bool res;
      if (mBeingType == TestVariantStructType::Human) {
        res = JsonHelper::Parse(*GetBeing2AsTestVariantStructHuman(), data.value, converter);
      } else if (mBeingType == TestVariantStructType::Cat) {
        res = JsonHelper::Parse(*GetBeing2AsTestVariantStructCat(), data.value, converter);
      } else {
        HOLGEN_WARN("Could not json-parse TestVariantStructSharedType.being2 variant field, its type {} is unexpected", mBeingType);
        return false;
      }
      HOLGEN_WARN_AND_RETURN_IF(!res, false, "Could not json-parse TestVariantStructSharedType.being2 variant field of type {}", mBeingType);
    } else {
      HOLGEN_WARN("Unexpected entry in json when parsing TestVariantStructSharedType: {}", name);
    }
  }
  return true;
}

void TestVariantStructSharedType::PushToLua(lua_State* luaState) const {
  lua_newtable(luaState);
  lua_pushstring(luaState, "p");
  lua_pushlightuserdata(luaState, (void*)this);
  lua_settable(luaState, -3);
  lua_getglobal(luaState, "TestVariantStructSharedTypeMeta");
  lua_setmetatable(luaState, -2);
}

void TestVariantStructSharedType::PushGlobalToLua(lua_State* luaState, const char* name) const {
  PushToLua(luaState);
  lua_setglobal(luaState, name);
}

TestVariantStructSharedType* TestVariantStructSharedType::ReadFromLua(lua_State* luaState, int32_t idx) {
  lua_pushstring(luaState, "p");
  lua_gettable(luaState, idx - 1);
  auto ptr = (TestVariantStructSharedType*)lua_touserdata(luaState, -1);
  lua_pop(luaState, 1);
  return ptr;
}

int TestVariantStructSharedType::IndexMetaMethod(lua_State* luaState) {
  return 0;
}

int TestVariantStructSharedType::NewIndexMetaMethod(lua_State* luaState) {
  return 0;
}

void TestVariantStructSharedType::CreateLuaMetatable(lua_State* luaState) {
  lua_newtable(luaState);
  lua_pushstring(luaState, "__index");
  lua_pushcfunction(luaState, TestVariantStructSharedType::IndexMetaMethod);
  lua_settable(luaState, -3);
  lua_pushstring(luaState, "__newindex");
  lua_pushcfunction(luaState, TestVariantStructSharedType::NewIndexMetaMethod);
  lua_settable(luaState, -3);
  lua_setglobal(luaState, "TestVariantStructSharedTypeMeta");
}
}
