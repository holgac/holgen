// This file is generated by holgen. Do not modify manually.
#include "TestVariantStructHuman.h"

#include <lua.hpp>
#include <rapidjson/document.h>
#include "Converter.h"
#include "JsonHelper.h"
#include "LuaHelper.h"

namespace holgen_blackbox_test {
bool TestVariantStructHuman::operator==(const TestVariantStructHuman &rhs) const {
  return !(
      mName != rhs.mName ||
      mNationality != rhs.mNationality
  );
}

const std::string &TestVariantStructHuman::GetName() const {
  return mName;
}

std::string &TestVariantStructHuman::GetName() {
  return mName;
}

const std::string &TestVariantStructHuman::GetNationality() const {
  return mNationality;
}

std::string &TestVariantStructHuman::GetNationality() {
  return mNationality;
}

void TestVariantStructHuman::SetName(const std::string &val) {
  mName = val;
}

void TestVariantStructHuman::SetNationality(const std::string &val) {
  mNationality = val;
}

bool TestVariantStructHuman::ParseJson(const rapidjson::Value &json, const Converter &converter) {
  HOLGEN_WARN_AND_RETURN_IF(!json.IsObject(), false, "Found non-object json element when parsing TestVariantStructHuman");
  for (const auto &data: json.GetObject()) {
    const auto &name = data.name.GetString();
    if (0 == strcmp("name", name)) {
      auto res = JsonHelper::Parse(mName, data.value, converter);
      HOLGEN_WARN_AND_RETURN_IF(!res, false, "Could not json-parse TestVariantStructHuman.name field");
    } else if (0 == strcmp("nationality", name)) {
      auto res = JsonHelper::Parse(mNationality, data.value, converter);
      HOLGEN_WARN_AND_RETURN_IF(!res, false, "Could not json-parse TestVariantStructHuman.nationality field");
    } else {
      HOLGEN_WARN("Unexpected entry in json when parsing TestVariantStructHuman: {}", name);
    }
  }
  return true;
}

void TestVariantStructHuman::PushToLua(lua_State *luaState) const {
  lua_newtable(luaState);
  lua_pushstring(luaState, "p");
  lua_pushlightuserdata(luaState, (void *) this);
  lua_settable(luaState, -3);
  lua_getglobal(luaState, "TestVariantStructHumanMeta");
  lua_setmetatable(luaState, -2);
}

void TestVariantStructHuman::PushMirrorToLua(lua_State *luaState) const {
  lua_newtable(luaState);
  lua_pushstring(luaState, "name");
  LuaHelper::Push(mName, luaState, true);
  lua_settable(luaState, -3);
  lua_pushstring(luaState, "nationality");
  LuaHelper::Push(mNationality, luaState, true);
  lua_settable(luaState, -3);
}

void TestVariantStructHuman::PushGlobalToLua(lua_State *luaState, const char *name) const {
  PushToLua(luaState);
  lua_setglobal(luaState, name);
}

TestVariantStructHuman *TestVariantStructHuman::ReadProxyFromLua(lua_State *luaState, int32_t idx) {
  lua_pushstring(luaState, "p");
  lua_gettable(luaState, idx - 1);
  auto ptr = (TestVariantStructHuman *) lua_touserdata(luaState, -1);
  lua_pop(luaState, 1);
  return ptr;
}

TestVariantStructHuman TestVariantStructHuman::ReadMirrorFromLua(lua_State *luaState, int32_t idx) {
  auto result = TestVariantStructHuman{};
  lua_pushvalue(luaState, idx);
  lua_pushnil(luaState);
  while (lua_next(luaState, -2)) {
    auto key = lua_tostring(luaState, -2);
    if (0 == strcmp("name", key)) {
      LuaHelper::Read(result.mName, luaState, -1);
      lua_pop(luaState, 1);
    } else if (0 == strcmp("nationality", key)) {
      LuaHelper::Read(result.mNationality, luaState, -1);
      lua_pop(luaState, 1);
    } else {
      HOLGEN_WARN("Unexpected lua field: TestVariantStructHuman.{}", key);
      lua_pop(luaState, 1);
    }
  }
  lua_pop(luaState, 1);
  return result;
}

int TestVariantStructHuman::NewIndexMetaMethod(lua_State *luaState) {
  auto instance = TestVariantStructHuman::ReadProxyFromLua(luaState, -3);
  const char *key = lua_tostring(luaState, -2);
  if (0 == strcmp("name", key)) {
    LuaHelper::Read(instance->mName, luaState, -1);
  } else if (0 == strcmp("nationality", key)) {
    LuaHelper::Read(instance->mNationality, luaState, -1);
  } else {
    HOLGEN_WARN("Unexpected lua field: TestVariantStructHuman.{}", key);
  }
  return 0;
}

void TestVariantStructHuman::CreateLuaMetatable(lua_State *luaState) {
  lua_newtable(luaState);
  lua_pushstring(luaState, "__index");
  lua_pushcfunction(luaState, TestVariantStructHuman::IndexMetaMethod);
  lua_settable(luaState, -3);
  lua_pushstring(luaState, "__newindex");
  lua_pushcfunction(luaState, TestVariantStructHuman::NewIndexMetaMethod);
  lua_settable(luaState, -3);
  lua_setglobal(luaState, "TestVariantStructHumanMeta");
}

int TestVariantStructHuman::IndexMetaMethod(lua_State *luaState) {
  const char *key = lua_tostring(luaState, -1);
  if (0 == strcmp("name", key)) {
    auto instance = TestVariantStructHuman::ReadProxyFromLua(luaState, -2);
    HOLGEN_WARN_AND_RETURN_IF(!instance, 0, "Requesting for TestVariantStructHuman.name with an invalid lua proxy object!");
    LuaHelper::Push(instance->mName, luaState, false);
  } else if (0 == strcmp("nationality", key)) {
    auto instance = TestVariantStructHuman::ReadProxyFromLua(luaState, -2);
    HOLGEN_WARN_AND_RETURN_IF(!instance, 0, "Requesting for TestVariantStructHuman.nationality with an invalid lua proxy object!");
    LuaHelper::Push(instance->mNationality, luaState, false);
  } else {
    HOLGEN_WARN("Unexpected lua field: TestVariantStructHuman.{}", key);
    return 0;
  }
  return 1;
}
}
