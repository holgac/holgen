// This file is generated by holgen. Do not modify manually.
#include "TestJsonStructWithSingleTag.h"

#include <cstring>
#include <lua.hpp>
#include <rapidjson/document.h>
#include "Converter.h"
#include "JsonHelper.h"
#include "LuaHelper.h"

namespace holgen_blackbox_test {
const TestJsonTag &TestJsonStructWithSingleTag::GetTag() const {
  return mTag;
}

TestJsonTag &TestJsonStructWithSingleTag::GetTag() {
  return mTag;
}

void TestJsonStructWithSingleTag::SetTag(const TestJsonTag &val) {
  mTag = val;
}

bool TestJsonStructWithSingleTag::operator==(const TestJsonStructWithSingleTag &rhs) const {
  return !(
      mTag != rhs.mTag
  );
}

bool TestJsonStructWithSingleTag::ParseJson(const rapidjson::Value &json, const Converter &converter) {
  if (json.IsObject()) {
    for (const auto &data: json.GetObject()) {
      const auto &name = data.name.GetString();
      if (0 == strcmp("tag", name)) {
        auto res = JsonHelper::Parse(mTag, data.value, converter);
        HOLGEN_WARN_AND_RETURN_IF(!res, false, "Could not json-parse TestJsonStructWithSingleTag.tag field");
      } else {
        HOLGEN_WARN("Unexpected entry in json when parsing TestJsonStructWithSingleTag: {}", name);
      }
    }
  } else if (json.IsArray()) {
    auto it = json.Begin();
    {
      HOLGEN_WARN_AND_RETURN_IF(it == json.End(), false, "Exhausted elements when parsing TestJsonStructWithSingleTag!");
      auto res = JsonHelper::Parse(mTag, (*it), converter);
      HOLGEN_WARN_AND_RETURN_IF(!res, false, "Could not json-parse TestJsonStructWithSingleTag.tag field");
      ++it;
    }
    HOLGEN_WARN_AND_RETURN_IF(it != json.End(), false, "Too many elements when parsing TestJsonStructWithSingleTag!");
  } else {
    HOLGEN_WARN("Unexpected json type when parsing TestJsonStructWithSingleTag.");
    return false;
  }
  return true;
}

rapidjson::Value TestJsonStructWithSingleTag::DumpJson(rapidjson::Document &doc) const {
  rapidjson::Value val(rapidjson::kObjectType);
  val.AddMember("tag", JsonHelper::Dump(mTag, doc), doc.GetAllocator());
  return val;
}

void TestJsonStructWithSingleTag::PushToLua(lua_State *luaState) const {
  lua_newtable(luaState);
  lua_pushstring(luaState, "p");
  lua_pushlightuserdata(luaState, (void *) this);
  lua_settable(luaState, -3);
  lua_pushstring(luaState, "c");
  lua_pushlightuserdata(luaState, &CLASS_NAME);
  lua_settable(luaState, -3);
  lua_getglobal(luaState, "TestJsonStructWithSingleTag");
  lua_setmetatable(luaState, -2);
}

void TestJsonStructWithSingleTag::PushMirrorToLua(lua_State *luaState) const {
  lua_newtable(luaState);
  lua_pushstring(luaState, "tag");
  mTag.PushMirrorToLua(luaState);
  lua_settable(luaState, -3);
}

void TestJsonStructWithSingleTag::PushGlobalToLua(lua_State *luaState, const char *name) const {
  PushToLua(luaState);
  lua_setglobal(luaState, name);
}

TestJsonStructWithSingleTag *TestJsonStructWithSingleTag::ReadProxyFromLua(lua_State *luaState, int32_t idx) {
  lua_pushstring(luaState, "c");
  lua_gettable(luaState, idx - 1);
  if (!lua_isuserdata(luaState, -1)) {
    HOLGEN_WARN("Proxy object does not contain the correct metadata!");
    return nullptr;
  }
  auto className = *static_cast<const char**>(lua_touserdata(luaState, -1));
  lua_pop(luaState, 1);
  HOLGEN_WARN_AND_RETURN_IF(className != CLASS_NAME, nullptr, "Received {} instance when expecting TestJsonStructWithSingleTag", className);
  lua_pushstring(luaState, "p");
  lua_gettable(luaState, idx - 1);
  auto ptr = (TestJsonStructWithSingleTag *) lua_touserdata(luaState, -1);
  lua_pop(luaState, 1);
  return ptr;
}

TestJsonStructWithSingleTag TestJsonStructWithSingleTag::ReadMirrorFromLua(lua_State *luaState, int32_t idx) {
  auto result = TestJsonStructWithSingleTag{};
  lua_pushvalue(luaState, idx);
  lua_pushnil(luaState);
  while (lua_next(luaState, -2)) {
    auto key = lua_tostring(luaState, -2);
    if (0 == strcmp("tag", key)) {
      if (lua_getmetatable(luaState, -1)) {
        lua_pop(luaState, 1);
        result.mTag = *TestJsonTag::ReadProxyFromLua(luaState, -1);
      } else {
        result.mTag = TestJsonTag::ReadMirrorFromLua(luaState, -1);
      }
      lua_pop(luaState, 1);
    } else {
      HOLGEN_WARN("Unexpected lua field: TestJsonStructWithSingleTag.{}", key);
      lua_pop(luaState, 1);
    }
  }
  lua_pop(luaState, 1);
  return result;
}

int TestJsonStructWithSingleTag::NewIndexMetaMethod(lua_State *luaState) {
  auto instance = TestJsonStructWithSingleTag::ReadProxyFromLua(luaState, -3);
  const char *key = lua_tostring(luaState, -2);
  if (0 == strcmp("tag", key)) {
    auto res = LuaHelper::Read(instance->mTag, luaState, -1);
    HOLGEN_WARN_IF(!res, "Assigning TestJsonStructWithSingleTag.tag from lua failed!");
  } else {
    HOLGEN_WARN("Unexpected lua field: TestJsonStructWithSingleTag.{}", key);
  }
  return 0;
}

void TestJsonStructWithSingleTag::CreateLuaMetatable(lua_State *luaState) {
  lua_newtable(luaState);
  lua_pushstring(luaState, "__index");
  lua_pushcfunction(luaState, TestJsonStructWithSingleTag::IndexMetaMethod);
  lua_settable(luaState, -3);
  lua_pushstring(luaState, "__newindex");
  lua_pushcfunction(luaState, TestJsonStructWithSingleTag::NewIndexMetaMethod);
  lua_settable(luaState, -3);
  lua_setglobal(luaState, "TestJsonStructWithSingleTag");
}

int TestJsonStructWithSingleTag::IndexMetaMethod(lua_State *luaState) {
  const char *key = lua_tostring(luaState, -1);
  if (0 == strcmp("tag", key)) {
    auto instance = TestJsonStructWithSingleTag::ReadProxyFromLua(luaState, -2);
    HOLGEN_WARN_AND_RETURN_IF(!instance, 0, "Requesting for TestJsonStructWithSingleTag.tag with an invalid lua proxy object!");
    LuaHelper::Push<false>(instance->mTag, luaState);
  } else {
    HOLGEN_WARN("Unexpected lua field: TestJsonStructWithSingleTag.{}", key);
    return 0;
  }
  return 1;
}
}
