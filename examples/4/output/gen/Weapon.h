// This file is generated by holgen. Do not modify manually.
#pragma once

#include "../holgen.h"
#include <cstdint>
#include <string>
#include <rapidjson/fwd.h>

struct lua_State;
namespace ex4_schemas {
  class Converter;
}
namespace ex4_schemas {
// Defined in 4/schemas/dataManager.hsc
class Weapon {
public:
  Weapon() = default;
  Weapon(const Weapon &rhs) = default;
  Weapon(Weapon &&rhs) noexcept = default;
  ~Weapon() = default;
  uint32_t GetId() const;
  const std::string &GetName() const;
  std::string &GetName();
  uint8_t GetDamageMin() const;
  uint8_t GetDamageMax() const;
  void SetId(uint32_t val);
  void SetName(const std::string &val);
  void SetDamageMin(uint8_t val);
  void SetDamageMax(uint8_t val);
  static Weapon *Get(uint32_t id);
  static Weapon *GetFromName(const std::string &key);
  bool operator==(const Weapon &rhs) const;
  bool ParseJson(const rapidjson::Value &json, const Converter &converter);
  void PushToLua(lua_State *luaState) const;
  void PushMirrorToLua(lua_State *luaState) const;
  void PushGlobalToLua(lua_State *luaState, const char *name) const;
  /*
   * This only works with negative indices
   * Reads proxy object (a table with a metatable and an embedded pointer or an index)
   */
  static Weapon *ReadProxyFromLua(lua_State *luaState, int32_t idx);
  /*
   * This only works with negative indices
   * Reads a mirror object (a table with entries that mirror the c++ data structure)
   */
  static Weapon ReadMirrorFromLua(lua_State *luaState, int32_t idx);
  static void CreateLuaMetatable(lua_State *luaState);
  Weapon &operator=(const Weapon &rhs) = default;
  Weapon &operator=(Weapon &&rhs) noexcept = default;
  inline static const char *CLASS_NAME = "Weapon";
private:
  static int NewIndexMetaMethod(lua_State *luaState);
  static int IndexMetaMethod(lua_State *luaState);
  uint32_t mId = -1;
  std::string mName;
  uint8_t mDamageMin;
  uint8_t mDamageMax;
};
}
