// This file is generated by holgen. Do not modify manually.
#pragma once

#include "../holgen.h"
#include <map>
#include <string>
#include <vector>
#include "Counter.h"
#include "ICounterBumper.h"
#include "Singleton.h"

namespace holgen_blackbox_csharp {
// Defined in tests/blackbox_csharp/schemas/CounterManager.hsc
class CounterManager : public Singleton<CounterManager> {
public:
  CounterManager() = default;
  CounterManager(const CounterManager &rhs) = delete;
  CounterManager(CounterManager &&rhs) noexcept;
  ~CounterManager() = default;
  const std::map<std::string, Counter> &GetCounters() const;
  std::map<std::string, Counter> &GetCounters();
  const std::vector<ICounterBumper> &GetCounterBumpers() const;
  std::vector<ICounterBumper> &GetCounterBumpers();
  void SetCounters(const std::map<std::string, Counter> &val);
  void SetCounterBumpers(std::vector<ICounterBumper> &&val);
  Counter &GetCounter(const std::string &name);
  Counter *GetCounterPtr(const std::string &name);
  void InsertCounterBumper(ICounterBumper bumper);
  bool operator==(const CounterManager &rhs) const;
  CounterManager &operator=(const CounterManager &rhs) = delete;
  CounterManager &operator=(CounterManager &&rhs) noexcept;
  inline static const char *CLASS_NAME = "CounterManager";
private:
  std::map<std::string, Counter> mCounters;
  std::vector<ICounterBumper> mCounterBumpers;
};
}
extern "C" {
  HOLGEN_EXPORT holgen_blackbox_csharp::Counter *holgen_blackbox_csharp_CounterManager_GetCounter(const char *name);
  HOLGEN_EXPORT holgen_blackbox_csharp::Counter *holgen_blackbox_csharp_CounterManager_GetCounterPtr(const char *name);
  HOLGEN_EXPORT void holgen_blackbox_csharp_CounterManager_InsertCounterBumper(void *bumper);
}
