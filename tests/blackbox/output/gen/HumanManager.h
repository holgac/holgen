// This file is generated by holgen. Do not modify manually.
#pragma once

#include "../holgen.h"
#include <cstdint>
#include <map>
#include <string>
#include <unordered_map>
#include <rapidjson/fwd.h>
#include "Human.h"

struct lua_State;
namespace holgen_blackbox_test {
  class Converter;
}
namespace holgen_blackbox_test {
class HumanManager {
public:
  bool operator==(const HumanManager &rhs) const;
  const std::unordered_map<uint32_t, Human> &GetHumans() const;
  std::unordered_map<uint32_t, Human> &GetHumans();
  void SetHumans(const std::unordered_map<uint32_t, Human> &val);
  const Human *GetHumanFromName(const std::string &key) const;
  Human *GetHumanFromName(const std::string &key);
  Human *AddHuman(Human &&elem);
  Human *AddHuman(Human &elem);
  const Human *GetHuman(uint32_t idx) const;
  Human *GetHuman(uint32_t idx);
  bool HasHuman(uint32_t key) const;
  void DeleteHuman(uint32_t key);
  size_t GetHumanCount() const;
  bool ParseFiles(const std::string &rootPath, const Converter &converterArg);
  void PushToLua(lua_State *luaState) const;
  void PushMirrorToLua(lua_State *luaState) const;
  void PushGlobalToLua(lua_State *luaState, const char *name) const;
  /*
   * This only works with negative indices
   * Reads proxy object (a table with a metatable and an embedded pointer or an index)
   */
  static HumanManager *ReadProxyFromLua(lua_State *luaState, int32_t idx);
  /*
   * This only works with negative indices
   * Reads a mirror object (a table with entries that mirror the c++ data structure)
   */
  static HumanManager ReadMirrorFromLua(lua_State *luaState, int32_t idx);
  static void CreateLuaMetatable(lua_State *luaState);
private:
  static int IndexMetaMethod(lua_State *luaState);
  static int NewIndexMetaMethod(lua_State *luaState);
  std::unordered_map<uint32_t, Human> mHumans;
  std::map<std::string, uint32_t> mHumansNameIndex;
  uint32_t mHumansNextId = 0;
};
}
