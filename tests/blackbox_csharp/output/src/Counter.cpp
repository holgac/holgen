// This file is partially generated by holgen. Only modify the custom sections.
#include "../gen/Counter.h"
// HOLGEN_USER_DEFINED_BEGIN:Counter_CustomIncludes
// HOLGEN_USER_DEFINED_END:Counter_CustomIncludes

namespace holgen_blackbox_csharp {
uint32_t Counter::Get() const {
// HOLGEN_USER_DEFINED_BEGIN:Counter_Get_Const
  return mVal;
// HOLGEN_USER_DEFINED_END:Counter_Get_Const
}

void Counter::Bump(const uint32_t amount) {
// HOLGEN_USER_DEFINED_BEGIN:Counter_Bump
  mVal += amount;
// HOLGEN_USER_DEFINED_END:Counter_Bump
}

void Counter::Reset() {
// HOLGEN_USER_DEFINED_BEGIN:Counter_Reset
  mVal = 0;
// HOLGEN_USER_DEFINED_END:Counter_Reset
}

Counter &Counter::AddCounterAndReturnSelf(const Counter &rhs) {
// HOLGEN_USER_DEFINED_BEGIN:Counter_AddCounterAndReturnSelf
  mVal += rhs.mVal;
  return *this;
// HOLGEN_USER_DEFINED_END:Counter_AddCounterAndReturnSelf
}

void Counter::BumpMultiple(const std::span<uint32_t> &amounts) {
// HOLGEN_USER_DEFINED_BEGIN:Counter_BumpMultiple
  for(auto& amount: amounts)
    Bump(amount);
// HOLGEN_USER_DEFINED_END:Counter_BumpMultiple
}

void Counter::BumpMultipleCopy(const std::vector<uint32_t> &amounts) {
// HOLGEN_USER_DEFINED_BEGIN:Counter_BumpMultipleCopy
  for(auto& amount: amounts)
    Bump(amount);
// HOLGEN_USER_DEFINED_END:Counter_BumpMultipleCopy
}

void Counter::BumpByStrlensOf(const std::span<std::string> &words) {
// HOLGEN_USER_DEFINED_BEGIN:Counter_BumpByStrlensOf
  for(auto& word: words) {
    Bump(word.size());
  }
// HOLGEN_USER_DEFINED_END:Counter_BumpByStrlensOf
}

void Counter::BumpByStrlensOfCopy(const std::vector<std::string> &words) {
// HOLGEN_USER_DEFINED_BEGIN:Counter_BumpByStrlensOfCopy
  for(auto& word: words) {
    Bump(word.size());
  }
// HOLGEN_USER_DEFINED_END:Counter_BumpByStrlensOfCopy
}

}
