// This file is generated by holgen. Do not modify manually.
#pragma once

#include "../holgen.h"
#include <cstdint>
#include <string>
#include <lua.hpp>
#include <rapidjson/fwd.h>
#include "TestLuaNumber.h"

struct lua_State;
namespace holgen_blackbox_test {
  class Converter;
}
namespace holgen_blackbox_test {
// Defined in tests/blackbox/schemas/testlua.hsc
class TestLuaCalculator {
public:
  TestLuaCalculator() = default;
  TestLuaCalculator(const TestLuaCalculator &rhs) = default;
  TestLuaCalculator(TestLuaCalculator &&rhs) noexcept = default;
  ~TestLuaCalculator() = default;
  const TestLuaNumber &GetLastValue() const;
  TestLuaNumber &GetLastValue();
  void SetLastValue(const TestLuaNumber &val);
  int32_t AddPrimitive(lua_State *luaState, int32_t num) const;
  void SetAddPrimitiveLuaFunc(std::string val);
  bool HasAddPrimitiveLuaFunc() const;
  int32_t AddRef(lua_State *luaState, TestLuaNumber &num) const;
  void SetAddRefLuaFunc(std::string val);
  bool HasAddRefLuaFunc() const;
  int32_t AddNullable(lua_State *luaState, const TestLuaNumber *num) const;
  void SetAddNullableLuaFunc(std::string val);
  bool HasAddNullableLuaFunc() const;
  TestLuaNumber *ReturnNullable(lua_State *luaState, int32_t num) const;
  void SetReturnNullableLuaFunc(std::string val);
  bool HasReturnNullableLuaFunc() const;
  TestLuaNumber &ReturnRef(lua_State *luaState, int32_t num) const;
  void SetReturnRefLuaFunc(std::string val);
  bool HasReturnRefLuaFunc() const;
  TestLuaNumber ReturnNew(lua_State *luaState, int32_t num) const;
  void SetReturnNewLuaFunc(std::string val);
  bool HasReturnNewLuaFunc() const;
  bool operator==(const TestLuaCalculator &rhs) const;
  bool ParseJson(const rapidjson::Value &json, const Converter &converter, lua_State *luaState);
  rapidjson::Value DumpJson(rapidjson::Document &doc, lua_State *luaState) const;
  void PushToLua(lua_State *luaState) const;
  void PushMirrorToLua(lua_State *luaState) const;
  void PushGlobalToLua(lua_State *luaState, const char *name) const;
  /*
   * This only works with negative indices
   * Reads proxy object (a table with a metatable and an embedded pointer or an index)
   */
  static TestLuaCalculator *ReadProxyFromLua(lua_State *luaState, int32_t idx);
  /*
   * This only works with negative indices
   * Reads a mirror object (a table with entries that mirror the c++ data structure)
   */
  static TestLuaCalculator ReadMirrorFromLua(lua_State *luaState, int32_t idx);
  static void CreateLuaMetatable(lua_State *luaState);
  TestLuaCalculator &operator=(const TestLuaCalculator &rhs) = default;
  TestLuaCalculator &operator=(TestLuaCalculator &&rhs) noexcept = default;
  inline static const char *CLASS_NAME = "TestLuaCalculator";
private:
  static int NewIndexMetaMethod(lua_State *luaState);
  static int AddPrimitiveCallerFromLua(lua_State *luaState);
  static int AddRefCallerFromLua(lua_State *luaState);
  static int AddNullableCallerFromLua(lua_State *luaState);
  static int ReturnNullableCallerFromLua(lua_State *luaState);
  static int ReturnRefCallerFromLua(lua_State *luaState);
  static int ReturnNewCallerFromLua(lua_State *luaState);
  static int IndexMetaMethod(lua_State *luaState);
  TestLuaNumber mLastValue;
  std::string mLuaFuncHandle_AddPrimitive;
  std::string mLuaFuncHandle_AddRef;
  std::string mLuaFuncHandle_AddNullable;
  std::string mLuaFuncHandle_ReturnNullable;
  std::string mLuaFuncHandle_ReturnRef;
  std::string mLuaFuncHandle_ReturnNew;
};
}
