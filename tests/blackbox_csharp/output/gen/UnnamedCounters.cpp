// This file is generated by holgen. Do not modify manually.
#include "UnnamedCounters.h"

namespace holgen_blackbox_csharp {
const std::vector<Counter> &UnnamedCounters::GetCounters() const {
  return mCounters;
}

std::vector<Counter> &UnnamedCounters::GetCounters() {
  return mCounters;
}

void UnnamedCounters::SetCounters(const std::vector<Counter> &val) {
  mCounters = val;
}

bool UnnamedCounters::operator==(const UnnamedCounters &rhs) const {
  return !(
      mCounters != rhs.mCounters
  );
}
}
extern "C" {
  holgen_blackbox_csharp::Counter *holgen_blackbox_csharp_UnnamedCounters_GetCounters(const holgen_blackbox_csharp::UnnamedCounters *instance, size_t *holgenReturnValueHolgenSize, holgen_blackbox_csharp::DeferredDeleter **holgenDeferredDeleter) {
    using DeferredDeleter = holgen_blackbox_csharp::DeferredDeleter;
    constexpr size_t BufferSize = sizeof(DeferredDeleter) + (sizeof(DeferredDeleter)%8) + sizeof(const std::vector<holgen_blackbox_csharp::Counter> &);
    constexpr size_t ObjectOffset = sizeof(DeferredDeleter) + (sizeof(DeferredDeleter)%8);
    auto buffer = new char[BufferSize];
    auto holgenRes = new (&buffer[ObjectOffset]) const std::vector<holgen_blackbox_csharp::Counter> &(std::move(instance->GetCounters()));
    auto deferredDeleter = new (buffer) DeferredDeleter([](void* ptr) { 
      static_cast<const std::vector<holgen_blackbox_csharp::Counter> &*>(ptr)->~vector();
    });
    *holgenReturnValueHolgenSize = holgenRes->size();
    *holgenDeferredDeleter = deferredDeleter;
    return holgenRes->data();
  }
  void holgen_blackbox_csharp_UnnamedCounters_SetCounters(holgen_blackbox_csharp::UnnamedCounters *instance, holgen_blackbox_csharp::Counter **val, size_t valHolgenSize) {
    std::vector<holgen_blackbox_csharp::Counter > valHolgenVector;
    valHolgenVector.reserve(valHolgenSize);
    for (size_t i = 0; i < valHolgenSize; ++i) {
      valHolgenVector.emplace_back(val[i]);
    }
    instance->SetCounters(valHolgenVector);
  }
}
