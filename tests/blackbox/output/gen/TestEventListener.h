// This file is generated by holgen. Do not modify manually.
#pragma once

#include "../holgen.h"
#include <cstdint>
#include <string>

struct lua_State;
namespace holgen_blackbox_test {
// Defined in tests/blackbox/schemas/testeventpublisher.hsc
class TestEventListener {
public:
  TestEventListener() = default;
  TestEventListener(const TestEventListener &rhs) = default;
  TestEventListener(TestEventListener &&rhs) noexcept = default;
  ~TestEventListener() = default;
  const std::string &GetName() const;
  std::string &GetName();
  void SetName(const std::string &val);
  void SetTable(std::string val);
  const std::string &GetTable() const;
  void OnEvent1(lua_State *luaState, int val) const;
  int OnEvent2(lua_State *luaState) const;
  bool operator==(const TestEventListener &rhs) const;
  void PushToLua(lua_State *luaState) const;
  void PushMirrorToLua(lua_State *luaState) const;
  void PushGlobalToLua(lua_State *luaState, const char *name) const;
  /*
   * This only works with negative indices
   * Reads proxy object (a table with a metatable and an embedded pointer or an index)
   */
  static TestEventListener *ReadProxyFromLua(lua_State *luaState, int32_t idx);
  /*
   * This only works with negative indices
   * Reads a mirror object (a table with entries that mirror the c++ data structure)
   */
  static TestEventListener ReadMirrorFromLua(lua_State *luaState, int32_t idx);
  static void CreateLuaMetatable(lua_State *luaState);
  TestEventListener &operator=(const TestEventListener &rhs) = default;
  TestEventListener &operator=(TestEventListener &&rhs) noexcept = default;
  inline static const char *CLASS_NAME = "TestEventListener";
private:
  static int NewIndexMetaMethod(lua_State *luaState);
  static int EqualsOperatorCallerFromLua(lua_State *luaState);
  static int OnEvent1CallerFromLua(lua_State *luaState);
  static int OnEvent2CallerFromLua(lua_State *luaState);
  static int IndexMetaMethod(lua_State *luaState);
  std::string mName;
  std::string mTable;
};
}
