// This file is generated by holgen. Do not modify manually.
#include "TestCompositeIdObjectType.h"

#include <rapidjson/document.h>
#include "Converter.h"
#include "JsonHelper.h"
#include "LuaHelper.h"

namespace holgen_blackbox_test {
TestCompositeIdObjectType::TestCompositeIdObjectType(TestCompositeIdObjectType::UnderlyingType value) :
    mValue(TestCompositeIdObjectType::Entry(value)) {
}

TestCompositeIdObjectType::TestCompositeIdObjectType(Entry value) :
    mValue(value) {
}

TestCompositeIdObjectType::Entry TestCompositeIdObjectType::GetValue() const {
  return Entry(mValue);
}

TestCompositeIdObjectType TestCompositeIdObjectType::FromString(std::string_view str) {
  if (str == "Human") {
    return TestCompositeIdObjectType(TestCompositeIdObjectType::Human);
  } else if (str == "Cat") {
    return TestCompositeIdObjectType(TestCompositeIdObjectType::Cat);
  } else if (str == "Dog") {
    return TestCompositeIdObjectType(TestCompositeIdObjectType::Dog);
  } else {
    HOLGEN_WARN("{} is not a valid TestCompositeIdObjectType, returning invalid", str);
    return TestCompositeIdObjectType{TestCompositeIdObjectType::Invalid};
  }
}

const char *TestCompositeIdObjectType::ToString() const {
  switch (mValue) {
    case TestCompositeIdObjectType::Human:
      return "Human";
    case TestCompositeIdObjectType::Cat:
      return "Cat";
    case TestCompositeIdObjectType::Dog:
      return "Dog";
    default:
      return "INVALID";
  }
}

TestCompositeIdObjectType &TestCompositeIdObjectType::operator=(UnderlyingType rhs) {
  mValue = TestCompositeIdObjectType::Entry(rhs);
  return *this;
}

bool TestCompositeIdObjectType::operator==(UnderlyingType rhs) const {
  return mValue == TestCompositeIdObjectType::Entry(rhs);
}

bool TestCompositeIdObjectType::operator==(const TestCompositeIdObjectType &rhs) const {
  return mValue == rhs.mValue;
}

bool TestCompositeIdObjectType::operator!=(UnderlyingType rhs) const {
  return mValue != TestCompositeIdObjectType::Entry(rhs);
}

bool TestCompositeIdObjectType::operator!=(const TestCompositeIdObjectType &rhs) const {
  return mValue != rhs.mValue;
}

bool TestCompositeIdObjectType::operator<(UnderlyingType rhs) const {
  return mValue < TestCompositeIdObjectType::Entry(rhs);
}

bool TestCompositeIdObjectType::operator<(const TestCompositeIdObjectType &rhs) const {
  return mValue < rhs.mValue;
}

bool TestCompositeIdObjectType::ParseJson(const rapidjson::Value &json, const Converter &converter, lua_State *luaState) {
  if (json.IsString()) {
    *this = TestCompositeIdObjectType::FromString(std::string_view(json.GetString(), json.GetStringLength()));
  } else if (json.IsInt64()) {
    *this = TestCompositeIdObjectType(json.GetInt64());
  } else {
    *this = TestCompositeIdObjectType{};
    HOLGEN_WARN("Could not json-parse TestCompositeIdObjectType enum: invalid json type");
    return false;
  }
  return true;
}

rapidjson::Value TestCompositeIdObjectType::DumpJson(rapidjson::Document &doc, lua_State *luaState) const {
  return rapidjson::Value(GetValue());
}

void TestCompositeIdObjectType::PushToLua(lua_State *luaState) const {
  LuaHelper::Push<true>(TestCompositeIdObjectType::UnderlyingType(mValue), luaState);
}

void TestCompositeIdObjectType::PushMirrorToLua(lua_State *luaState) const {
  LuaHelper::Push<true>(TestCompositeIdObjectType::UnderlyingType(mValue), luaState);
}

TestCompositeIdObjectType TestCompositeIdObjectType::ReadMirrorFromLua(lua_State *luaState, int32_t idx) {
  auto typ = lua_type(luaState, idx);
  if (typ == LUA_TSTRING) {
    return FromString(lua_tostring(luaState, idx));
  } else if (typ == LUA_TNUMBER) {
    return TestCompositeIdObjectType(lua_tonumber(luaState, idx));
  } else {
    HOLGEN_WARN("Unexpected type when parsing TestCompositeIdObjectType: {}", lua_typename(luaState, typ));
    return TestCompositeIdObjectType{};
  }
}

void TestCompositeIdObjectType::PushEnumToLua(lua_State *luaState) {
  lua_newtable(luaState);
  lua_pushstring(luaState, "Human");
  lua_pushnumber(luaState, TestCompositeIdObjectType::Human);
  lua_settable(luaState, -3);
  lua_pushstring(luaState, "Cat");
  lua_pushnumber(luaState, TestCompositeIdObjectType::Cat);
  lua_settable(luaState, -3);
  lua_pushstring(luaState, "Dog");
  lua_pushnumber(luaState, TestCompositeIdObjectType::Dog);
  lua_settable(luaState, -3);
  lua_pushstring(luaState, "Invalid");
  lua_pushnumber(luaState, 3);
  lua_settable(luaState, -3);
  lua_pushstring(luaState, "Human");
  lua_rawseti(luaState, -2, 0);
  lua_pushstring(luaState, "Cat");
  lua_rawseti(luaState, -2, 1);
  lua_pushstring(luaState, "Dog");
  lua_rawseti(luaState, -2, 2);
  lua_pushstring(luaState, "Invalid");
  lua_rawseti(luaState, -2, 3);
  lua_setglobal(luaState, "TestCompositeIdObjectType");
}
}
