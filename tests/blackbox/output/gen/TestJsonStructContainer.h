// This file is generated by holgen. Do not modify manually.
#pragma once

#include "../holgen.h"
#include <cstdint>
#include <map>
#include <string>
#include <vector>
#include <rapidjson/fwd.h>
#include "TestJsonEnum.h"
#include "TestJsonTag.h"

struct lua_State;
namespace holgen_blackbox_test {
  class Converter;
}
namespace holgen_blackbox_test {
// Defined in tests/blackbox/schemas/testjson.hsc
class TestJsonStructContainer {
public:
  TestJsonStructContainer() = default;
  TestJsonStructContainer(const TestJsonStructContainer &rhs) = default;
  TestJsonStructContainer(TestJsonStructContainer &&rhs) noexcept = default;
  ~TestJsonStructContainer() = default;
  const std::vector<TestJsonTag> &GetTags() const;
  std::vector<TestJsonTag> &GetTags();
  const std::vector<TestJsonEnum> &GetEnums() const;
  std::vector<TestJsonEnum> &GetEnums();
  const std::map<std::string, TestJsonTag> &GetTagMap() const;
  std::map<std::string, TestJsonTag> &GetTagMap();
  void SetTags(const std::vector<TestJsonTag> &val);
  void SetEnums(const std::vector<TestJsonEnum> &val);
  void SetTagMap(const std::map<std::string, TestJsonTag> &val);
  bool operator==(const TestJsonStructContainer &rhs) const;
  bool ParseJson(const rapidjson::Value &json, const Converter &converter);
  rapidjson::Value DumpJson(rapidjson::Document &doc) const;
  void PushToLua(lua_State *luaState) const;
  void PushMirrorToLua(lua_State *luaState) const;
  void PushGlobalToLua(lua_State *luaState, const char *name) const;
  /*
   * This only works with negative indices
   * Reads proxy object (a table with a metatable and an embedded pointer or an index)
   */
  static TestJsonStructContainer *ReadProxyFromLua(lua_State *luaState, int32_t idx);
  /*
   * This only works with negative indices
   * Reads a mirror object (a table with entries that mirror the c++ data structure)
   */
  static TestJsonStructContainer ReadMirrorFromLua(lua_State *luaState, int32_t idx);
  static void CreateLuaMetatable(lua_State *luaState);
  TestJsonStructContainer &operator=(const TestJsonStructContainer &rhs) = default;
  TestJsonStructContainer &operator=(TestJsonStructContainer &&rhs) noexcept = default;
  inline static const char *CLASS_NAME = "TestJsonStructContainer";
private:
  static int NewIndexMetaMethod(lua_State *luaState);
  static int IndexMetaMethod(lua_State *luaState);
  std::vector<TestJsonTag> mTags;
  std::vector<TestJsonEnum> mEnums;
  std::map<std::string, TestJsonTag> mTagMap;
};
}
