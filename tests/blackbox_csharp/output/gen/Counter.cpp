// This file is generated by holgen. Do not modify manually.
#include "Counter.h"

namespace holgen_blackbox_csharp {
uint32_t Counter::GetVal() const {
  return mVal;
}

void Counter::SetVal(uint32_t val) {
  mVal = val;
}

bool Counter::operator==(const Counter &rhs) const {
  return !(
      mVal != rhs.mVal
  );
}
}
extern "C" {
  uint32_t holgen_blackbox_csharp_Counter_GetVal(const holgen_blackbox_csharp::Counter *instance) {
    return instance->GetVal();
  }
  void holgen_blackbox_csharp_Counter_SetVal(holgen_blackbox_csharp::Counter *instance, uint32_t val) {
    instance->SetVal(val);
  }
  uint32_t holgen_blackbox_csharp_Counter_Get(const holgen_blackbox_csharp::Counter *instance) {
    return instance->Get();
  }
  void holgen_blackbox_csharp_Counter_Bump(holgen_blackbox_csharp::Counter *instance, const uint32_t amount) {
    instance->Bump(amount);
  }
  void holgen_blackbox_csharp_Counter_Reset(holgen_blackbox_csharp::Counter *instance) {
    instance->Reset();
  }
  holgen_blackbox_csharp::Counter *holgen_blackbox_csharp_Counter_AddCounterAndReturnSelf(holgen_blackbox_csharp::Counter *instance, const holgen_blackbox_csharp::Counter *rhs) {
    return &instance->AddCounterAndReturnSelf(*rhs);
  }
  void holgen_blackbox_csharp_Counter_BumpMultiple(holgen_blackbox_csharp::Counter *instance, uint32_t *amounts, size_t amountsHolgenSize) {
    instance->BumpMultiple(std::span{amounts, amountsHolgenSize});
  }
  void holgen_blackbox_csharp_Counter_BumpMultipleCopy(holgen_blackbox_csharp::Counter *instance, uint32_t *amounts, size_t amountsHolgenSize) {
    std::vector<uint32_t > amountsHolgenVector;
    amountsHolgenVector.reserve(amountsHolgenSize);
    for (size_t i = 0; i < amountsHolgenSize; ++i) {
      amountsHolgenVector.emplace_back(amounts[i]);
    }
    instance->BumpMultipleCopy(amountsHolgenVector);
  }
  void holgen_blackbox_csharp_Counter_BumpByStrlensOf(holgen_blackbox_csharp::Counter *instance, const char **words, size_t wordsHolgenSize) {
    std::vector<std::string > wordsHolgenVector;
    wordsHolgenVector.reserve(wordsHolgenSize);
    for (size_t i = 0; i < wordsHolgenSize; ++i) {
      wordsHolgenVector.emplace_back(words[i]);
    }
    instance->BumpByStrlensOf(std::span{wordsHolgenVector.data(), wordsHolgenVector.size()});
  }
  void holgen_blackbox_csharp_Counter_BumpByStrlensOfCopy(holgen_blackbox_csharp::Counter *instance, const char **words, size_t wordsHolgenSize) {
    std::vector<std::string > wordsHolgenVector;
    wordsHolgenVector.reserve(wordsHolgenSize);
    for (size_t i = 0; i < wordsHolgenSize; ++i) {
      wordsHolgenVector.emplace_back(words[i]);
    }
    instance->BumpByStrlensOfCopy(wordsHolgenVector);
  }
}
