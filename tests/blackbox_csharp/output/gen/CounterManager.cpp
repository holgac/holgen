// This file is generated by holgen. Do not modify manually.
#include "CounterManager.h"

namespace holgen_blackbox_csharp {
CounterManager::CounterManager(CounterManager &&rhs) noexcept {
  mCounters = std::move(rhs.mCounters);
  mUnnamedCounters = std::move(rhs.mUnnamedCounters);
  mCounterBumpers = std::move(rhs.mCounterBumpers);
}

const std::map<std::string, Counter> &CounterManager::GetCounters() const {
  return mCounters;
}

std::map<std::string, Counter> &CounterManager::GetCounters() {
  return mCounters;
}

const UnnamedCounters &CounterManager::GetUnnamedCounters() const {
  return mUnnamedCounters;
}

UnnamedCounters &CounterManager::GetUnnamedCounters() {
  return mUnnamedCounters;
}

const std::vector<ICounterBumper> &CounterManager::GetCounterBumpers() const {
  return mCounterBumpers;
}

std::vector<ICounterBumper> &CounterManager::GetCounterBumpers() {
  return mCounterBumpers;
}

void CounterManager::SetCounters(const std::map<std::string, Counter> &val) {
  mCounters = val;
}

void CounterManager::SetUnnamedCounters(const UnnamedCounters &val) {
  mUnnamedCounters = val;
}

void CounterManager::SetCounterBumpers(std::vector<ICounterBumper> &&val) {
  mCounterBumpers = std::move(val);
}

bool CounterManager::operator==(const CounterManager &rhs) const {
  return !(
      mCounters != rhs.mCounters ||
      mUnnamedCounters != rhs.mUnnamedCounters ||
      mCounterBumpers != rhs.mCounterBumpers
  );
}

CounterManager &CounterManager::operator=(CounterManager &&rhs) noexcept {
  mCounters = std::move(rhs.mCounters);
  mUnnamedCounters = std::move(rhs.mUnnamedCounters);
  mCounterBumpers = std::move(rhs.mCounterBumpers);
  return *this;
}
}
extern "C" {
  holgen_blackbox_csharp::Counter *holgen_blackbox_csharp_CounterManager_GetCounter(const char *name) {
    return &holgen_blackbox_csharp::CounterManager::GetInstance().GetCounter(name);
  }
  holgen_blackbox_csharp::Counter *holgen_blackbox_csharp_CounterManager_GetCounterPtr(const char *name) {
    return holgen_blackbox_csharp::CounterManager::GetInstance().GetCounterPtr(name);
  }
  void holgen_blackbox_csharp_CounterManager_InsertCounterBumper(void *bumper) {
    holgen_blackbox_csharp::CounterManager::GetInstance().InsertCounterBumper(holgen_blackbox_csharp::ICounterBumper(bumper));
  }
}
