// This file is generated by holgen. Do not modify manually.
#include "DotNetHost.h"

#include <vector>
#include "Counter.h"
#include "CounterManager.h"
#include "DeferredDeleter.h"
#include "ICounterBumper.h"
#include "ModuleVersion.h"
#include "SingletonCounter.h"
#include "Vector.h"

namespace holgen_blackbox_csharp {
DotNetHost::~DotNetHost() {
  if (mHostfxrHandle) {
    mHostfxr_close(mHostfxrHandle);
  }
  if (mHostfxrLibHandle) {
    FreeLibrary(mHostfxrLibHandle);
  }
}
void *DotNetHost::LoadFunction(void *module, const char *name) const {
  #ifdef WINDOWS
  void *f = ::GetProcAddress((HMODULE)module, name);
  #else
  void *f = dlsym(module, name);
  #endif
  HOLGEN_FAIL_IF(!f, "Could not load {} from hostfxr library!", name);
  return f;
}

void *DotNetHost::LoadLibrary(const char_t *path) const {
  #ifdef WINDOWS
  HMODULE h = ::LoadLibraryW(path);
  #else
  void* h = dlopen(path, RTLD_LAZY | RTLD_LOCAL);
  #endif
  HOLGEN_FAIL_IF(!h, "Could not load hostfxr library!");
  return h;
}

void DotNetHost::FreeLibrary(void *h) const {
  #ifdef WINDOWS
  ::FreeLibrary((HMODULE)h);
  #else
  dlclose(h);
  #endif
}

void *DotNetHost::LoadDelegate(hostfxr_delegate_type delegateType) const {
  void *f = nullptr;
  auto res = mHostfxr_get_runtime_delegate(mHostfxrHandle, delegateType, &f);
  HOLGEN_FAIL_IF(res < 0 || !f, "Could not load function delegate {}", (int)delegateType);
  return f;
}

void DotNetHost::Initialize(const std::filesystem::path &pathToBaseModule) {
  auto pathToBaseModuleStr = pathToBaseModule.string();
  get_hostfxr_parameters params{sizeof(get_hostfxr_parameters), pathToBaseModuleStr.c_str(), nullptr};
  std::vector<char_t> hostfxrPath(4096, '\0');
  size_t hostfxrPathSize = hostfxrPath.size();
  int res = get_hostfxr_path(hostfxrPath.data(), &hostfxrPathSize, &params);
  HOLGEN_FAIL_IF(res != 0, "get_hostfxr_path failed!");
  mHostfxrLibHandle = LoadLibrary(hostfxrPath.data());
  mHostfxr_initialize_for_runtime_config = hostfxr_initialize_for_runtime_config_fn(LoadFunction(mHostfxrLibHandle, "hostfxr_initialize_for_runtime_config"));
  mHostfxr_get_runtime_delegate = hostfxr_get_runtime_delegate_fn(LoadFunction(mHostfxrLibHandle, "hostfxr_get_runtime_delegate"));
  mHostfxr_close = hostfxr_close_fn(LoadFunction(mHostfxrLibHandle, "hostfxr_close"));
  LoadBaseModule(pathToBaseModuleStr);
}

void DotNetHost::LoadBaseModule(const std::filesystem::path &modulePath) {
  auto moduleName = modulePath.filename().string();
  auto configPath = (modulePath / moduleName).string() + ".runtimeconfig.json";
  auto res = mHostfxr_initialize_for_runtime_config(configPath.c_str(), nullptr, &mHostfxrHandle);
  HOLGEN_FAIL_IF(res < 0 || !mHostfxrHandle, "Could not initialize {}", modulePath.string());
  mHostfxrDelegate_load_assembly = (load_assembly_fn)LoadDelegate(hdt_load_assembly);
  mHostfxrDelegate_get_function_pointer = (get_function_pointer_fn)LoadDelegate(hdt_get_function_pointer);
  auto dllPath = (modulePath / moduleName).string() + ".dll";
  res = mHostfxrDelegate_load_assembly(dllPath.c_str(), nullptr, nullptr);
  HOLGEN_FAIL_IF(res < 0, "Could not load base assembly {}", modulePath.string());
  InitializeHolgen();
}

void DotNetHost::InitializeHolgen() {
  {
    auto res = mHostfxrDelegate_get_function_pointer(
      "CSharpBindings.HolgenDotNetInterface, CSharpBindings", "HolgenFree",
      "CSharpBindings.HolgenDotNetInterface+HolgenDotNetInterfaceHolgenFreeDelegate, CSharpBindings",
      nullptr, nullptr, (void**)(&HolgenDotNetInterface::HolgenFreePtr));
    HOLGEN_FAIL_IF(res < 0 || !HolgenDotNetInterface::HolgenFreePtr, "Could not get HolgenFreePtr of HolgenDotNetInterface, was the project built after the cs files were generated?");
  }
  {
    auto res = mHostfxrDelegate_get_function_pointer("CSharpBindings.DeferredDeleter, CSharpBindings", "PerformManaged", "CSharpBindings.DeferredDeleter+DeferredDeleterPerformManagedDelegate, CSharpBindings", nullptr, nullptr, (void**)(&DeferredDeleter::PerformManaged));
    HOLGEN_FAIL_IF(res < 0 || !DeferredDeleter::PerformManaged, "Required meta method PerformManaged not found in DeferredDeleter");
  }
  {
    auto res = mHostfxrDelegate_get_function_pointer("CSharpBindings.DeferredDeleter, CSharpBindings", "PerformManagedArray", "CSharpBindings.DeferredDeleter+DeferredDeleterPerformManagedArrayDelegate, CSharpBindings", nullptr, nullptr, (void**)(&DeferredDeleter::PerformManagedArray));
    HOLGEN_FAIL_IF(res < 0 || !DeferredDeleter::PerformManagedArray, "Required meta method PerformManagedArray not found in DeferredDeleter");
  }
  {
    void (*initFunc)(void (*)(void *));
    auto res = mHostfxrDelegate_get_function_pointer(
      "CSharpBindings.DeferredDeleter, CSharpBindings", "HolgenInitialize",
      "CSharpBindings.DeferredDeleter+DeferredDeleterHolgenInitializeDelegate, CSharpBindings",
      nullptr, nullptr, (void**)(&initFunc));
    HOLGEN_FAIL_IF(res < 0 || !initFunc, "Could not initialize DeferredDeleter, was the project built after the cs files were generated?");
    initFunc(holgen_blackbox_csharp_DeferredDeleter_Perform);
  }
  {
    void (*initFunc)(uint32_t (*)(const Counter *), void (*)(Counter *, uint32_t), uint32_t (*)(const Counter *), void (*)(Counter *, uint32_t), void (*)(Counter *), Counter *(*)(Counter *, const Counter *), void (*)(Counter *, uint32_t *, size_t), void (*)(Counter *, uint32_t *, size_t), void (*)(Counter *, const char **, size_t), void (*)(Counter *, const char **, size_t));
    auto res = mHostfxrDelegate_get_function_pointer(
      "CSharpBindings.Counter, CSharpBindings", "HolgenInitialize",
      "CSharpBindings.Counter+CounterHolgenInitializeDelegate, CSharpBindings",
      nullptr, nullptr, (void**)(&initFunc));
    HOLGEN_FAIL_IF(res < 0 || !initFunc, "Could not initialize Counter, was the project built after the cs files were generated?");
    initFunc(holgen_blackbox_csharp_Counter_GetVal, holgen_blackbox_csharp_Counter_SetVal, holgen_blackbox_csharp_Counter_Get, holgen_blackbox_csharp_Counter_Bump, holgen_blackbox_csharp_Counter_Reset, holgen_blackbox_csharp_Counter_AddCounterAndReturnSelf, holgen_blackbox_csharp_Counter_BumpMultiple, holgen_blackbox_csharp_Counter_BumpMultipleCopy, holgen_blackbox_csharp_Counter_BumpByStrlensOf, holgen_blackbox_csharp_Counter_BumpByStrlensOfCopy);
  }
  {
    void (*initFunc)(Counter *(*)(const char *), Counter *(*)(const char *), void (*)(void *));
    auto res = mHostfxrDelegate_get_function_pointer(
      "CSharpBindings.CounterManager, CSharpBindings", "HolgenInitialize",
      "CSharpBindings.CounterManager+CounterManagerHolgenInitializeDelegate, CSharpBindings",
      nullptr, nullptr, (void**)(&initFunc));
    HOLGEN_FAIL_IF(res < 0 || !initFunc, "Could not initialize CounterManager, was the project built after the cs files were generated?");
    initFunc(holgen_blackbox_csharp_CounterManager_GetCounter, holgen_blackbox_csharp_CounterManager_GetCounterPtr, holgen_blackbox_csharp_CounterManager_InsertCounterBumper);
  }
  {
    void (*initFunc)(ModuleVersion (*)(uint16_t, uint16_t, uint32_t), ModuleVersion (*)(uint16_t, uint16_t, uint32_t), uint32_t (*)(const ModuleVersion *), void (*)(ModuleVersion *), ModuleVersion (*)(ModuleVersion *, const ModuleVersion *, const ModuleVersion *), ModuleVersion *(*)(ModuleVersion *, uint64_t, size_t *, DeferredDeleter **), ModuleVersion *(*)(ModuleVersion *, DeferredDeleter **), uint32_t *(*)(ModuleVersion *, size_t *, DeferredDeleter **), uint32_t *(*)(ModuleVersion *, DeferredDeleter **), int32_t *(*)(ModuleVersion *, size_t *, DeferredDeleter **), EnumTest *(*)(ModuleVersion *, EnumTest *, size_t, size_t *, DeferredDeleter **));
    auto res = mHostfxrDelegate_get_function_pointer(
      "CSharpBindings.ModuleVersion, CSharpBindings", "HolgenInitialize",
      "CSharpBindings.ModuleVersion+ModuleVersionHolgenInitializeDelegate, CSharpBindings",
      nullptr, nullptr, (void**)(&initFunc));
    HOLGEN_FAIL_IF(res < 0 || !initFunc, "Could not initialize ModuleVersion, was the project built after the cs files were generated?");
    initFunc(holgen_blackbox_csharp_ModuleVersion_Construct, holgen_blackbox_csharp_ModuleVersion_ConstructDouble, holgen_blackbox_csharp_ModuleVersion_GetSum, holgen_blackbox_csharp_ModuleVersion_BumpRevision, holgen_blackbox_csharp_ModuleVersion_SumOfSelfAnd, holgen_blackbox_csharp_ModuleVersion_GetNextRevisions, holgen_blackbox_csharp_ModuleVersion_GetNextThreeRevisions, holgen_blackbox_csharp_ModuleVersion_GetDataAsVector, holgen_blackbox_csharp_ModuleVersion_GetDataAsArray, holgen_blackbox_csharp_ModuleVersion_GetDataAsSignedVector, holgen_blackbox_csharp_ModuleVersion_GetEnums);
  }
  {
    void (*initFunc)(uint32_t (*)(), void (*)(uint32_t), void (*)());
    auto res = mHostfxrDelegate_get_function_pointer(
      "CSharpBindings.SingletonCounter, CSharpBindings", "HolgenInitialize",
      "CSharpBindings.SingletonCounter+SingletonCounterHolgenInitializeDelegate, CSharpBindings",
      nullptr, nullptr, (void**)(&initFunc));
    HOLGEN_FAIL_IF(res < 0 || !initFunc, "Could not initialize SingletonCounter, was the project built after the cs files were generated?");
    initFunc(holgen_blackbox_csharp_SingletonCounter_Get, holgen_blackbox_csharp_SingletonCounter_Bump, holgen_blackbox_csharp_SingletonCounter_Reset);
  }
  {
    void (*initFunc)();
    auto res = mHostfxrDelegate_get_function_pointer(
      "CSharpBindings.Vector, CSharpBindings", "HolgenInitialize",
      "CSharpBindings.Vector+VectorHolgenInitializeDelegate, CSharpBindings",
      nullptr, nullptr, (void**)(&initFunc));
    HOLGEN_FAIL_IF(res < 0 || !initFunc, "Could not initialize Vector, was the project built after the cs files were generated?");
    initFunc();
  }
  {
    auto res = mHostfxrDelegate_get_function_pointer(
      "CSharpBindings.ICounterBumper, CSharpBindings", "SetNameCaller",
      "CSharpBindings.ICounterBumper+ICounterBumperSetNameDelegate, CSharpBindings",
      nullptr, nullptr, (void**)(&ICounterBumper::SetNameHolgenPtr));
    HOLGEN_FAIL_IF(res < 0 || !ICounterBumper::SetNameHolgenPtr, "Could not get SetName of ICounterBumper, was the project built after the cs files were generated?");
    res = mHostfxrDelegate_get_function_pointer(
      "CSharpBindings.ICounterBumper, CSharpBindings", "GetNameCaller",
      "CSharpBindings.ICounterBumper+ICounterBumperGetNameDelegate, CSharpBindings",
      nullptr, nullptr, (void**)(&ICounterBumper::GetNameHolgenPtr));
    HOLGEN_FAIL_IF(res < 0 || !ICounterBumper::GetNameHolgenPtr, "Could not get GetName of ICounterBumper, was the project built after the cs files were generated?");
    res = mHostfxrDelegate_get_function_pointer(
      "CSharpBindings.ICounterBumper, CSharpBindings", "BumpCaller",
      "CSharpBindings.ICounterBumper+ICounterBumperBumpDelegate, CSharpBindings",
      nullptr, nullptr, (void**)(&ICounterBumper::BumpHolgenPtr));
    HOLGEN_FAIL_IF(res < 0 || !ICounterBumper::BumpHolgenPtr, "Could not get Bump of ICounterBumper, was the project built after the cs files were generated?");
    res = mHostfxrDelegate_get_function_pointer(
      "CSharpBindings.ICounterBumper, CSharpBindings", "SetNameFromCounterCaller",
      "CSharpBindings.ICounterBumper+ICounterBumperSetNameFromCounterDelegate, CSharpBindings",
      nullptr, nullptr, (void**)(&ICounterBumper::SetNameFromCounterHolgenPtr));
    HOLGEN_FAIL_IF(res < 0 || !ICounterBumper::SetNameFromCounterHolgenPtr, "Could not get SetNameFromCounter of ICounterBumper, was the project built after the cs files were generated?");
    res = mHostfxrDelegate_get_function_pointer(
      "CSharpBindings.ICounterBumper, CSharpBindings", "SetNameFromRevisionCaller",
      "CSharpBindings.ICounterBumper+ICounterBumperSetNameFromRevisionDelegate, CSharpBindings",
      nullptr, nullptr, (void**)(&ICounterBumper::SetNameFromRevisionHolgenPtr));
    HOLGEN_FAIL_IF(res < 0 || !ICounterBumper::SetNameFromRevisionHolgenPtr, "Could not get SetNameFromRevision of ICounterBumper, was the project built after the cs files were generated?");
    res = mHostfxrDelegate_get_function_pointer(
      "CSharpBindings.ICounterBumper, CSharpBindings", "GetVersionCaller",
      "CSharpBindings.ICounterBumper+ICounterBumperGetVersionDelegate, CSharpBindings",
      nullptr, nullptr, (void**)(&ICounterBumper::GetVersionHolgenPtr));
    HOLGEN_FAIL_IF(res < 0 || !ICounterBumper::GetVersionHolgenPtr, "Could not get GetVersion of ICounterBumper, was the project built after the cs files were generated?");
    res = mHostfxrDelegate_get_function_pointer(
      "CSharpBindings.ICounterBumper, CSharpBindings", "GetCounterCaller",
      "CSharpBindings.ICounterBumper+ICounterBumperGetCounterDelegate, CSharpBindings",
      nullptr, nullptr, (void**)(&ICounterBumper::GetCounterHolgenPtr));
    HOLGEN_FAIL_IF(res < 0 || !ICounterBumper::GetCounterHolgenPtr, "Could not get GetCounter of ICounterBumper, was the project built after the cs files were generated?");
    res = mHostfxrDelegate_get_function_pointer(
      "CSharpBindings.ICounterBumper, CSharpBindings", "CloneCaller",
      "CSharpBindings.ICounterBumper+ICounterBumperCloneDelegate, CSharpBindings",
      nullptr, nullptr, (void**)(&ICounterBumper::CloneHolgenPtr));
    HOLGEN_FAIL_IF(res < 0 || !ICounterBumper::CloneHolgenPtr, "Could not get Clone of ICounterBumper, was the project built after the cs files were generated?");
    res = mHostfxrDelegate_get_function_pointer(
      "CSharpBindings.ICounterBumper, CSharpBindings", "CopyFromCaller",
      "CSharpBindings.ICounterBumper+ICounterBumperCopyFromDelegate, CSharpBindings",
      nullptr, nullptr, (void**)(&ICounterBumper::CopyFromHolgenPtr));
    HOLGEN_FAIL_IF(res < 0 || !ICounterBumper::CopyFromHolgenPtr, "Could not get CopyFrom of ICounterBumper, was the project built after the cs files were generated?");
    res = mHostfxrDelegate_get_function_pointer(
      "CSharpBindings.ICounterBumper, CSharpBindings", "BumpMultipleCaller",
      "CSharpBindings.ICounterBumper+ICounterBumperBumpMultipleDelegate, CSharpBindings",
      nullptr, nullptr, (void**)(&ICounterBumper::BumpMultipleHolgenPtr));
    HOLGEN_FAIL_IF(res < 0 || !ICounterBumper::BumpMultipleHolgenPtr, "Could not get BumpMultiple of ICounterBumper, was the project built after the cs files were generated?");
    res = mHostfxrDelegate_get_function_pointer(
      "CSharpBindings.ICounterBumper, CSharpBindings", "SetNameConcatArrayCaller",
      "CSharpBindings.ICounterBumper+ICounterBumperSetNameConcatArrayDelegate, CSharpBindings",
      nullptr, nullptr, (void**)(&ICounterBumper::SetNameConcatArrayHolgenPtr));
    HOLGEN_FAIL_IF(res < 0 || !ICounterBumper::SetNameConcatArrayHolgenPtr, "Could not get SetNameConcatArray of ICounterBumper, was the project built after the cs files were generated?");
    res = mHostfxrDelegate_get_function_pointer(
      "CSharpBindings.ICounterBumper, CSharpBindings", "SplitNameAndParseSignedCaller",
      "CSharpBindings.ICounterBumper+ICounterBumperSplitNameAndParseSignedDelegate, CSharpBindings",
      nullptr, nullptr, (void**)(&ICounterBumper::SplitNameAndParseSignedHolgenPtr));
    HOLGEN_FAIL_IF(res < 0 || !ICounterBumper::SplitNameAndParseSignedHolgenPtr, "Could not get SplitNameAndParseSigned of ICounterBumper, was the project built after the cs files were generated?");
    res = mHostfxrDelegate_get_function_pointer(
      "CSharpBindings.ICounterBumper, CSharpBindings", "SplitNameCaller",
      "CSharpBindings.ICounterBumper+ICounterBumperSplitNameDelegate, CSharpBindings",
      nullptr, nullptr, (void**)(&ICounterBumper::SplitNameHolgenPtr));
    HOLGEN_FAIL_IF(res < 0 || !ICounterBumper::SplitNameHolgenPtr, "Could not get SplitName of ICounterBumper, was the project built after the cs files were generated?");
    res = mHostfxrDelegate_get_function_pointer(
      "CSharpBindings.ICounterBumper, CSharpBindings", "CloneMultipleCaller",
      "CSharpBindings.ICounterBumper+ICounterBumperCloneMultipleDelegate, CSharpBindings",
      nullptr, nullptr, (void**)(&ICounterBumper::CloneMultipleHolgenPtr));
    HOLGEN_FAIL_IF(res < 0 || !ICounterBumper::CloneMultipleHolgenPtr, "Could not get CloneMultiple of ICounterBumper, was the project built after the cs files were generated?");
    res = mHostfxrDelegate_get_function_pointer(
      "CSharpBindings.ICounterBumper, CSharpBindings", "GetVersionsCaller",
      "CSharpBindings.ICounterBumper+ICounterBumperGetVersionsDelegate, CSharpBindings",
      nullptr, nullptr, (void**)(&ICounterBumper::GetVersionsHolgenPtr));
    HOLGEN_FAIL_IF(res < 0 || !ICounterBumper::GetVersionsHolgenPtr, "Could not get GetVersions of ICounterBumper, was the project built after the cs files were generated?");
    res = mHostfxrDelegate_get_function_pointer(
      "CSharpBindings.ICounterBumper, CSharpBindings", "GetCountersCaller",
      "CSharpBindings.ICounterBumper+ICounterBumperGetCountersDelegate, CSharpBindings",
      nullptr, nullptr, (void**)(&ICounterBumper::GetCountersHolgenPtr));
    HOLGEN_FAIL_IF(res < 0 || !ICounterBumper::GetCountersHolgenPtr, "Could not get GetCounters of ICounterBumper, was the project built after the cs files were generated?");
  }
  void (*baseModuleInitialize)();
  auto res = mHostfxrDelegate_get_function_pointer("CSharpBindings.HolgenMain, CSharpBindings", "Initialize", "CSharpBindings.HolgenMain+InitializeDelegate, CSharpBindings", nullptr, nullptr, (void**)(&baseModuleInitialize));
  HOLGEN_FAIL_IF(res < 0 || !baseModuleInitialize, "Initialize method not found in main module!");
  baseModuleInitialize();
  res = mHostfxrDelegate_get_function_pointer("CSharpBindings.HolgenMain, CSharpBindings", "LoadModule", "CSharpBindings.HolgenMain+LoadModuleDelegate, CSharpBindings", nullptr, nullptr, (void**)(&mLoadModule));
  HOLGEN_FAIL_IF(res < 0 || !mLoadModule, "LoadModule method not found in main module!");
}

DotNetModule &DotNetHost::LoadCustomDotNetModule(const std::filesystem::path &modulePath) {
  auto& module = mDotNetModules.emplace_back();
  module.mName = modulePath.filename().string();
  auto dllPath = std::filesystem::absolute(modulePath / (module.mName + ".dll")).string();
  mLoadModule(dllPath.c_str());
  auto className = std::format("{0}.DotNetModule, {0}", module.mName);
  {
    auto res = mHostfxrDelegate_get_function_pointer(className.c_str(), "Initialize", "CSharpBindings.IDotNetModule+DotNetModuleInitializeDelegate, CSharpBindings", nullptr, nullptr, (void**)(&module.Initialize));
    HOLGEN_FAIL_IF(res < 0 || !module.Initialize, "Required module method Initialize not found in {}", module.mName);
  }
  {
    auto res = mHostfxrDelegate_get_function_pointer(className.c_str(), "BumpAndGetSingletonCounter", "CSharpBindings.IDotNetModule+DotNetModuleBumpAndGetSingletonCounterDelegate, CSharpBindings", nullptr, nullptr, (void**)(&module.BumpAndGetSingletonCounter));
    HOLGEN_FAIL_IF(res < 0 || !module.BumpAndGetSingletonCounter, "Required module method BumpAndGetSingletonCounter not found in {}", module.mName);
  }
  {
    auto res = mHostfxrDelegate_get_function_pointer(className.c_str(), "SetBumpAmount", "CSharpBindings.IDotNetModule+DotNetModuleSetBumpAmountDelegate, CSharpBindings", nullptr, nullptr, (void**)(&module.SetBumpAmount));
    HOLGEN_FAIL_IF(res < 0 || !module.SetBumpAmount, "Required module method SetBumpAmount not found in {}", module.mName);
  }
  {
    auto res = mHostfxrDelegate_get_function_pointer(className.c_str(), "Constructor", "CSharpBindings.IDotNetModule+DotNetModuleConstructorDelegate, CSharpBindings", nullptr, nullptr, (void**)(&module.Constructor));
    HOLGEN_FAIL_IF(res < 0 || !module.Constructor, "Required module method Constructor not found in {}", module.mName);
  }
  {
    auto res = mHostfxrDelegate_get_function_pointer(className.c_str(), "MirroredStructManagedToNative", "CSharpBindings.IDotNetModule+DotNetModuleMirroredStructManagedToNativeDelegate, CSharpBindings", nullptr, nullptr, (void**)(&module.MirroredStructManagedToNative));
    HOLGEN_FAIL_IF(res < 0 || !module.MirroredStructManagedToNative, "Required module method MirroredStructManagedToNative not found in {}", module.mName);
  }
  {
    auto res = mHostfxrDelegate_get_function_pointer(className.c_str(), "MirroredStructNativeToManagedToNative", "CSharpBindings.IDotNetModule+DotNetModuleMirroredStructNativeToManagedToNativeDelegate, CSharpBindings", nullptr, nullptr, (void**)(&module.MirroredStructNativeToManagedToNative));
    HOLGEN_FAIL_IF(res < 0 || !module.MirroredStructNativeToManagedToNative, "Required module method MirroredStructNativeToManagedToNative not found in {}", module.mName);
  }
  {
    auto res = mHostfxrDelegate_get_function_pointer(className.c_str(), "MirroredStructMethodCall", "CSharpBindings.IDotNetModule+DotNetModuleMirroredStructMethodCallDelegate, CSharpBindings", nullptr, nullptr, (void**)(&module.MirroredStructMethodCall));
    HOLGEN_FAIL_IF(res < 0 || !module.MirroredStructMethodCall, "Required module method MirroredStructMethodCall not found in {}", module.mName);
  }
  {
    auto res = mHostfxrDelegate_get_function_pointer(className.c_str(), "MirroredStructInArguments", "CSharpBindings.IDotNetModule+DotNetModuleMirroredStructInArgumentsDelegate, CSharpBindings", nullptr, nullptr, (void**)(&module.MirroredStructInArguments));
    HOLGEN_FAIL_IF(res < 0 || !module.MirroredStructInArguments, "Required module method MirroredStructInArguments not found in {}", module.mName);
  }
  {
    auto res = mHostfxrDelegate_get_function_pointer(className.c_str(), "SetCounterName", "CSharpBindings.IDotNetModule+DotNetModuleSetCounterNameDelegate, CSharpBindings", nullptr, nullptr, (void**)(&module.SetCounterName));
    HOLGEN_FAIL_IF(res < 0 || !module.SetCounterName, "Required module method SetCounterName not found in {}", module.mName);
  }
  {
    auto res = mHostfxrDelegate_get_function_pointer(className.c_str(), "ProxyObjectNativeToManaged", "CSharpBindings.IDotNetModule+DotNetModuleProxyObjectNativeToManagedDelegate, CSharpBindings", nullptr, nullptr, (void**)(&module.ProxyObjectNativeToManaged));
    HOLGEN_FAIL_IF(res < 0 || !module.ProxyObjectNativeToManaged, "Required module method ProxyObjectNativeToManaged not found in {}", module.mName);
  }
  {
    auto res = mHostfxrDelegate_get_function_pointer(className.c_str(), "ProxyObjectMethodArgInModule", "CSharpBindings.IDotNetModule+DotNetModuleProxyObjectMethodArgInModuleDelegate, CSharpBindings", nullptr, nullptr, (void**)(&module.ProxyObjectMethodArgInModule));
    HOLGEN_FAIL_IF(res < 0 || !module.ProxyObjectMethodArgInModule, "Required module method ProxyObjectMethodArgInModule not found in {}", module.mName);
  }
  {
    auto res = mHostfxrDelegate_get_function_pointer(className.c_str(), "ProxyObjectReturnValue", "CSharpBindings.IDotNetModule+DotNetModuleProxyObjectReturnValueDelegate, CSharpBindings", nullptr, nullptr, (void**)(&module.ProxyObjectReturnValue));
    HOLGEN_FAIL_IF(res < 0 || !module.ProxyObjectReturnValue, "Required module method ProxyObjectReturnValue not found in {}", module.mName);
  }
  {
    auto res = mHostfxrDelegate_get_function_pointer(className.c_str(), "ProxyObjectField", "CSharpBindings.IDotNetModule+DotNetModuleProxyObjectFieldDelegate, CSharpBindings", nullptr, nullptr, (void**)(&module.ProxyObjectField));
    HOLGEN_FAIL_IF(res < 0 || !module.ProxyObjectField, "Required module method ProxyObjectField not found in {}", module.mName);
  }
  {
    auto res = mHostfxrDelegate_get_function_pointer(className.c_str(), "PrimitiveArrays", "CSharpBindings.IDotNetModule+DotNetModulePrimitiveArraysDelegate, CSharpBindings", nullptr, nullptr, (void**)(&module.PrimitiveArrays));
    HOLGEN_FAIL_IF(res < 0 || !module.PrimitiveArrays, "Required module method PrimitiveArrays not found in {}", module.mName);
  }
  {
    auto res = mHostfxrDelegate_get_function_pointer(className.c_str(), "StringArraysNativeToManaged", "CSharpBindings.IDotNetModule+DotNetModuleStringArraysNativeToManagedDelegate, CSharpBindings", nullptr, nullptr, (void**)(&module.StringArraysNativeToManaged));
    HOLGEN_FAIL_IF(res < 0 || !module.StringArraysNativeToManaged, "Required module method StringArraysNativeToManaged not found in {}", module.mName);
  }
  {
    auto res = mHostfxrDelegate_get_function_pointer(className.c_str(), "StringArraysManagedToNative", "CSharpBindings.IDotNetModule+DotNetModuleStringArraysManagedToNativeDelegate, CSharpBindings", nullptr, nullptr, (void**)(&module.StringArraysManagedToNative));
    HOLGEN_FAIL_IF(res < 0 || !module.StringArraysManagedToNative, "Required module method StringArraysManagedToNative not found in {}", module.mName);
  }
  {
    auto res = mHostfxrDelegate_get_function_pointer(className.c_str(), "MirroredStructReturnVector", "CSharpBindings.IDotNetModule+DotNetModuleMirroredStructReturnVectorDelegate, CSharpBindings", nullptr, nullptr, (void**)(&module.MirroredStructReturnVector));
    HOLGEN_FAIL_IF(res < 0 || !module.MirroredStructReturnVector, "Required module method MirroredStructReturnVector not found in {}", module.mName);
  }
  {
    auto res = mHostfxrDelegate_get_function_pointer(className.c_str(), "MirroredStructReturnArray", "CSharpBindings.IDotNetModule+DotNetModuleMirroredStructReturnArrayDelegate, CSharpBindings", nullptr, nullptr, (void**)(&module.MirroredStructReturnArray));
    HOLGEN_FAIL_IF(res < 0 || !module.MirroredStructReturnArray, "Required module method MirroredStructReturnArray not found in {}", module.mName);
  }
  {
    auto res = mHostfxrDelegate_get_function_pointer(className.c_str(), "PrimitiveReturnVector", "CSharpBindings.IDotNetModule+DotNetModulePrimitiveReturnVectorDelegate, CSharpBindings", nullptr, nullptr, (void**)(&module.PrimitiveReturnVector));
    HOLGEN_FAIL_IF(res < 0 || !module.PrimitiveReturnVector, "Required module method PrimitiveReturnVector not found in {}", module.mName);
  }
  {
    auto res = mHostfxrDelegate_get_function_pointer(className.c_str(), "PrimitiveReturnArray", "CSharpBindings.IDotNetModule+DotNetModulePrimitiveReturnArrayDelegate, CSharpBindings", nullptr, nullptr, (void**)(&module.PrimitiveReturnArray));
    HOLGEN_FAIL_IF(res < 0 || !module.PrimitiveReturnArray, "Required module method PrimitiveReturnArray not found in {}", module.mName);
  }
  {
    auto res = mHostfxrDelegate_get_function_pointer(className.c_str(), "TrackedCSharpObject", "CSharpBindings.IDotNetModule+DotNetModuleTrackedCSharpObjectDelegate, CSharpBindings", nullptr, nullptr, (void**)(&module.TrackedCSharpObject));
    HOLGEN_FAIL_IF(res < 0 || !module.TrackedCSharpObject, "Required module method TrackedCSharpObject not found in {}", module.mName);
  }
  {
    auto res = mHostfxrDelegate_get_function_pointer(className.c_str(), "EnumArgumentAndReturnValue", "CSharpBindings.IDotNetModule+DotNetModuleEnumArgumentAndReturnValueDelegate, CSharpBindings", nullptr, nullptr, (void**)(&module.EnumArgumentAndReturnValue));
    HOLGEN_FAIL_IF(res < 0 || !module.EnumArgumentAndReturnValue, "Required module method EnumArgumentAndReturnValue not found in {}", module.mName);
  }
  {
    auto res = mHostfxrDelegate_get_function_pointer(className.c_str(), "EnumVectorArgumentAndReturnValue", "CSharpBindings.IDotNetModule+DotNetModuleEnumVectorArgumentAndReturnValueDelegate, CSharpBindings", nullptr, nullptr, (void**)(&module.EnumVectorArgumentAndReturnValue));
    HOLGEN_FAIL_IF(res < 0 || !module.EnumVectorArgumentAndReturnValue, "Required module method EnumVectorArgumentAndReturnValue not found in {}", module.mName);
  }
  return module;
}
}
