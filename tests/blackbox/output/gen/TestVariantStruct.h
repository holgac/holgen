// This file is generated by holgen. Do not modify manually.
#pragma once

#include "../holgen.h"
#include <array>
#include <cstdint>
#include <rapidjson/fwd.h>
#include "TestVariantStructCustomData1.h"
#include "TestVariantStructCustomData2.h"
#include "TestVariantStructType.h"
#include "Converter.h"

struct lua_State;
namespace holgen_blackbox_test {
class TestVariantStruct {
public:
  ~TestVariantStruct();
  TestVariantStructCustomData1* GetCustomDataAsTestVariantStructCustomData1();
  void InitializeCustomDataAsType1();
  TestVariantStructCustomData2* GetCustomDataAsTestVariantStructCustomData2();
  void InitializeCustomDataAsType2();
  bool operator==(const TestVariantStruct& rhs) const;
  bool ParseJson(const rapidjson::Value& json, const Converter& converter);
  void PushToLua(lua_State* luaState) const;
  void PushGlobalToLua(lua_State* luaState, const char* name) const;
  // This only works with negative indices
  static TestVariantStruct* ReadFromLua(lua_State* luaState, int32_t idx);
  static void CreateLuaMetatable(lua_State* luaState);
private:
  static int IndexMetaMethod(lua_State* luaState);
  static int NewIndexMetaMethod(lua_State* luaState);
  TestVariantStructType mCustomDataType;
  std::array<uint8_t, std::max(sizeof(TestVariantStructCustomData1), sizeof(TestVariantStructCustomData2))> mCustomData;
};
}
