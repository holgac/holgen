// This file is partially generated by holgen. Only modify the custom sections.
#include "../gen/ModuleVersion.h"
// HOLGEN_USER_DEFINED_BEGIN:ModuleVersion_CustomIncludes
// HOLGEN_USER_DEFINED_END:ModuleVersion_CustomIncludes

namespace holgen_blackbox_csharp {
ModuleVersion ModuleVersion::ConstructDouble(const uint16_t major, const uint16_t minor, const uint32_t revision) {
// HOLGEN_USER_DEFINED_BEGIN:ModuleVersion_ConstructDouble
  return {uint16_t(major * 2), uint16_t(minor * 2), revision * 2};
// HOLGEN_USER_DEFINED_END:ModuleVersion_ConstructDouble
}

uint32_t ModuleVersion::GetSum() const {
// HOLGEN_USER_DEFINED_BEGIN:ModuleVersion_GetSum_Const
  return uint32_t(mMajor) + uint32_t(mMinor) + mRevision;
// HOLGEN_USER_DEFINED_END:ModuleVersion_GetSum_Const
}

void ModuleVersion::BumpRevision() {
// HOLGEN_USER_DEFINED_BEGIN:ModuleVersion_BumpRevision
  ++mRevision;
// HOLGEN_USER_DEFINED_END:ModuleVersion_BumpRevision
}

ModuleVersion ModuleVersion::SumOfSelfAnd(const ModuleVersion &v1, const ModuleVersion &v2) {
// HOLGEN_USER_DEFINED_BEGIN:ModuleVersion_SumOfSelfAnd
  return ModuleVersion(mMajor + v1.mMajor + v2.mMajor, mMinor + v1.mMinor + v2.mMinor,
                       mRevision + v1.mRevision + v2.mRevision);
// HOLGEN_USER_DEFINED_END:ModuleVersion_SumOfSelfAnd
}

std::vector<ModuleVersion> ModuleVersion::GetNextRevisions(const uint64_t count) {
// HOLGEN_USER_DEFINED_BEGIN:ModuleVersion_GetNextRevisions
  std::vector<ModuleVersion> out;
  for(size_t i = 0; i < count; ++i) {
    out.emplace_back(mMajor, mMinor, mRevision + i + 1);
  }
  return out;
// HOLGEN_USER_DEFINED_END:ModuleVersion_GetNextRevisions
}

std::array<ModuleVersion, 3> ModuleVersion::GetNextThreeRevisions() {
// HOLGEN_USER_DEFINED_BEGIN:ModuleVersion_GetNextThreeRevisions
  return {
    ModuleVersion(mMajor, mMinor, mRevision + 1),
    ModuleVersion(mMajor, mMinor, mRevision + 2),
    ModuleVersion(mMajor, mMinor, mRevision + 3),
  };
// HOLGEN_USER_DEFINED_END:ModuleVersion_GetNextThreeRevisions
}

std::vector<uint32_t> ModuleVersion::GetDataAsVector() {
// HOLGEN_USER_DEFINED_BEGIN:ModuleVersion_GetDataAsVector
  return {mMajor, mMinor, mRevision};
// HOLGEN_USER_DEFINED_END:ModuleVersion_GetDataAsVector
}

std::array<uint32_t, 3> ModuleVersion::GetDataAsArray() {
// HOLGEN_USER_DEFINED_BEGIN:ModuleVersion_GetDataAsArray
  return {mMajor, mMinor, mRevision};
// HOLGEN_USER_DEFINED_END:ModuleVersion_GetDataAsArray
}

std::vector<int32_t> ModuleVersion::GetDataAsSignedVector() {
// HOLGEN_USER_DEFINED_BEGIN:ModuleVersion_GetDataAsSignedVector
  return {mMajor, mMinor, int(mRevision)};
// HOLGEN_USER_DEFINED_END:ModuleVersion_GetDataAsSignedVector
}

std::vector<EnumTest> ModuleVersion::GetEnums(const std::vector<EnumTest> &value) {
// HOLGEN_USER_DEFINED_BEGIN:ModuleVersion_GetEnums
  std::vector<EnumTest> retVal = value;
  retVal.emplace_back(EnumTest::Entry1);
  return retVal;
// HOLGEN_USER_DEFINED_END:ModuleVersion_GetEnums
}

ModuleVersion::ModuleVersion(const uint16_t major, const uint16_t minor, const uint32_t revision)
// HOLGEN_USER_DEFINED_BEGIN:INITIALIZER_ModuleVersion_Construct
    :
    mMajor(major), mMinor(minor), mRevision(revision)
// HOLGEN_USER_DEFINED_END:INITIALIZER_ModuleVersion_Construct
{
// HOLGEN_USER_DEFINED_BEGIN:ModuleVersion_Construct
// HOLGEN_USER_DEFINED_END:ModuleVersion_Construct
}

}
