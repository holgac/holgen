// This file is generated by holgen. Do not modify manually.
#include "TestEnumProperty.h"

#include <lua.hpp>
#include <rapidjson/document.h>
#include "Converter.h"
#include "JsonHelper.h"
#include "LuaHelper.h"

namespace holgen_blackbox_test {
TestEnumProperty::TestEnumProperty(TestEnumProperty::UnderlyingType value) :
    mValue(TestEnumProperty::Entry(value)) {
}

TestEnumProperty::TestEnumProperty(Entry value) :
    mValue(value) {
}

TestEnumProperty::Entry TestEnumProperty::GetValue() const {
  return Entry(mValue);
}

TestEnumProperty TestEnumProperty::FromString(std::string_view str) {
  if (str == "Human") {
    return TestEnumProperty(TestEnumProperty::Human);
  } else if (str == "Elf") {
    return TestEnumProperty(TestEnumProperty::Elf);
  } else if (str == "Goblin") {
    return TestEnumProperty(TestEnumProperty::Goblin);
  } else {
    HOLGEN_WARN("{} is not a valid TestEnumProperty, returning invalid", str);
    return TestEnumProperty{TestEnumProperty::Invalid};
  }
}

const char *TestEnumProperty::ToString() const {
  switch (mValue) {
    case TestEnumProperty::Human:
      return "Human";
    case TestEnumProperty::Elf:
      return "Elf";
    case TestEnumProperty::Goblin:
      return "Goblin";
    default:
      return "INVALID";
  }
}

TestEnumProperty &TestEnumProperty::operator=(UnderlyingType rhs) {
  mValue = TestEnumProperty::Entry(rhs);
  return *this;
}

bool TestEnumProperty::operator==(UnderlyingType rhs) const {
  return mValue == TestEnumProperty::Entry(rhs);
}

bool TestEnumProperty::operator==(const TestEnumProperty &rhs) const {
  return mValue == rhs.mValue;
}

bool TestEnumProperty::operator!=(UnderlyingType rhs) const {
  return mValue != TestEnumProperty::Entry(rhs);
}

bool TestEnumProperty::operator!=(const TestEnumProperty &rhs) const {
  return mValue != rhs.mValue;
}

bool TestEnumProperty::operator<(UnderlyingType rhs) const {
  return mValue < TestEnumProperty::Entry(rhs);
}

bool TestEnumProperty::operator<(const TestEnumProperty &rhs) const {
  return mValue < rhs.mValue;
}

const char *TestEnumProperty::GetPlural() const {
  switch (mValue) {
  case Entry::Elf:
    return "Elves";
  case Entry::Goblin:
    return "Goblins";
  case Entry::Human:
    return "NOT_DEFINED";
  }
  return "NOT_DEFINED";
}

uint16_t TestEnumProperty::GetMaxAge() const {
  switch (mValue) {
  case Entry::Goblin:
    return 20;
  case Entry::Elf:
    return 200;
  case Entry::Human:
    return 80;
  }
  return 20;
}

bool TestEnumProperty::ParseJson(const rapidjson::Value &json, const Converter &converter) {
  if (json.IsString()) {
    *this = TestEnumProperty::FromString(std::string_view(json.GetString(), json.GetStringLength()));
  } else if (json.IsInt64()) {
    *this = TestEnumProperty(json.GetInt64());
  } else {
    *this = TestEnumProperty{};
    HOLGEN_WARN("Could not json-parse TestEnumProperty enum: invalid json type");
    return false;
  }
  return true;
}

void TestEnumProperty::PushToLua(lua_State *luaState) const {
  LuaHelper::Push<true>(TestEnumProperty::UnderlyingType(mValue), luaState);
}

void TestEnumProperty::PushMirrorToLua(lua_State *luaState) const {
  LuaHelper::Push<true>(TestEnumProperty::UnderlyingType(mValue), luaState);
}

TestEnumProperty TestEnumProperty::ReadMirrorFromLua(lua_State *luaState, int32_t idx) {
  auto typ = lua_type(luaState, idx);
  if (typ == LUA_TSTRING) {
    return FromString(lua_tostring(luaState, idx));
  } else if (typ == LUA_TNUMBER) {
    return TestEnumProperty(lua_tonumber(luaState, idx));
  } else {
    HOLGEN_WARN("Unexpected type when parsing TestEnumProperty: {}", lua_typename(luaState, typ));
    return TestEnumProperty{};
  }
}

void TestEnumProperty::PushEnumToLua(lua_State *luaState) {
  lua_newtable(luaState);
  lua_pushstring(luaState, "Human");
  lua_pushnumber(luaState, TestEnumProperty::Human);
  lua_settable(luaState, -3);
  lua_pushstring(luaState, "Elf");
  lua_pushnumber(luaState, TestEnumProperty::Elf);
  lua_settable(luaState, -3);
  lua_pushstring(luaState, "Goblin");
  lua_pushnumber(luaState, TestEnumProperty::Goblin);
  lua_settable(luaState, -3);
  lua_pushstring(luaState, "Invalid");
  lua_pushnumber(luaState, 3);
  lua_settable(luaState, -3);
  lua_pushstring(luaState, "Human");
  lua_rawseti(luaState, -2, 0);
  lua_pushstring(luaState, "Elf");
  lua_rawseti(luaState, -2, 1);
  lua_pushstring(luaState, "Goblin");
  lua_rawseti(luaState, -2, 2);
  lua_pushstring(luaState, "Invalid");
  lua_rawseti(luaState, -2, 3);
  lua_setglobal(luaState, "TestEnumProperty");
}
}
