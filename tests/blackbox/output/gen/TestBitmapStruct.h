// This file is generated by holgen. Do not modify manually.
#pragma once

#include "../holgen.h"
#include <cstdint>
#include <rapidjson/fwd.h>
#include "TestBitmap.h"

struct lua_State;
namespace holgen_blackbox_test {
  class Converter;
}
namespace holgen_blackbox_test {
class TestBitmapStruct {
public:
  TestBitmapStruct() = default;
  TestBitmapStruct(const TestBitmapStruct &rhs) = default;
  TestBitmapStruct(TestBitmapStruct &&rhs) = default;
  ~TestBitmapStruct() = default;
  bool operator==(const TestBitmapStruct &rhs) const;
  const TestBitmap &GetBitmapField() const;
  TestBitmap &GetBitmapField();
  void SetBitmapField(const TestBitmap &val);
  bool HasBitmapField(uint64_t val) const;
  void AddBitmapField(uint64_t val);
  void RemoveBitmapField(uint64_t val);
  void ToggleBitmapField(uint64_t val);
  bool ParseJson(const rapidjson::Value &json, const Converter &converter);
  void PushToLua(lua_State *luaState) const;
  void PushMirrorToLua(lua_State *luaState) const;
  void PushGlobalToLua(lua_State *luaState, const char *name) const;
  /*
   * This only works with negative indices
   * Reads proxy object (a table with a metatable and an embedded pointer or an index)
   */
  static TestBitmapStruct *ReadProxyFromLua(lua_State *luaState, int32_t idx);
  /*
   * This only works with negative indices
   * Reads a mirror object (a table with entries that mirror the c++ data structure)
   */
  static TestBitmapStruct ReadMirrorFromLua(lua_State *luaState, int32_t idx);
  static void CreateLuaMetatable(lua_State *luaState);
  TestBitmapStruct &operator=(const TestBitmapStruct &rhs) = default;
  TestBitmapStruct &operator=(TestBitmapStruct &&rhs) = default;
  inline static const char *CLASS_NAME = "TestBitmapStruct";
private:
  static int NewIndexMetaMethod(lua_State *luaState);
  static int HasBitmapFieldCallerFromLua(lua_State *luaState);
  static int AddBitmapFieldCallerFromLua(lua_State *luaState);
  static int RemoveBitmapFieldCallerFromLua(lua_State *luaState);
  static int ToggleBitmapFieldCallerFromLua(lua_State *luaState);
  static int IndexMetaMethod(lua_State *luaState);
  TestBitmap mBitmapField;
};
}
