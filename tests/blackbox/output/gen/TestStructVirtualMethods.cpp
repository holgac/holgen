// This file is generated by holgen. Do not modify manually.
#include "TestStructVirtualMethods.h"

#include <cstring>
#include <lua.hpp>
#include <rapidjson/document.h>
#include "Converter.h"
#include "JsonHelper.h"
#include "LuaHelper.h"

namespace holgen_blackbox_test {
bool TestStructVirtualMethods::operator==(const TestStructVirtualMethods &rhs) const {
  return true;
}

bool TestStructVirtualMethods::ParseJson(const rapidjson::Value &json, const Converter &converter) {
  return true;
}

void TestStructVirtualMethods::PushToLua(lua_State *luaState) const {
  lua_newtable(luaState);
  lua_pushstring(luaState, "p");
  lua_pushlightuserdata(luaState, (void *) this);
  lua_settable(luaState, -3);
  lua_pushstring(luaState, "c");
  lua_pushlightuserdata(luaState, &CLASS_NAME);
  lua_settable(luaState, -3);
  lua_getglobal(luaState, "TestStructVirtualMethodsMeta");
  lua_setmetatable(luaState, -2);
}

void TestStructVirtualMethods::PushMirrorToLua(lua_State *luaState) const {
  lua_newtable(luaState);
}

void TestStructVirtualMethods::PushGlobalToLua(lua_State *luaState, const char *name) const {
  PushToLua(luaState);
  lua_setglobal(luaState, name);
}

TestStructVirtualMethods *TestStructVirtualMethods::ReadProxyFromLua(lua_State *luaState, int32_t idx) {
  lua_pushstring(luaState, "c");
  lua_gettable(luaState, idx - 1);
  if (!lua_isuserdata(luaState, -1)) {
    HOLGEN_WARN("Proxy object does not contain the correct metadata!");
    return nullptr;
  }
  auto className = *static_cast<const char**>(lua_touserdata(luaState, -1));
  lua_pop(luaState, 1);
  HOLGEN_WARN_AND_RETURN_IF(className != CLASS_NAME, nullptr, "Received {} instance when expecting TestStructVirtualMethods", className);
  lua_pushstring(luaState, "p");
  lua_gettable(luaState, idx - 1);
  auto ptr = (TestStructVirtualMethods *) lua_touserdata(luaState, -1);
  lua_pop(luaState, 1);
  return ptr;
}

int TestStructVirtualMethods::NewIndexMetaMethod(lua_State *luaState) {
  return 0;
}

void TestStructVirtualMethods::CreateLuaMetatable(lua_State *luaState) {
  lua_newtable(luaState);
  lua_pushstring(luaState, "__index");
  lua_pushcfunction(luaState, TestStructVirtualMethods::IndexMetaMethod);
  lua_settable(luaState, -3);
  lua_pushstring(luaState, "__newindex");
  lua_pushcfunction(luaState, TestStructVirtualMethods::NewIndexMetaMethod);
  lua_settable(luaState, -3);
  lua_setglobal(luaState, "TestStructVirtualMethodsMeta");
}

int TestStructVirtualMethods::VirtualFuncCallerFromLua(lua_State *luaState) {
  auto instance = TestStructVirtualMethods::ReadProxyFromLua(luaState, -1);
  HOLGEN_WARN_AND_RETURN_IF(!instance, 0, "Calling TestStructVirtualMethods.VirtualFunc method with an invalid lua proxy object!");
  auto result = instance->VirtualFunc();
  LuaHelper::Push<true>(result, luaState);
  return 1;
}

int TestStructVirtualMethods::PureVirtualFuncCallerFromLua(lua_State *luaState) {
  auto instance = TestStructVirtualMethods::ReadProxyFromLua(luaState, -1);
  HOLGEN_WARN_AND_RETURN_IF(!instance, 0, "Calling TestStructVirtualMethods.PureVirtualFunc method with an invalid lua proxy object!");
  auto result = instance->PureVirtualFunc();
  LuaHelper::Push<true>(result, luaState);
  return 1;
}

int TestStructVirtualMethods::IndexMetaMethod(lua_State *luaState) {
  const char *key = lua_tostring(luaState, -1);
  if (0 == strcmp("VirtualFunc", key)) {
    lua_pushcfunction(luaState, TestStructVirtualMethods::VirtualFuncCallerFromLua);
  } else if (0 == strcmp("PureVirtualFunc", key)) {
    lua_pushcfunction(luaState, TestStructVirtualMethods::PureVirtualFuncCallerFromLua);
  } else {
    HOLGEN_WARN("Unexpected lua field: TestStructVirtualMethods.{}", key);
    return 0;
  }
  return 1;
}
}
