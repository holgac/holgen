// This file is generated by holgen. Do not modify manually.
#include "TestVariantStruct.h"

#include <rapidjson/document.h>
#include <lua.hpp>
#include "JsonHelper.h"
#include "LuaHelper.h"

namespace holgen_blackbox_test {
TestVariantStruct::~TestVariantStruct() {
  if (mCustomDataType == TestVariantStructType::Type1) {
    GetCustomDataAsTestVariantStructCustomData1()->~TestVariantStructCustomData1();
  } else if (mCustomDataType == TestVariantStructType::Type2) {
    GetCustomDataAsTestVariantStructCustomData2()->~TestVariantStructCustomData2();
  }
}
TestVariantStructCustomData1* TestVariantStruct::GetCustomDataAsTestVariantStructCustomData1() {
  HOLGEN_FAIL_IF(mCustomDataType != TestVariantStructType::Type1, "Attempting to get TestVariantStruct.customData as TestVariantStructCustomData1 while in reality its type is {}!", mCustomDataType);
  return reinterpret_cast<TestVariantStructCustomData1*>(mCustomData.data());
}

void TestVariantStruct::InitializeCustomDataAsType1() {
  HOLGEN_FAIL_IF(mCustomDataType != TestVariantStructType::Invalid, "customData field was already initialized as {}, trying to initialize as {}!,", mCustomDataType, TestVariantStructType::Type1);
  mCustomDataType = TestVariantStructType::Type1;
  new (mCustomData.data()) TestVariantStructCustomData1();
}

TestVariantStructCustomData2* TestVariantStruct::GetCustomDataAsTestVariantStructCustomData2() {
  HOLGEN_FAIL_IF(mCustomDataType != TestVariantStructType::Type2, "Attempting to get TestVariantStruct.customData as TestVariantStructCustomData2 while in reality its type is {}!", mCustomDataType);
  return reinterpret_cast<TestVariantStructCustomData2*>(mCustomData.data());
}

void TestVariantStruct::InitializeCustomDataAsType2() {
  HOLGEN_FAIL_IF(mCustomDataType != TestVariantStructType::Invalid, "customData field was already initialized as {}, trying to initialize as {}!,", mCustomDataType, TestVariantStructType::Type2);
  mCustomDataType = TestVariantStructType::Type2;
  new (mCustomData.data()) TestVariantStructCustomData2();
}

bool TestVariantStruct::operator==(const TestVariantStruct& rhs) const {
  return
      mCustomDataType == rhs.mCustomDataType &&
      mCustomData == rhs.mCustomData;
}

bool TestVariantStruct::ParseJson(const rapidjson::Value& json, const Converter& converter) {
  return true;
}

void TestVariantStruct::PushToLua(lua_State* luaState) const {
  lua_newtable(luaState);
  lua_pushstring(luaState, "p");
  lua_pushlightuserdata(luaState, (void*)this);
  lua_settable(luaState, -3);
  lua_getglobal(luaState, "TestVariantStructMeta");
  lua_setmetatable(luaState, -2);
}

void TestVariantStruct::PushGlobalToLua(lua_State* luaState, const char* name) const {
  PushToLua(luaState);
  lua_setglobal(luaState, name);
}

TestVariantStruct* TestVariantStruct::ReadFromLua(lua_State* luaState, int32_t idx) {
  lua_pushstring(luaState, "p");
  lua_gettable(luaState, idx - 1);
  auto ptr = (TestVariantStruct*)lua_touserdata(luaState, -1);
  lua_pop(luaState, 1);
  return ptr;
}

int TestVariantStruct::IndexMetaMethod(lua_State* luaState) {
  return 0;
}

int TestVariantStruct::NewIndexMetaMethod(lua_State* luaState) {
  return 0;
}

void TestVariantStruct::CreateLuaMetatable(lua_State* luaState) {
  lua_newtable(luaState);
  lua_pushstring(luaState, "__index");
  lua_pushcfunction(luaState, TestVariantStruct::IndexMetaMethod);
  lua_settable(luaState, -3);
  lua_pushstring(luaState, "__newindex");
  lua_pushcfunction(luaState, TestVariantStruct::NewIndexMetaMethod);
  lua_settable(luaState, -3);
  lua_setglobal(luaState, "TestVariantStructMeta");
}
}
