// This file is generated by holgen. Do not modify manually.
#pragma once

#include "../holgen.h"
#include <array>
#include <cstdint>
#include <format>
#include <string>
#include <rapidjson/fwd.h>

struct lua_State;
namespace holgen_blackbox_test {
  class Converter;
}
namespace holgen_blackbox_test {
class TestBitmap {
public:
  using UnderlyingType=int64_t;
  enum EntryBitPos : UnderlyingType {
    Entry5BitPos = 5,
    Entry1BitPos = 0,
    Entry2BitPos = 1,
    Entry3BitPos = 2,
  };
  enum Entry : UnderlyingType {
    Entry5 = 32,
    Entry1 = 1,
    Entry2 = 2,
    Entry3 = 4,
  };
  explicit TestBitmap(UnderlyingType value = 0);
  UnderlyingType GetValue() const;
  static TestBitmap FromString(std::string_view str);
  std::string ToString() const;
  TestBitmap &operator=(UnderlyingType rhs);
  bool operator==(UnderlyingType rhs) const;
  bool operator==(const TestBitmap &rhs) const;
  bool operator!=(UnderlyingType rhs) const;
  bool operator!=(const TestBitmap &rhs) const;
  bool operator<(UnderlyingType rhs) const;
  bool operator<(const TestBitmap &rhs) const;
  TestBitmap &operator|=(TestBitmap::Entry rhs);
  TestBitmap &operator|=(const TestBitmap &rhs);
  bool operator|(const TestBitmap &rhs) const;
  bool Has(const TestBitmap &val) const;
  bool Has(const TestBitmap::Entry &val) const;
  constexpr static std::array<TestBitmap::Entry, 4> GetEntries() {
    return std::array<TestBitmap::Entry, 4>{Entry5, Entry1, Entry2, Entry3};
  }
  bool ParseJson(const rapidjson::Value &json, const Converter &converter);
  void PushToLua(lua_State *luaState) const;
  // This only works with negative indices
  static TestBitmap ReadFromLua(lua_State *luaState, int32_t idx);
  static void PushEnumToLua(lua_State *luaState);
private:
  static TestBitmap FromStringSingle(std::string_view str);
  const char *ToStringSingle() const;
  UnderlyingType mValue;
};
}
namespace std {
template <>
struct formatter<holgen_blackbox_test::TestBitmap::Entry> : public formatter<string> {
public:
  template <typename FormatContext>
  auto format(const holgen_blackbox_test::TestBitmap::Entry &obj, FormatContext &ctx) const {
    return format_to(ctx.out(), "{}", holgen_blackbox_test::TestBitmap(obj).ToString());
  }
};
}
namespace std {
template <>
struct formatter<holgen_blackbox_test::TestBitmap> : public formatter<string> {
public:
  template <typename FormatContext>
  auto format(const holgen_blackbox_test::TestBitmap &obj, FormatContext &ctx) const {
    return format_to(ctx.out(), "{}", obj.ToString());
  }
};
}
