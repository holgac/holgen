// This file is generated by holgen. Do not modify manually.
#pragma once

#include "../holgen.h"
#include <cstdint>
#include <map>
#include <string>
#include <vector>
#include <lua.hpp>
#include <rapidjson/fwd.h>
#include "TestContainerInnerStructNoId.h"
#include "TestContainerInnerStructWithId.h"

struct lua_State;
namespace holgen_blackbox_test {
  class Converter;
}
namespace holgen_blackbox_test {
// Defined in tests/blackbox/schemas/testcontainer.hsc
class TestContainerVector {
public:
  TestContainerVector() = default;
  TestContainerVector(const TestContainerVector &rhs) = default;
  TestContainerVector(TestContainerVector &&rhs) noexcept = default;
  ~TestContainerVector() = default;
  const std::vector<TestContainerInnerStructWithId> &GetInnerStructsWithId() const;
  std::vector<TestContainerInnerStructWithId> &GetInnerStructsWithId();
  const std::vector<TestContainerInnerStructNoId> &GetInnerStructsNoId() const;
  std::vector<TestContainerInnerStructNoId> &GetInnerStructsNoId();
  const std::vector<std::string> &GetStringContainer() const;
  std::vector<std::string> &GetStringContainer();
  const std::vector<uint32_t> &GetUnsignedContainer() const;
  std::vector<uint32_t> &GetUnsignedContainer();
  void SetInnerStructsWithId(const std::vector<TestContainerInnerStructWithId> &val);
  void SetInnerStructsNoId(const std::vector<TestContainerInnerStructNoId> &val);
  void SetStringContainer(const std::vector<std::string> &val);
  void SetUnsignedContainer(const std::vector<uint32_t> &val);
  const TestContainerInnerStructWithId *GetInnerStructWithIdFromName(const std::string &key) const;
  TestContainerInnerStructWithId *GetInnerStructWithIdFromName(const std::string &key);
  const TestContainerInnerStructNoId *GetInnerStructNoIdFromName(const std::string &key) const;
  TestContainerInnerStructNoId *GetInnerStructNoIdFromName(const std::string &key);
  TestContainerInnerStructWithId *AddInnerStructWithId(TestContainerInnerStructWithId &&elem);
  TestContainerInnerStructWithId *AddInnerStructWithId(TestContainerInnerStructWithId &elem);
  const TestContainerInnerStructWithId *GetInnerStructWithId(uint32_t idx) const;
  TestContainerInnerStructWithId *GetInnerStructWithId(uint32_t idx);
  size_t GetInnerStructWithIdCount() const;
  TestContainerInnerStructNoId *AddInnerStructNoId(TestContainerInnerStructNoId &&elem);
  TestContainerInnerStructNoId *AddInnerStructNoId(const TestContainerInnerStructNoId &elem);
  const TestContainerInnerStructNoId *GetInnerStructNoId(size_t idx) const;
  TestContainerInnerStructNoId *GetInnerStructNoId(size_t idx);
  void DeleteInnerStructNoId(size_t idx);
  size_t GetInnerStructNoIdCount() const;
  std::string *AddStringElem(std::string &&elem);
  std::string *AddStringElem(const std::string &elem);
  const std::string *GetStringElem(size_t idx) const;
  std::string *GetStringElem(size_t idx);
  void DeleteStringElem(size_t idx);
  size_t GetStringElemCount() const;
  uint32_t *AddUnsignedElem(uint32_t elem);
  const uint32_t *GetUnsignedElem(size_t idx) const;
  uint32_t *GetUnsignedElem(size_t idx);
  void DeleteUnsignedElem(size_t idx);
  size_t GetUnsignedElemCount() const;
  bool operator==(const TestContainerVector &rhs) const;
  bool ParseJson(const rapidjson::Value &json, const Converter &converter, lua_State *luaState);
  rapidjson::Value DumpJson(rapidjson::Document &doc, lua_State *luaState) const;
  void PushToLua(lua_State *luaState) const;
  void PushMirrorToLua(lua_State *luaState) const;
  void PushGlobalToLua(lua_State *luaState, const char *name) const;
  /*
   * This only works with negative indices
   * Reads proxy object (a table with a metatable and an embedded pointer or an index)
   */
  static TestContainerVector *ReadProxyFromLua(lua_State *luaState, int32_t idx);
  /*
   * This only works with negative indices
   * Reads a mirror object (a table with entries that mirror the c++ data structure)
   */
  static TestContainerVector ReadMirrorFromLua(lua_State *luaState, int32_t idx);
  static void CreateLuaMetatable(lua_State *luaState);
  TestContainerVector &operator=(const TestContainerVector &rhs) = default;
  TestContainerVector &operator=(TestContainerVector &&rhs) noexcept = default;
  inline static const char *CLASS_NAME = "TestContainerVector";
private:
  static int NewIndexMetaMethod(lua_State *luaState);
  static int GetInnerStructWithIdFromNameCallerFromLua(lua_State *luaState);
  static int GetInnerStructNoIdFromNameCallerFromLua(lua_State *luaState);
  static int AddInnerStructWithIdCallerFromLua(lua_State *luaState);
  static int GetInnerStructWithIdCallerFromLua(lua_State *luaState);
  static int GetInnerStructWithIdCountCallerFromLua(lua_State *luaState);
  static int AddInnerStructNoIdCallerFromLua(lua_State *luaState);
  static int GetInnerStructNoIdCallerFromLua(lua_State *luaState);
  static int DeleteInnerStructNoIdCallerFromLua(lua_State *luaState);
  static int GetInnerStructNoIdCountCallerFromLua(lua_State *luaState);
  static int AddStringElemCallerFromLua(lua_State *luaState);
  static int GetStringElemCallerFromLua(lua_State *luaState);
  static int DeleteStringElemCallerFromLua(lua_State *luaState);
  static int GetStringElemCountCallerFromLua(lua_State *luaState);
  static int AddUnsignedElemCallerFromLua(lua_State *luaState);
  static int GetUnsignedElemCallerFromLua(lua_State *luaState);
  static int DeleteUnsignedElemCallerFromLua(lua_State *luaState);
  static int GetUnsignedElemCountCallerFromLua(lua_State *luaState);
  static int IndexMetaMethod(lua_State *luaState);
  std::vector<TestContainerInnerStructWithId> mInnerStructsWithId;
  std::vector<TestContainerInnerStructNoId> mInnerStructsNoId;
  std::vector<std::string> mStringContainer;
  std::vector<uint32_t> mUnsignedContainer;
  std::map<std::string, uint32_t> mInnerStructsWithIdNameIndex;
  std::map<std::string, size_t> mInnerStructsNoIdNameIndex;
};
}
