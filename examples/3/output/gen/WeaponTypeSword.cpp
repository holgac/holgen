// This file is generated by holgen. Do not modify manually.
#include "WeaponTypeSword.h"

#include <cmath>
#include <cstring>
#include <lua.hpp>
#include <rapidjson/document.h>
#include "Converter.h"
#include "JsonHelper.h"
#include "LuaHelper.h"

namespace ex3_schemas {
bool WeaponTypeSword::operator==(const WeaponTypeSword &rhs) const {
  return !(
      std::fabs(mSharpness - rhs.mSharpness) >= 0.00001 ||
      mIsShortSword != rhs.mIsShortSword
  );
}

float WeaponTypeSword::GetSharpness() const {
  return mSharpness;
}

bool WeaponTypeSword::GetIsShortSword() const {
  return mIsShortSword;
}

void WeaponTypeSword::SetSharpness(float val) {
  mSharpness = val;
}

void WeaponTypeSword::SetIsShortSword(bool val) {
  mIsShortSword = val;
}

bool WeaponTypeSword::ParseJson(const rapidjson::Value &json, const Converter &converter) {
  HOLGEN_WARN_AND_RETURN_IF(!json.IsObject(), false, "Found non-object json element when parsing WeaponTypeSword");
  for (const auto &data: json.GetObject()) {
    const auto &name = data.name.GetString();
    if (0 == strcmp("sharpness", name)) {
      auto res = JsonHelper::Parse(mSharpness, data.value, converter);
      HOLGEN_WARN_AND_RETURN_IF(!res, false, "Could not json-parse WeaponTypeSword.sharpness field");
    } else if (0 == strcmp("isShortSword", name)) {
      auto res = JsonHelper::Parse(mIsShortSword, data.value, converter);
      HOLGEN_WARN_AND_RETURN_IF(!res, false, "Could not json-parse WeaponTypeSword.isShortSword field");
    } else {
      HOLGEN_WARN("Unexpected entry in json when parsing WeaponTypeSword: {}", name);
    }
  }
  return true;
}

void WeaponTypeSword::PushToLua(lua_State *luaState) const {
  lua_newtable(luaState);
  lua_pushstring(luaState, "p");
  lua_pushlightuserdata(luaState, (void *) this);
  lua_settable(luaState, -3);
  lua_getglobal(luaState, "WeaponTypeSwordMeta");
  lua_setmetatable(luaState, -2);
}

void WeaponTypeSword::PushMirrorToLua(lua_State *luaState) const {
  lua_newtable(luaState);
  lua_pushstring(luaState, "sharpness");
  LuaHelper::Push(mSharpness, luaState, true);
  lua_settable(luaState, -3);
  lua_pushstring(luaState, "isShortSword");
  LuaHelper::Push(mIsShortSword, luaState, true);
  lua_settable(luaState, -3);
}

void WeaponTypeSword::PushGlobalToLua(lua_State *luaState, const char *name) const {
  PushToLua(luaState);
  lua_setglobal(luaState, name);
}

WeaponTypeSword *WeaponTypeSword::ReadProxyFromLua(lua_State *luaState, int32_t idx) {
  lua_pushstring(luaState, "p");
  lua_gettable(luaState, idx - 1);
  auto ptr = (WeaponTypeSword *) lua_touserdata(luaState, -1);
  lua_pop(luaState, 1);
  return ptr;
}

WeaponTypeSword WeaponTypeSword::ReadMirrorFromLua(lua_State *luaState, int32_t idx) {
  auto result = WeaponTypeSword{};
  lua_pushvalue(luaState, idx);
  lua_pushnil(luaState);
  while (lua_next(luaState, -2)) {
    auto key = lua_tostring(luaState, -2);
    if (0 == strcmp("sharpness", key)) {
      LuaHelper::Read(result.mSharpness, luaState, -1);
      lua_pop(luaState, 1);
    } else if (0 == strcmp("isShortSword", key)) {
      LuaHelper::Read(result.mIsShortSword, luaState, -1);
      lua_pop(luaState, 1);
    } else {
      HOLGEN_WARN("Unexpected lua field: WeaponTypeSword.{}", key);
      lua_pop(luaState, 1);
    }
  }
  lua_pop(luaState, 1);
  return result;
}

int WeaponTypeSword::NewIndexMetaMethod(lua_State *luaState) {
  auto instance = WeaponTypeSword::ReadProxyFromLua(luaState, -3);
  const char *key = lua_tostring(luaState, -2);
  if (0 == strcmp("sharpness", key)) {
    auto res = LuaHelper::Read(instance->mSharpness, luaState, -1);
    HOLGEN_WARN_IF(!res, "Assigning WeaponTypeSword.sharpness from lua failed!");
  } else if (0 == strcmp("isShortSword", key)) {
    auto res = LuaHelper::Read(instance->mIsShortSword, luaState, -1);
    HOLGEN_WARN_IF(!res, "Assigning WeaponTypeSword.isShortSword from lua failed!");
  } else {
    HOLGEN_WARN("Unexpected lua field: WeaponTypeSword.{}", key);
  }
  return 0;
}

void WeaponTypeSword::CreateLuaMetatable(lua_State *luaState) {
  lua_newtable(luaState);
  lua_pushstring(luaState, "__index");
  lua_pushcfunction(luaState, WeaponTypeSword::IndexMetaMethod);
  lua_settable(luaState, -3);
  lua_pushstring(luaState, "__newindex");
  lua_pushcfunction(luaState, WeaponTypeSword::NewIndexMetaMethod);
  lua_settable(luaState, -3);
  lua_setglobal(luaState, "WeaponTypeSwordMeta");
}

int WeaponTypeSword::IndexMetaMethod(lua_State *luaState) {
  const char *key = lua_tostring(luaState, -1);
  if (0 == strcmp("sharpness", key)) {
    auto instance = WeaponTypeSword::ReadProxyFromLua(luaState, -2);
    HOLGEN_WARN_AND_RETURN_IF(!instance, 0, "Requesting for WeaponTypeSword.sharpness with an invalid lua proxy object!");
    LuaHelper::Push(instance->mSharpness, luaState, false);
  } else if (0 == strcmp("isShortSword", key)) {
    auto instance = WeaponTypeSword::ReadProxyFromLua(luaState, -2);
    HOLGEN_WARN_AND_RETURN_IF(!instance, 0, "Requesting for WeaponTypeSword.isShortSword with an invalid lua proxy object!");
    LuaHelper::Push(instance->mIsShortSword, luaState, false);
  } else {
    HOLGEN_WARN("Unexpected lua field: WeaponTypeSword.{}", key);
    return 0;
  }
  return 1;
}
}
