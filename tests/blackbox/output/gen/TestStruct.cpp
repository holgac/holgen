// This file is generated by holgen. Do not modify manually.
#include "TestStruct.h"

#include <cstring>
#include <rapidjson/document.h>
#include "Converter.h"
#include "JsonHelper.h"
#include "LuaHelper.h"

namespace holgen_blackbox_test {
TestStruct::TestStruct(TestStruct &&rhs) noexcept {
  mTestFieldBool = rhs.mTestFieldBool;
  mTestFieldUnsigned = rhs.mTestFieldUnsigned;
  mTestFieldString = std::move(rhs.mTestFieldString);
  std::swap(mTestFieldUserdata, rhs.mTestFieldUserdata);
}

bool TestStruct::GetTestFieldBool() const {
  return mTestFieldBool;
}

uint32_t TestStruct::GetTestFieldUnsigned() const {
  return mTestFieldUnsigned;
}

const std::string &TestStruct::GetTestFieldString() const {
  return mTestFieldString;
}

std::string &TestStruct::GetTestFieldString() {
  return mTestFieldString;
}

void TestStruct::SetTestFieldBool(bool val) {
  mTestFieldBool = val;
}

void TestStruct::SetTestFieldUnsigned(uint32_t val) {
  mTestFieldUnsigned = val;
}

void TestStruct::SetTestFieldString(const std::string &val) {
  mTestFieldString = val;
}

bool TestStruct::operator==(const TestStruct &rhs) const {
  return !(
      mTestFieldBool != rhs.mTestFieldBool ||
      mTestFieldUnsigned != rhs.mTestFieldUnsigned ||
      mTestFieldString != rhs.mTestFieldString ||
      mTestFieldUserdata != rhs.mTestFieldUserdata
  );
}

bool TestStruct::ParseJson(const rapidjson::Value &json, const Converter &converter, lua_State *luaState) {
  if (json.IsObject()) {
    for (const auto &data: json.GetObject()) {
      const auto &name = data.name.GetString();
      if (0 == strcmp("testFieldBool", name)) {
        auto res = JsonHelper::Parse(mTestFieldBool, data.value, converter, luaState);
        HOLGEN_WARN_AND_RETURN_IF(!res, false, "Could not json-parse TestStruct.testFieldBool field");
      } else if (0 == strcmp("testFieldUnsigned", name)) {
        auto res = JsonHelper::Parse(mTestFieldUnsigned, data.value, converter, luaState);
        HOLGEN_WARN_AND_RETURN_IF(!res, false, "Could not json-parse TestStruct.testFieldUnsigned field");
      } else if (0 == strcmp("testFieldString", name)) {
        auto res = JsonHelper::Parse(mTestFieldString, data.value, converter, luaState);
        HOLGEN_WARN_AND_RETURN_IF(!res, false, "Could not json-parse TestStruct.testFieldString field");
      } else {
        HOLGEN_WARN("Unexpected entry in json when parsing TestStruct: {}", name);
      }
    }
  } else if (json.IsArray()) {
    auto it = json.Begin();
    {
      HOLGEN_WARN_AND_RETURN_IF(it == json.End(), false, "Exhausted elements when parsing TestStruct!");
      auto res = JsonHelper::Parse(mTestFieldBool, (*it), converter, luaState);
      HOLGEN_WARN_AND_RETURN_IF(!res, false, "Could not json-parse TestStruct.testFieldBool field");
      ++it;
    }
    {
      HOLGEN_WARN_AND_RETURN_IF(it == json.End(), false, "Exhausted elements when parsing TestStruct!");
      auto res = JsonHelper::Parse(mTestFieldUnsigned, (*it), converter, luaState);
      HOLGEN_WARN_AND_RETURN_IF(!res, false, "Could not json-parse TestStruct.testFieldUnsigned field");
      ++it;
    }
    {
      HOLGEN_WARN_AND_RETURN_IF(it == json.End(), false, "Exhausted elements when parsing TestStruct!");
      auto res = JsonHelper::Parse(mTestFieldString, (*it), converter, luaState);
      HOLGEN_WARN_AND_RETURN_IF(!res, false, "Could not json-parse TestStruct.testFieldString field");
      ++it;
    }
    HOLGEN_WARN_AND_RETURN_IF(it != json.End(), false, "Too many elements when parsing TestStruct!");
  } else {
    HOLGEN_WARN("Unexpected json type when parsing TestStruct.");
    return false;
  }
  return true;
}

rapidjson::Value TestStruct::DumpJson(rapidjson::Document &doc, lua_State *luaState) const {
  rapidjson::Value val(rapidjson::kObjectType);
  val.AddMember("testFieldBool", JsonHelper::Dump(mTestFieldBool, doc, luaState), doc.GetAllocator());
  val.AddMember("testFieldUnsigned", JsonHelper::Dump(mTestFieldUnsigned, doc, luaState), doc.GetAllocator());
  val.AddMember("testFieldString", JsonHelper::Dump(mTestFieldString, doc, luaState), doc.GetAllocator());
  return val;
}

void TestStruct::PushToLua(lua_State *luaState) const {
  lua_newtable(luaState);
  lua_pushstring(luaState, "p");
  lua_pushlightuserdata(luaState, (void *) this);
  lua_settable(luaState, -3);
  lua_pushstring(luaState, "c");
  lua_pushlightuserdata(luaState, &CLASS_NAME);
  lua_settable(luaState, -3);
  lua_getglobal(luaState, "TestStruct");
  lua_setmetatable(luaState, -2);
}

void TestStruct::PushGlobalToLua(lua_State *luaState, const char *name) const {
  PushToLua(luaState);
  lua_setglobal(luaState, name);
}

TestStruct *TestStruct::ReadProxyFromLua(lua_State *luaState, int32_t idx) {
  lua_pushstring(luaState, "c");
  lua_gettable(luaState, idx - 1);
  if (!lua_isuserdata(luaState, -1)) {
    HOLGEN_WARN("Proxy object does not contain the correct metadata!");
    return nullptr;
  }
  auto className = *static_cast<const char**>(lua_touserdata(luaState, -1));
  lua_pop(luaState, 1);
  HOLGEN_WARN_AND_RETURN_IF(className != CLASS_NAME, nullptr, "Received {} instance when expecting TestStruct", className);
  lua_pushstring(luaState, "p");
  lua_gettable(luaState, idx - 1);
  auto ptr = (TestStruct *) lua_touserdata(luaState, -1);
  lua_pop(luaState, 1);
  return ptr;
}

int TestStruct::NewIndexMetaMethod(lua_State *luaState) {
  auto instance = TestStruct::ReadProxyFromLua(luaState, -3);
  const char *key = lua_tostring(luaState, -2);
  if (0 == strcmp("testFieldBool", key)) {
    auto res = LuaHelper::Read(instance->mTestFieldBool, luaState, -1);
    HOLGEN_WARN_IF(!res, "Assigning TestStruct.testFieldBool from lua failed!");
  } else if (0 == strcmp("testFieldUnsigned", key)) {
    auto res = LuaHelper::Read(instance->mTestFieldUnsigned, luaState, -1);
    HOLGEN_WARN_IF(!res, "Assigning TestStruct.testFieldUnsigned from lua failed!");
  } else if (0 == strcmp("testFieldString", key)) {
    auto res = LuaHelper::Read(instance->mTestFieldString, luaState, -1);
    HOLGEN_WARN_IF(!res, "Assigning TestStruct.testFieldString from lua failed!");
  } else {
    HOLGEN_WARN("Unexpected lua field: TestStruct.{}", key);
  }
  return 0;
}

int TestStruct::EqualsOperatorCallerFromLua(lua_State *luaState) {
  auto instance = TestStruct::ReadProxyFromLua(luaState, -2);
  HOLGEN_WARN_AND_RETURN_IF(!instance, 0, "Calling TestStruct.operator== method with an invalid lua proxy object!");
  auto arg0 = TestStruct::ReadProxyFromLua(luaState, -1);
  auto result = instance->operator==(*arg0);
  LuaHelper::Push<true>(result, luaState);
  return 1;
}

void TestStruct::CreateLuaMetatable(lua_State *luaState) {
  lua_newtable(luaState);
  lua_pushstring(luaState, "__index");
  lua_pushcfunction(luaState, TestStruct::IndexMetaMethod);
  lua_settable(luaState, -3);
  lua_pushstring(luaState, "__newindex");
  lua_pushcfunction(luaState, TestStruct::NewIndexMetaMethod);
  lua_settable(luaState, -3);
  lua_pushstring(luaState, "__eq");
  lua_pushcfunction(luaState, TestStruct::EqualsOperatorCallerFromLua);
  lua_settable(luaState, -3);
  lua_setglobal(luaState, "TestStruct");
}

int TestStruct::IndexMetaMethod(lua_State *luaState) {
  const char *key = lua_tostring(luaState, -1);
  if (0 == strcmp("testFieldBool", key)) {
    auto instance = TestStruct::ReadProxyFromLua(luaState, -2);
    HOLGEN_WARN_AND_RETURN_IF(!instance, 0, "Requesting for TestStruct.testFieldBool with an invalid lua proxy object!");
    LuaHelper::Push<false>(instance->mTestFieldBool, luaState);
  } else if (0 == strcmp("testFieldUnsigned", key)) {
    auto instance = TestStruct::ReadProxyFromLua(luaState, -2);
    HOLGEN_WARN_AND_RETURN_IF(!instance, 0, "Requesting for TestStruct.testFieldUnsigned with an invalid lua proxy object!");
    LuaHelper::Push<false>(instance->mTestFieldUnsigned, luaState);
  } else if (0 == strcmp("testFieldString", key)) {
    auto instance = TestStruct::ReadProxyFromLua(luaState, -2);
    HOLGEN_WARN_AND_RETURN_IF(!instance, 0, "Requesting for TestStruct.testFieldString with an invalid lua proxy object!");
    LuaHelper::Push<false>(instance->mTestFieldString, luaState);
  } else {
    HOLGEN_WARN("Unexpected lua field: TestStruct.{}", key);
    return 0;
  }
  return 1;
}

TestStruct &TestStruct::operator=(TestStruct &&rhs) noexcept {
  mTestFieldBool = rhs.mTestFieldBool;
  mTestFieldUnsigned = rhs.mTestFieldUnsigned;
  mTestFieldString = std::move(rhs.mTestFieldString);
  std::swap(mTestFieldUserdata, rhs.mTestFieldUserdata);
  return *this;
}
}
