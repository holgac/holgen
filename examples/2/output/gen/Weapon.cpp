// This file is generated by holgen. Do not modify manually.
#include "Weapon.h"

#include <lua.hpp>
#include <rapidjson/document.h>
#include "Converter.h"
#include "JsonHelper.h"
#include "LuaHelper.h"

namespace ex2_schemas {
bool Weapon::operator==(const Weapon &rhs) const {
  return
      mId == rhs.mId &&
      mDamageMin == rhs.mDamageMin &&
      mDamageMax == rhs.mDamageMax;
}

uint32_t Weapon::GetId() const {
  return mId;
}

uint8_t Weapon::GetDamageMin() const {
  return mDamageMin;
}

uint8_t Weapon::GetDamageMax() const {
  return mDamageMax;
}

void Weapon::SetId(uint32_t val) {
  mId = val;
}

uint8_t Weapon::GetAverageDamage(lua_State *luaState) const {
  HOLGEN_WARN_AND_RETURN_IF(mLuaFuncHandle_GetAverageDamage.empty(), {}, "Calling unset GetAverageDamage function");
  lua_getglobal(luaState, mLuaFuncHandle_GetAverageDamage.c_str());
  if (lua_isnil(luaState, -1)) {
    HOLGEN_WARN("Calling undefined GetAverageDamage function {}", mLuaFuncHandle_GetAverageDamage);
    lua_pop(luaState, 1);
    return {};
  }
  LuaHelper::Push(*this, luaState);
  lua_call(luaState, 1, 1);
  uint8_t result;
  LuaHelper::Read(result, luaState, -1);
  lua_pop(luaState, 1);
  return result;
}

void Weapon::SetGetAverageDamageLuaFunc(std::string val) {
  mLuaFuncHandle_GetAverageDamage = val;
}

bool Weapon::HasGetAverageDamageLuaFunc() const {
  return !mLuaFuncHandle_GetAverageDamage.empty();
}

bool Weapon::ParseJson(const rapidjson::Value &json, const Converter &converter) {
  HOLGEN_WARN_AND_RETURN_IF(!json.IsObject(), false, "Found non-object json element when parsing Weapon");
  for (const auto &data: json.GetObject()) {
    const auto &name = data.name.GetString();
    if (0 == strcmp("damageMin", name)) {
      auto res = JsonHelper::Parse(mDamageMin, data.value, converter);
      HOLGEN_WARN_AND_RETURN_IF(!res, false, "Could not json-parse Weapon.damageMin field");
    } else if (0 == strcmp("damageMax", name)) {
      auto res = JsonHelper::Parse(mDamageMax, data.value, converter);
      HOLGEN_WARN_AND_RETURN_IF(!res, false, "Could not json-parse Weapon.damageMax field");
    } else if (0 == strcmp("GetAverageDamage", name)) {
      auto res = JsonHelper::Parse(mLuaFuncHandle_GetAverageDamage, data.value, converter);
      HOLGEN_WARN_AND_RETURN_IF(!res, false, "Could not json-parse Weapon.GetAverageDamage");
    } else {
      HOLGEN_WARN("Unexpected entry in json when parsing Weapon: {}", name);
    }
  }
  return true;
}

void Weapon::PushToLua(lua_State *luaState) const {
  lua_newtable(luaState);
  lua_pushstring(luaState, "p");
  lua_pushlightuserdata(luaState, (void *) this);
  lua_settable(luaState, -3);
  lua_getglobal(luaState, "WeaponMeta");
  lua_setmetatable(luaState, -2);
}

void Weapon::PushGlobalToLua(lua_State *luaState, const char *name) const {
  PushToLua(luaState);
  lua_setglobal(luaState, name);
}

Weapon *Weapon::ReadFromLua(lua_State *luaState, int32_t idx) {
  lua_pushstring(luaState, "p");
  lua_gettable(luaState, idx - 1);
  auto ptr = (Weapon *) lua_touserdata(luaState, -1);
  lua_pop(luaState, 1);
  return ptr;
}

int Weapon::IndexMetaMethod(lua_State *luaState) {
  auto instance = Weapon::ReadFromLua(luaState, -2);
  const char *key = lua_tostring(luaState, -1);
  if (0 == strcmp("id", key)) {
    LuaHelper::Push(instance->mId, luaState);
  } else if (0 == strcmp("damageMin", key)) {
    LuaHelper::Push(instance->mDamageMin, luaState);
  } else if (0 == strcmp("damageMax", key)) {
    LuaHelper::Push(instance->mDamageMax, luaState);
  } else if (0 == strcmp("Initialize", key)) {
    lua_pushcfunction(luaState, [](lua_State *lsInner) {
      auto instance = Weapon::ReadFromLua(lsInner, -1);
      instance->Initialize();
      return 0;
    });
  } else if (0 == strcmp("GetDamage", key)) {
    lua_pushcfunction(luaState, [](lua_State *lsInner) {
      auto instance = Weapon::ReadFromLua(lsInner, -1);
      auto result = instance->GetDamage();
      LuaHelper::Push(result, lsInner);
      return 1;
    });
  } else {
    HOLGEN_WARN("Unexpected lua field: Weapon.{}", key);
    return 0;
  }
  return 1;
}

int Weapon::NewIndexMetaMethod(lua_State *luaState) {
  auto instance = Weapon::ReadFromLua(luaState, -3);
  const char *key = lua_tostring(luaState, -2);
  if (0 == strcmp("id", key)) {
    LuaHelper::Read(instance->mId, luaState, -1);
  } else if (0 == strcmp("damageMin", key)) {
    LuaHelper::Read(instance->mDamageMin, luaState, -1);
  } else if (0 == strcmp("damageMax", key)) {
    LuaHelper::Read(instance->mDamageMax, luaState, -1);
  } else {
    HOLGEN_WARN("Unexpected lua field: Weapon.{}", key);
  }
  return 0;
}

void Weapon::CreateLuaMetatable(lua_State *luaState) {
  lua_newtable(luaState);
  lua_pushstring(luaState, "__index");
  lua_pushcfunction(luaState, Weapon::IndexMetaMethod);
  lua_settable(luaState, -3);
  lua_pushstring(luaState, "__newindex");
  lua_pushcfunction(luaState, Weapon::NewIndexMetaMethod);
  lua_settable(luaState, -3);
  lua_setglobal(luaState, "WeaponMeta");
}
}
