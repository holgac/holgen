// This file is generated by holgen. Do not modify manually.
#include "TestStaticEventPublisher.h"

#include <cstring>
#include <lua.hpp>
#include "LuaHelper.h"

namespace holgen_blackbox_test {
const std::string &TestStaticEventPublisher::GetName() const {
  return mName;
}

std::string &TestStaticEventPublisher::GetName() {
  return mName;
}

void TestStaticEventPublisher::SetName(const std::string &val) {
  mName = val;
}

void TestStaticEventPublisher::OnEvent1(lua_State *luaState, const int val) {
  lua_getglobal(luaState, "TestStaticEventPublisher");
  if (lua_isnil(luaState, -1)) {
    HOLGEN_WARN("Function table TestStaticEventPublisher not found when calling OnEvent1");
    lua_pop(luaState, 1);
    return void();
  }
  lua_pushstring(luaState, "OnEvent1");
  lua_gettable(luaState, -2);
  if (lua_isnil(luaState, -1)) {
    HOLGEN_WARN("Calling undefined OnEvent1 function in {}", "TestStaticEventPublisher");
    lua_pop(luaState, 1);
    return void();
  }
  lua_copy(luaState, -1, -2);
  lua_pop(luaState, 1);
  LuaHelper::Push<false>(val, luaState);
  lua_call(luaState, 1, 0);
}

std::map<std::string, int> TestStaticEventPublisher::OnEvent2(lua_State *luaState) {
  lua_getglobal(luaState, "TestStaticEventPublisher");
  if (lua_isnil(luaState, -1)) {
    HOLGEN_WARN("Function table TestStaticEventPublisher not found when calling OnEvent2");
    lua_pop(luaState, 1);
    return {};
  }
  lua_pushstring(luaState, "OnEvent2");
  lua_gettable(luaState, -2);
  if (lua_isnil(luaState, -1)) {
    HOLGEN_WARN("Calling undefined OnEvent2 function in {}", "TestStaticEventPublisher");
    lua_pop(luaState, 1);
    return {};
  }
  lua_copy(luaState, -1, -2);
  lua_pop(luaState, 1);
  lua_call(luaState, 0, 1);
  std::map<std::string, int> result;
  LuaHelper::Read(result, luaState, -1);
  lua_pop(luaState, 1);
  return result;
}

void TestStaticEventPublisher::RegisterSubscriber(lua_State *luaState, const std::function<void(lua_State *)> &subscriber) {
  lua_getglobal(luaState, "TestStaticEventPublisher");
  if (lua_isnil(luaState, -1)) {
    HOLGEN_WARN("Function table TestStaticEventPublisher not found when calling RegisterSubscriber");
    lua_pop(luaState, 1);
    return void();
  }
  lua_pushstring(luaState, "RegisterSubscriber");
  lua_gettable(luaState, -2);
  if (lua_isnil(luaState, -1)) {
    HOLGEN_WARN("Calling undefined RegisterSubscriber function in {}", "TestStaticEventPublisher");
    lua_pop(luaState, 1);
    return void();
  }
  lua_copy(luaState, -1, -2);
  lua_pop(luaState, 1);
  subscriber(luaState);
  lua_call(luaState, 1, 0);
}

void TestStaticEventPublisher::UnregisterSubscriber(lua_State *luaState, const std::function<void(lua_State *)> &subscriber) {
  lua_getglobal(luaState, "TestStaticEventPublisher");
  if (lua_isnil(luaState, -1)) {
    HOLGEN_WARN("Function table TestStaticEventPublisher not found when calling UnregisterSubscriber");
    lua_pop(luaState, 1);
    return void();
  }
  lua_pushstring(luaState, "UnregisterSubscriber");
  lua_gettable(luaState, -2);
  if (lua_isnil(luaState, -1)) {
    HOLGEN_WARN("Calling undefined UnregisterSubscriber function in {}", "TestStaticEventPublisher");
    lua_pop(luaState, 1);
    return void();
  }
  lua_copy(luaState, -1, -2);
  lua_pop(luaState, 1);
  subscriber(luaState);
  lua_call(luaState, 1, 0);
}

void TestStaticEventPublisher::UnregisterSubscriberByName(lua_State *luaState, const std::string &subscriberName) {
  lua_getglobal(luaState, "TestStaticEventPublisher");
  if (lua_isnil(luaState, -1)) {
    HOLGEN_WARN("Function table TestStaticEventPublisher not found when calling UnregisterSubscriberByName");
    lua_pop(luaState, 1);
    return void();
  }
  lua_pushstring(luaState, "UnregisterSubscriberByName");
  lua_gettable(luaState, -2);
  if (lua_isnil(luaState, -1)) {
    HOLGEN_WARN("Calling undefined UnregisterSubscriberByName function in {}", "TestStaticEventPublisher");
    lua_pop(luaState, 1);
    return void();
  }
  lua_copy(luaState, -1, -2);
  lua_pop(luaState, 1);
  LuaHelper::Push<false>(subscriberName, luaState);
  lua_call(luaState, 1, 0);
}

void TestStaticEventPublisher::ClearSubscribers(lua_State *luaState) {
  lua_getglobal(luaState, "TestStaticEventPublisher");
  if (lua_isnil(luaState, -1)) {
    HOLGEN_WARN("Function table TestStaticEventPublisher not found when calling ClearSubscribers");
    lua_pop(luaState, 1);
    return void();
  }
  lua_pushstring(luaState, "ClearSubscribers");
  lua_gettable(luaState, -2);
  if (lua_isnil(luaState, -1)) {
    HOLGEN_WARN("Calling undefined ClearSubscribers function in {}", "TestStaticEventPublisher");
    lua_pop(luaState, 1);
    return void();
  }
  lua_copy(luaState, -1, -2);
  lua_pop(luaState, 1);
  lua_call(luaState, 0, 0);
}

bool TestStaticEventPublisher::operator==(const TestStaticEventPublisher &rhs) const {
  return !(
      mName != rhs.mName
  );
}

void TestStaticEventPublisher::PushToLua(lua_State *luaState) const {
  lua_newtable(luaState);
  lua_pushstring(luaState, "p");
  lua_pushlightuserdata(luaState, (void *) this);
  lua_settable(luaState, -3);
  lua_pushstring(luaState, "c");
  lua_pushlightuserdata(luaState, &CLASS_NAME);
  lua_settable(luaState, -3);
  lua_getglobal(luaState, "TestStaticEventPublisher");
  lua_setmetatable(luaState, -2);
}

void TestStaticEventPublisher::PushMirrorToLua(lua_State *luaState) const {
  lua_newtable(luaState);
  lua_pushstring(luaState, "name");
  LuaHelper::Push<true>(mName, luaState);
  lua_settable(luaState, -3);
}

void TestStaticEventPublisher::PushGlobalToLua(lua_State *luaState, const char *name) const {
  PushToLua(luaState);
  lua_setglobal(luaState, name);
}

TestStaticEventPublisher *TestStaticEventPublisher::ReadProxyFromLua(lua_State *luaState, int32_t idx) {
  lua_pushstring(luaState, "c");
  lua_gettable(luaState, idx - 1);
  if (!lua_isuserdata(luaState, -1)) {
    HOLGEN_WARN("Proxy object does not contain the correct metadata!");
    return nullptr;
  }
  auto className = *static_cast<const char**>(lua_touserdata(luaState, -1));
  lua_pop(luaState, 1);
  HOLGEN_WARN_AND_RETURN_IF(className != CLASS_NAME, nullptr, "Received {} instance when expecting TestStaticEventPublisher", className);
  lua_pushstring(luaState, "p");
  lua_gettable(luaState, idx - 1);
  auto ptr = (TestStaticEventPublisher *) lua_touserdata(luaState, -1);
  lua_pop(luaState, 1);
  return ptr;
}

TestStaticEventPublisher TestStaticEventPublisher::ReadMirrorFromLua(lua_State *luaState, int32_t idx) {
  auto result = TestStaticEventPublisher{};
  lua_pushvalue(luaState, idx);
  lua_pushnil(luaState);
  while (lua_next(luaState, -2)) {
    auto key = lua_tostring(luaState, -2);
    if (0 == strcmp("name", key)) {
      LuaHelper::Read(result.mName, luaState, -1);
      lua_pop(luaState, 1);
    } else {
      HOLGEN_WARN("Unexpected lua field: TestStaticEventPublisher.{}", key);
      lua_pop(luaState, 1);
    }
  }
  lua_pop(luaState, 1);
  return result;
}
}
