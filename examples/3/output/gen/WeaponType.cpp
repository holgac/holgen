// This file is generated by holgen. Do not modify manually.
#include "WeaponType.h"

#include <lua.hpp>
#include <rapidjson/document.h>
#include "Converter.h"
#include "JsonHelper.h"
#include "LuaHelper.h"

namespace ex3_schemas {
WeaponType::WeaponType(WeaponType::UnderlyingType value) :
    mValue(value) {
}

WeaponType::WeaponType(Entry value) :
    mValue(UnderlyingType(value)) {
}

WeaponType::Entry WeaponType::GetValue() const {
  return Entry(mValue);
}

WeaponType WeaponType::FromString(std::string_view str) {
  if (str == "Sword") {
    return WeaponType(WeaponType::Sword);
  } else if (str == "Bow") {
    return WeaponType(WeaponType::Bow);
  } else {
    HOLGEN_WARN("{} is not a valid WeaponType, returning invalid", str);
    return WeaponType{};
  }
}

const char *WeaponType::ToString() const {
  switch (mValue) {
    case WeaponType::Sword:
      return "Sword";
    case WeaponType::Bow:
      return "Bow";
    default:
      return "INVALID";
  }
}

WeaponType &WeaponType::operator=(UnderlyingType rhs) {
  mValue = rhs;
  return *this;
}

bool WeaponType::operator==(UnderlyingType rhs) const {
  return mValue == rhs;
}

bool WeaponType::operator==(const WeaponType &rhs) const {
  return mValue == rhs.mValue;
}

bool WeaponType::operator!=(UnderlyingType rhs) const {
  return mValue != rhs;
}

bool WeaponType::operator!=(const WeaponType &rhs) const {
  return mValue != rhs.mValue;
}

bool WeaponType::operator<(UnderlyingType rhs) const {
  return mValue < rhs;
}

bool WeaponType::operator<(const WeaponType &rhs) const {
  return mValue < rhs.mValue;
}

bool WeaponType::ParseJson(const rapidjson::Value &json, const Converter &converter) {
  if (json.IsString()) {
    *this = WeaponType::FromString(std::string_view(json.GetString(), json.GetStringLength()));
  } else if (json.IsInt64()) {
    *this = WeaponType(json.GetInt64());
  } else {
    *this = WeaponType{};
    HOLGEN_WARN("Could not json-parse WeaponType enum: invalid json type");
    return false;
  }
  return true;
}

void WeaponType::PushToLua(lua_State *luaState) const {
  LuaHelper::Push(mValue, luaState, true);
}

void WeaponType::PushMirrorToLua(lua_State *luaState) const {
  LuaHelper::Push(mValue, luaState, true);
}

WeaponType WeaponType::ReadMirrorFromLua(lua_State *luaState, int32_t idx) {
  auto typ = lua_type(luaState, idx);
  if (typ == LUA_TSTRING) {
    return FromString(lua_tostring(luaState, idx));
  } else if (typ == LUA_TNUMBER) {
    return WeaponType(lua_tonumber(luaState, idx));
  } else {
    HOLGEN_WARN("Unexpected type when parsing WeaponType: {}", lua_typename(luaState, typ));
    return WeaponType{};
  }
}

void WeaponType::PushEnumToLua(lua_State *luaState) {
  lua_newtable(luaState);
  lua_pushstring(luaState, "Sword");
  lua_pushnumber(luaState, 0);
  lua_settable(luaState, -3);
  lua_pushstring(luaState, "Bow");
  lua_pushnumber(luaState, 1);
  lua_settable(luaState, -3);
  lua_pushstring(luaState, "Invalid");
  lua_pushnumber(luaState, 2);
  lua_settable(luaState, -3);
  lua_pushstring(luaState, "Sword");
  lua_rawseti(luaState, -2, 0);
  lua_pushstring(luaState, "Bow");
  lua_rawseti(luaState, -2, 1);
  lua_pushstring(luaState, "Invalid");
  lua_rawseti(luaState, -2, 2);
  lua_setglobal(luaState, "WeaponType");
}
}
