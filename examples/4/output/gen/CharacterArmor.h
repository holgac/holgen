// This file is generated by holgen. Do not modify manually.
#pragma once

#include "../holgen.h"
#include <cstdint>
#include <rapidjson/fwd.h>

struct lua_State;
namespace ex4_schemas {
  class Armor;
  class Converter;
}
namespace ex4_schemas {
// Defined in 4/schemas/dataManager.hsc
class CharacterArmor {
public:
  CharacterArmor() = default;
  CharacterArmor(const CharacterArmor &rhs) = default;
  CharacterArmor(CharacterArmor &&rhs) noexcept = default;
  ~CharacterArmor() = default;
  float GetDirtAmount() const;
  uint32_t GetArmorId() const;
  const Armor *GetArmor() const;
  Armor *GetArmor();
  void SetDirtAmount(float val);
  void SetArmorId(uint32_t val);
  bool operator==(const CharacterArmor &rhs) const;
  bool ParseJson(const rapidjson::Value &json, const Converter &converter);
  rapidjson::Value DumpJson(rapidjson::Document &doc) const;
  void PushToLua(lua_State *luaState) const;
  void PushMirrorToLua(lua_State *luaState) const;
  void PushGlobalToLua(lua_State *luaState, const char *name) const;
  /*
   * This only works with negative indices
   * Reads proxy object (a table with a metatable and an embedded pointer or an index)
   */
  static CharacterArmor *ReadProxyFromLua(lua_State *luaState, int32_t idx);
  /*
   * This only works with negative indices
   * Reads a mirror object (a table with entries that mirror the c++ data structure)
   */
  static CharacterArmor ReadMirrorFromLua(lua_State *luaState, int32_t idx);
  static void CreateLuaMetatable(lua_State *luaState);
  CharacterArmor &operator=(const CharacterArmor &rhs) = default;
  CharacterArmor &operator=(CharacterArmor &&rhs) noexcept = default;
  inline static const char *CLASS_NAME = "CharacterArmor";
private:
  static int NewIndexMetaMethod(lua_State *luaState);
  static int IndexMetaMethod(lua_State *luaState);
  float mDirtAmount = 0;
  uint32_t mArmorId = -1;
};
}
