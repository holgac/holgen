// This file is generated by holgen. Do not modify manually.
#pragma once

#include "../holgen.h"
#include <cstdint>
#include <rapidjson/fwd.h>
#include "TestLuaFuncTable.h"
#include "TestLuaFuncTableStatic.h"
#include "TestLuaFuncTableWithSourceTable.h"

struct lua_State;
namespace holgen_blackbox_test {
  class Converter;
}
namespace holgen_blackbox_test {
// Defined in tests/blackbox/schemas/testlua.hsc
class TestLuaFuncTableContainer {
public:
  TestLuaFuncTableContainer() = default;
  TestLuaFuncTableContainer(const TestLuaFuncTableContainer &rhs) = default;
  TestLuaFuncTableContainer(TestLuaFuncTableContainer &&rhs) noexcept = default;
  ~TestLuaFuncTableContainer() = default;
  bool operator==(const TestLuaFuncTableContainer &rhs) const;
  int32_t GetField() const;
  const TestLuaFuncTable &GetScript1() const;
  TestLuaFuncTable &GetScript1();
  const TestLuaFuncTable &GetScript2() const;
  TestLuaFuncTable &GetScript2();
  const TestLuaFuncTableWithSourceTable &GetScriptWithSourceTable1() const;
  TestLuaFuncTableWithSourceTable &GetScriptWithSourceTable1();
  const TestLuaFuncTableWithSourceTable &GetScriptWithSourceTable2() const;
  TestLuaFuncTableWithSourceTable &GetScriptWithSourceTable2();
  const TestLuaFuncTableStatic &GetStaticScript1() const;
  TestLuaFuncTableStatic &GetStaticScript1();
  const TestLuaFuncTableStatic &GetStaticScript2() const;
  TestLuaFuncTableStatic &GetStaticScript2();
  void SetField(int32_t val);
  void SetScript1(const TestLuaFuncTable &val);
  void SetScript2(const TestLuaFuncTable &val);
  void SetScriptWithSourceTable1(const TestLuaFuncTableWithSourceTable &val);
  void SetScriptWithSourceTable2(const TestLuaFuncTableWithSourceTable &val);
  void SetStaticScript1(const TestLuaFuncTableStatic &val);
  void SetStaticScript2(const TestLuaFuncTableStatic &val);
  bool ParseJson(const rapidjson::Value &json, const Converter &converter);
  void PushToLua(lua_State *luaState) const;
  void PushMirrorToLua(lua_State *luaState) const;
  void PushGlobalToLua(lua_State *luaState, const char *name) const;
  /*
   * This only works with negative indices
   * Reads proxy object (a table with a metatable and an embedded pointer or an index)
   */
  static TestLuaFuncTableContainer *ReadProxyFromLua(lua_State *luaState, int32_t idx);
  /*
   * This only works with negative indices
   * Reads a mirror object (a table with entries that mirror the c++ data structure)
   */
  static TestLuaFuncTableContainer ReadMirrorFromLua(lua_State *luaState, int32_t idx);
  static void CreateLuaMetatable(lua_State *luaState);
  TestLuaFuncTableContainer &operator=(const TestLuaFuncTableContainer &rhs) = default;
  TestLuaFuncTableContainer &operator=(TestLuaFuncTableContainer &&rhs) noexcept = default;
  inline static const char *CLASS_NAME = "TestLuaFuncTableContainer";
private:
  static int NewIndexMetaMethod(lua_State *luaState);
  static int IndexMetaMethod(lua_State *luaState);
  int32_t mField;
  TestLuaFuncTable mScript1;
  TestLuaFuncTable mScript2;
  TestLuaFuncTableWithSourceTable mScriptWithSourceTable1;
  TestLuaFuncTableWithSourceTable mScriptWithSourceTable2;
  TestLuaFuncTableStatic mStaticScript1;
  TestLuaFuncTableStatic mStaticScript2;
};
}
