// This file is generated by holgen. Do not modify manually.
#include "TestStructArrayCustomData1.h"

#include <cmath>
#include <lua.hpp>
#include <rapidjson/document.h>
#include "Converter.h"
#include "JsonHelper.h"
#include "LuaHelper.h"

namespace holgen_blackbox_test {
bool TestStructArrayCustomData1::operator==(const TestStructArrayCustomData1 &rhs) const {
  return !(
      mF1 != rhs.mF1 ||
      std::fabs(mF2 - rhs.mF2) >= 0.00001 ||
      mF3 != rhs.mF3
  );
}

uint32_t TestStructArrayCustomData1::GetF1() const {
  return mF1;
}

float TestStructArrayCustomData1::GetF2() const {
  return mF2;
}

uint64_t TestStructArrayCustomData1::GetF3() const {
  return mF3;
}

void TestStructArrayCustomData1::SetF1(uint32_t val) {
  mF1 = val;
}

void TestStructArrayCustomData1::SetF2(float val) {
  mF2 = val;
}

void TestStructArrayCustomData1::SetF3(uint64_t val) {
  mF3 = val;
}

bool TestStructArrayCustomData1::ParseJson(const rapidjson::Value &json, const Converter &converter) {
  HOLGEN_WARN_AND_RETURN_IF(!json.IsObject(), false, "Found non-object json element when parsing TestStructArrayCustomData1");
  for (const auto &data: json.GetObject()) {
    const auto &name = data.name.GetString();
    if (0 == strcmp("f1", name)) {
      auto res = JsonHelper::Parse(mF1, data.value, converter);
      HOLGEN_WARN_AND_RETURN_IF(!res, false, "Could not json-parse TestStructArrayCustomData1.f1 field");
    } else if (0 == strcmp("f2", name)) {
      auto res = JsonHelper::Parse(mF2, data.value, converter);
      HOLGEN_WARN_AND_RETURN_IF(!res, false, "Could not json-parse TestStructArrayCustomData1.f2 field");
    } else if (0 == strcmp("f3", name)) {
      auto res = JsonHelper::Parse(mF3, data.value, converter);
      HOLGEN_WARN_AND_RETURN_IF(!res, false, "Could not json-parse TestStructArrayCustomData1.f3 field");
    } else {
      HOLGEN_WARN("Unexpected entry in json when parsing TestStructArrayCustomData1: {}", name);
    }
  }
  return true;
}

void TestStructArrayCustomData1::PushToLua(lua_State *luaState) const {
  lua_newtable(luaState);
  lua_pushstring(luaState, "p");
  lua_pushlightuserdata(luaState, (void *) this);
  lua_settable(luaState, -3);
  lua_getglobal(luaState, "TestStructArrayCustomData1Meta");
  lua_setmetatable(luaState, -2);
}

void TestStructArrayCustomData1::PushMirrorToLua(lua_State *luaState) const {
  lua_newtable(luaState);
  lua_pushstring(luaState, "f1");
  LuaHelper::Push(mF1, luaState, true);
  lua_settable(luaState, -3);
  lua_pushstring(luaState, "f2");
  LuaHelper::Push(mF2, luaState, true);
  lua_settable(luaState, -3);
  lua_pushstring(luaState, "f3");
  LuaHelper::Push(mF3, luaState, true);
  lua_settable(luaState, -3);
}

void TestStructArrayCustomData1::PushGlobalToLua(lua_State *luaState, const char *name) const {
  PushToLua(luaState);
  lua_setglobal(luaState, name);
}

TestStructArrayCustomData1 *TestStructArrayCustomData1::ReadProxyFromLua(lua_State *luaState, int32_t idx) {
  lua_pushstring(luaState, "p");
  lua_gettable(luaState, idx - 1);
  auto ptr = (TestStructArrayCustomData1 *) lua_touserdata(luaState, -1);
  lua_pop(luaState, 1);
  return ptr;
}

TestStructArrayCustomData1 TestStructArrayCustomData1::ReadMirrorFromLua(lua_State *luaState, int32_t idx) {
  auto result = TestStructArrayCustomData1{};
  lua_pushvalue(luaState, idx);
  lua_pushnil(luaState);
  while (lua_next(luaState, -2)) {
    auto key = lua_tostring(luaState, -2);
    if (0 == strcmp("f1", key)) {
      LuaHelper::Read(result.mF1, luaState, -1);
      lua_pop(luaState, 1);
    } else if (0 == strcmp("f2", key)) {
      LuaHelper::Read(result.mF2, luaState, -1);
      lua_pop(luaState, 1);
    } else if (0 == strcmp("f3", key)) {
      LuaHelper::Read(result.mF3, luaState, -1);
      lua_pop(luaState, 1);
    } else {
      HOLGEN_WARN("Unexpected lua field: TestStructArrayCustomData1.{}", key);
      lua_pop(luaState, 1);
    }
  }
  lua_pop(luaState, 1);
  return result;
}

int TestStructArrayCustomData1::NewIndexMetaMethod(lua_State *luaState) {
  auto instance = TestStructArrayCustomData1::ReadProxyFromLua(luaState, -3);
  const char *key = lua_tostring(luaState, -2);
  if (0 == strcmp("f1", key)) {
    LuaHelper::Read(instance->mF1, luaState, -1);
  } else if (0 == strcmp("f2", key)) {
    LuaHelper::Read(instance->mF2, luaState, -1);
  } else if (0 == strcmp("f3", key)) {
    LuaHelper::Read(instance->mF3, luaState, -1);
  } else {
    HOLGEN_WARN("Unexpected lua field: TestStructArrayCustomData1.{}", key);
  }
  return 0;
}

void TestStructArrayCustomData1::CreateLuaMetatable(lua_State *luaState) {
  lua_newtable(luaState);
  lua_pushstring(luaState, "__index");
  lua_pushcfunction(luaState, TestStructArrayCustomData1::IndexMetaMethod);
  lua_settable(luaState, -3);
  lua_pushstring(luaState, "__newindex");
  lua_pushcfunction(luaState, TestStructArrayCustomData1::NewIndexMetaMethod);
  lua_settable(luaState, -3);
  lua_setglobal(luaState, "TestStructArrayCustomData1Meta");
}

int TestStructArrayCustomData1::IndexMetaMethod(lua_State *luaState) {
  auto instance = TestStructArrayCustomData1::ReadProxyFromLua(luaState, -2);
  const char *key = lua_tostring(luaState, -1);
  HOLGEN_WARN_AND_RETURN_IF(!instance, 0, "Requesting for TestStructArrayCustomData1.{} with an invalid lua proxy object!", key);
  if (0 == strcmp("f1", key)) {
    LuaHelper::Push(instance->mF1, luaState, false);
  } else if (0 == strcmp("f2", key)) {
    LuaHelper::Push(instance->mF2, luaState, false);
  } else if (0 == strcmp("f3", key)) {
    LuaHelper::Push(instance->mF3, luaState, false);
  } else {
    HOLGEN_WARN("Unexpected lua field: TestStructArrayCustomData1.{}", key);
    return 0;
  }
  return 1;
}
}
