#include <gtest/gtest.h>
#include "generator/plugins/helpers/GlobalPointerPlugin.h"
#include "generator/CodeGenerator.h"
#include "Helpers.h"

using namespace holgen;

namespace {

  TEST(GeneratorGlobalPointerTest, HeaderAndSource) {
    ProjectDefinition pd;
    TranslatedProject tp(pd);
    TranslatorSettings translatorSettings{
        .mNamespace = "generator_test_namespace",
    };
    GlobalPointerPlugin ggp(tp, translatorSettings);
    ggp.Run();
    GeneratorSettings generatorSettings{
        .mCMakeTarget = "generator_test_cmake",
        .mConfigHeader = "",
    };
    CodeGenerator generator(generatorSettings);
    auto files = helpers::MapByName(generator.Generate(tp));
    helpers::ExpectGeneratedContent(
        files["gen/GlobalPointer.h"],
        FileType::CppHeader,
        "gen/GlobalPointer.h",
        R"R(
// This file is generated by holgen. Do not modify manually.
#pragma once

#include "../holgen.h"
namespace generator_test_namespace {
template <typename T>
class GlobalPointer {
public:
  static T *GetInstance() {
    return mInstance;
  }
  static void SetInstance(T *ptr) {
    mInstance = ptr;
  }
private:
  inline static T *mInstance = nullptr;
};
}
)R"
    );
    // TODO: test helpers
  }
}
