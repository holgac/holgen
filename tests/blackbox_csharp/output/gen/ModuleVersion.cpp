// This file is generated by holgen. Do not modify manually.
#include "ModuleVersion.h"

namespace holgen_blackbox_csharp {
uint16_t ModuleVersion::GetMajor() const {
  return mMajor;
}

uint16_t ModuleVersion::GetMinor() const {
  return mMinor;
}

uint32_t ModuleVersion::GetRevision() const {
  return mRevision;
}

void ModuleVersion::SetMajor(uint16_t val) {
  mMajor = val;
}

void ModuleVersion::SetMinor(uint16_t val) {
  mMinor = val;
}

void ModuleVersion::SetRevision(uint32_t val) {
  mRevision = val;
}

ModuleVersion ModuleVersion::Construct(const uint16_t major, const uint16_t minor, const uint32_t revision) {
  return ModuleVersion(major, minor, revision);
}

bool ModuleVersion::operator==(const ModuleVersion &rhs) const {
  return !(
      mMajor != rhs.mMajor ||
      mMinor != rhs.mMinor ||
      mRevision != rhs.mRevision
  );
}
}
extern "C" {
  holgen_blackbox_csharp::ModuleVersion holgen_blackbox_csharp_ModuleVersion_Construct(const uint16_t major, const uint16_t minor, const uint32_t revision) {
    return holgen_blackbox_csharp::ModuleVersion::Construct(major, minor, revision);
  }
  holgen_blackbox_csharp::ModuleVersion holgen_blackbox_csharp_ModuleVersion_ConstructDouble(const uint16_t major, const uint16_t minor, const uint32_t revision) {
    return holgen_blackbox_csharp::ModuleVersion::ConstructDouble(major, minor, revision);
  }
  uint32_t holgen_blackbox_csharp_ModuleVersion_GetSum(const holgen_blackbox_csharp::ModuleVersion *instance) {
    return instance->GetSum();
  }
  void holgen_blackbox_csharp_ModuleVersion_BumpRevision(holgen_blackbox_csharp::ModuleVersion *instance) {
    instance->BumpRevision();
  }
  holgen_blackbox_csharp::ModuleVersion holgen_blackbox_csharp_ModuleVersion_SumOfSelfAnd(holgen_blackbox_csharp::ModuleVersion *instance, const holgen_blackbox_csharp::ModuleVersion *v1, const holgen_blackbox_csharp::ModuleVersion *v2) {
    return instance->SumOfSelfAnd(*v1, *v2);
  }
  holgen_blackbox_csharp::ModuleVersion *holgen_blackbox_csharp_ModuleVersion_GetNextRevisions(holgen_blackbox_csharp::ModuleVersion *instance, const uint64_t count, size_t *holgenReturnValueHolgenSize, holgen_blackbox_csharp::DeferredDeleter **holgenDeferredDeleter) {
    using DeferredDeleter = holgen_blackbox_csharp::DeferredDeleter;
    constexpr size_t BufferSize = sizeof(DeferredDeleter) + (sizeof(DeferredDeleter)%8) + sizeof(std::vector<holgen_blackbox_csharp::ModuleVersion> );
    constexpr size_t ObjectOffset = sizeof(DeferredDeleter) + (sizeof(DeferredDeleter)%8);
    auto buffer = new char[BufferSize];
    auto holgenRes = new (&buffer[ObjectOffset]) std::vector<holgen_blackbox_csharp::ModuleVersion> (std::move(instance->GetNextRevisions(count)));
    auto deferredDeleter = new (buffer) DeferredDeleter([](void* ptr) { 
      static_cast<std::vector<holgen_blackbox_csharp::ModuleVersion> *>(ptr)->~vector();
    });
    *holgenReturnValueHolgenSize = holgenRes->size();
    *holgenDeferredDeleter = deferredDeleter;
    return holgenRes->data();
  }
  holgen_blackbox_csharp::ModuleVersion *holgen_blackbox_csharp_ModuleVersion_GetNextThreeRevisions(holgen_blackbox_csharp::ModuleVersion *instance, holgen_blackbox_csharp::DeferredDeleter **holgenDeferredDeleter) {
    using DeferredDeleter = holgen_blackbox_csharp::DeferredDeleter;
    constexpr size_t BufferSize = sizeof(DeferredDeleter) + (sizeof(DeferredDeleter)%8) + sizeof(std::array<holgen_blackbox_csharp::ModuleVersion, 3> );
    constexpr size_t ObjectOffset = sizeof(DeferredDeleter) + (sizeof(DeferredDeleter)%8);
    auto buffer = new char[BufferSize];
    auto holgenRes = new (&buffer[ObjectOffset]) std::array<holgen_blackbox_csharp::ModuleVersion, 3> (instance->GetNextThreeRevisions());
    auto deferredDeleter = new (buffer) DeferredDeleter([](void* ptr) { 
      static_cast<std::array<holgen_blackbox_csharp::ModuleVersion, 3> *>(ptr)->~array();
    });
    *holgenDeferredDeleter = deferredDeleter;
    return holgenRes->data();
  }
  uint32_t *holgen_blackbox_csharp_ModuleVersion_GetDataAsVector(holgen_blackbox_csharp::ModuleVersion *instance, size_t *holgenReturnValueHolgenSize, holgen_blackbox_csharp::DeferredDeleter **holgenDeferredDeleter) {
    using DeferredDeleter = holgen_blackbox_csharp::DeferredDeleter;
    constexpr size_t BufferSize = sizeof(DeferredDeleter) + (sizeof(DeferredDeleter)%8) + sizeof(std::vector<uint32_t> );
    constexpr size_t ObjectOffset = sizeof(DeferredDeleter) + (sizeof(DeferredDeleter)%8);
    auto buffer = new char[BufferSize];
    auto holgenRes = new (&buffer[ObjectOffset]) std::vector<uint32_t> (std::move(instance->GetDataAsVector()));
    auto deferredDeleter = new (buffer) DeferredDeleter([](void* ptr) { 
      static_cast<std::vector<uint32_t> *>(ptr)->~vector();
    });
    *holgenReturnValueHolgenSize = holgenRes->size();
    *holgenDeferredDeleter = deferredDeleter;
    return holgenRes->data();
  }
  uint32_t *holgen_blackbox_csharp_ModuleVersion_GetDataAsArray(holgen_blackbox_csharp::ModuleVersion *instance, holgen_blackbox_csharp::DeferredDeleter **holgenDeferredDeleter) {
    using DeferredDeleter = holgen_blackbox_csharp::DeferredDeleter;
    constexpr size_t BufferSize = sizeof(DeferredDeleter) + (sizeof(DeferredDeleter)%8) + sizeof(std::array<uint32_t, 3> );
    constexpr size_t ObjectOffset = sizeof(DeferredDeleter) + (sizeof(DeferredDeleter)%8);
    auto buffer = new char[BufferSize];
    auto holgenRes = new (&buffer[ObjectOffset]) std::array<uint32_t, 3> (instance->GetDataAsArray());
    auto deferredDeleter = new (buffer) DeferredDeleter([](void* ptr) { 
      static_cast<std::array<uint32_t, 3> *>(ptr)->~array();
    });
    *holgenDeferredDeleter = deferredDeleter;
    return holgenRes->data();
  }
  int32_t *holgen_blackbox_csharp_ModuleVersion_GetDataAsSignedVector(holgen_blackbox_csharp::ModuleVersion *instance, size_t *holgenReturnValueHolgenSize, holgen_blackbox_csharp::DeferredDeleter **holgenDeferredDeleter) {
    using DeferredDeleter = holgen_blackbox_csharp::DeferredDeleter;
    constexpr size_t BufferSize = sizeof(DeferredDeleter) + (sizeof(DeferredDeleter)%8) + sizeof(std::vector<int32_t> );
    constexpr size_t ObjectOffset = sizeof(DeferredDeleter) + (sizeof(DeferredDeleter)%8);
    auto buffer = new char[BufferSize];
    auto holgenRes = new (&buffer[ObjectOffset]) std::vector<int32_t> (std::move(instance->GetDataAsSignedVector()));
    auto deferredDeleter = new (buffer) DeferredDeleter([](void* ptr) { 
      static_cast<std::vector<int32_t> *>(ptr)->~vector();
    });
    *holgenReturnValueHolgenSize = holgenRes->size();
    *holgenDeferredDeleter = deferredDeleter;
    return holgenRes->data();
  }
  holgen_blackbox_csharp::EnumTest *holgen_blackbox_csharp_ModuleVersion_GetEnums(holgen_blackbox_csharp::ModuleVersion *instance, holgen_blackbox_csharp::EnumTest *value, size_t valueHolgenSize, size_t *holgenReturnValueHolgenSize, holgen_blackbox_csharp::DeferredDeleter **holgenDeferredDeleter) {
    std::vector<holgen_blackbox_csharp::EnumTest > valueHolgenVector;
    valueHolgenVector.reserve(valueHolgenSize);
    for (size_t i = 0; i < valueHolgenSize; ++i) {
      valueHolgenVector.emplace_back(value[i]);
    }
    using DeferredDeleter = holgen_blackbox_csharp::DeferredDeleter;
    constexpr size_t BufferSize = sizeof(DeferredDeleter) + (sizeof(DeferredDeleter)%8) + sizeof(std::vector<holgen_blackbox_csharp::EnumTest> );
    constexpr size_t ObjectOffset = sizeof(DeferredDeleter) + (sizeof(DeferredDeleter)%8);
    auto buffer = new char[BufferSize];
    auto holgenRes = new (&buffer[ObjectOffset]) std::vector<holgen_blackbox_csharp::EnumTest> (std::move(instance->GetEnums(valueHolgenVector)));
    auto deferredDeleter = new (buffer) DeferredDeleter([](void* ptr) { 
      static_cast<std::vector<holgen_blackbox_csharp::EnumTest> *>(ptr)->~vector();
    });
    *holgenReturnValueHolgenSize = holgenRes->size();
    *holgenDeferredDeleter = deferredDeleter;
    return holgenRes->data();
  }
}
