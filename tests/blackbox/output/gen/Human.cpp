// This file is generated by holgen. Do not modify manually.
#include "Human.h"

#include <lua.hpp>
#include <rapidjson/document.h>
#include "Converter.h"
#include "GlobalPointer.h"
#include "HumanManager.h"
#include "JsonHelper.h"
#include "LuaHelper.h"

namespace holgen_blackbox_test {
bool Human::operator==(const Human &rhs) const {
  return
      mId == rhs.mId &&
      mName == rhs.mName;
}

uint32_t Human::GetId() const {
  return mId;
}

const std::string &Human::GetName() const {
  return mName;
}

std::string &Human::GetName() {
  return mName;
}

void Human::SetId(uint32_t val) {
  mId = val;
}

void Human::SetName(const std::string &val) {
  mName = val;
}

Human *Human::Get(uint32_t id) {
  return GlobalPointer<HumanManager>::GetInstance()->GetHuman(id);
}

Human *Human::GetFromName(const std::string &key) {
  return GlobalPointer<HumanManager>::GetInstance()->GetHumanFromName(key);
}

bool Human::ParseJson(const rapidjson::Value &json, const Converter &converter) {
  if (json.IsObject()) {
    for (const auto &data: json.GetObject()) {
      const auto &name = data.name.GetString();
      if (0 == strcmp("id", name)) {
        auto res = JsonHelper::Parse(mId, data.value, converter);
        HOLGEN_WARN_AND_RETURN_IF(!res, false, "Could not json-parse Human.id field");
      } else if (0 == strcmp("name", name)) {
        auto res = JsonHelper::Parse(mName, data.value, converter);
        HOLGEN_WARN_AND_RETURN_IF(!res, false, "Could not json-parse Human.name field");
      } else {
        HOLGEN_WARN("Unexpected entry in json when parsing Human: {}", name);
      }
    }
  } else {
    auto res = JsonHelper::Parse(mName, json, converter);
    HOLGEN_WARN_AND_RETURN_IF(!res, false, "Could not json-parse Human.name field");
  }
  return true;
}

void Human::PushToLua(lua_State *luaState) const {
  lua_newtable(luaState);
  lua_pushstring(luaState, "p");
  lua_pushlightuserdata(luaState, (void *) this);
  lua_settable(luaState, -3);
  lua_getglobal(luaState, "HumanMeta");
  lua_setmetatable(luaState, -2);
}

void Human::PushMirrorToLua(lua_State *luaState) const {
  lua_newtable(luaState);
  lua_pushstring(luaState, "id");
  LuaHelper::Push(mId, luaState);
  lua_settable(luaState, -3);
  lua_pushstring(luaState, "name");
  LuaHelper::Push(mName, luaState);
  lua_settable(luaState, -3);
}

void Human::PushGlobalToLua(lua_State *luaState, const char *name) const {
  PushToLua(luaState);
  lua_setglobal(luaState, name);
}

Human *Human::ReadProxyFromLua(lua_State *luaState, int32_t idx) {
  lua_pushstring(luaState, "p");
  lua_gettable(luaState, idx - 1);
  auto ptr = (Human *) lua_touserdata(luaState, -1);
  lua_pop(luaState, 1);
  return ptr;
}

Human Human::ReadMirrorFromLua(lua_State *luaState, int32_t idx) {
  auto result = Human{};
  lua_pushvalue(luaState, idx);
  lua_pushnil(luaState);
  while (lua_next(luaState, -2)) {
    auto key = lua_tostring(luaState, -2);
    if (0 == strcmp("id", key)) {
      LuaHelper::Read(result.mId, luaState, -1);
      lua_pop(luaState, 1);
    } else if (0 == strcmp("name", key)) {
      LuaHelper::Read(result.mName, luaState, -1);
      lua_pop(luaState, 1);
    } else {
      HOLGEN_WARN("Unexpected lua field: Human.{}", key);
      lua_pop(luaState, 1);
    }
  }
  lua_pop(luaState, 1);
  return result;
}

int Human::IndexMetaMethod(lua_State *luaState) {
  auto instance = Human::ReadProxyFromLua(luaState, -2);
  const char *key = lua_tostring(luaState, -1);
  if (0 == strcmp("id", key)) {
    LuaHelper::Push(instance->mId, luaState);
  } else if (0 == strcmp("name", key)) {
    LuaHelper::Push(instance->mName, luaState);
  } else {
    HOLGEN_WARN("Unexpected lua field: Human.{}", key);
    return 0;
  }
  return 1;
}

int Human::NewIndexMetaMethod(lua_State *luaState) {
  auto instance = Human::ReadProxyFromLua(luaState, -3);
  const char *key = lua_tostring(luaState, -2);
  if (0 == strcmp("id", key)) {
    LuaHelper::Read(instance->mId, luaState, -1);
  } else if (0 == strcmp("name", key)) {
    LuaHelper::Read(instance->mName, luaState, -1);
  } else {
    HOLGEN_WARN("Unexpected lua field: Human.{}", key);
  }
  return 0;
}

void Human::CreateLuaMetatable(lua_State *luaState) {
  lua_newtable(luaState);
  lua_pushstring(luaState, "__index");
  lua_pushcfunction(luaState, Human::IndexMetaMethod);
  lua_settable(luaState, -3);
  lua_pushstring(luaState, "__newindex");
  lua_pushcfunction(luaState, Human::NewIndexMetaMethod);
  lua_settable(luaState, -3);
  lua_setglobal(luaState, "HumanMeta");
}
}
