// This file is generated by holgen. Do not modify manually.
#pragma once

#include "../holgen.h"
#include <array>
#include <cstdint>
#include <format>
#include <rapidjson/fwd.h>

struct lua_State;
namespace ex3_schemas {
  class Converter;
}
namespace ex3_schemas {
class WeaponType {
public:
  using UnderlyingType=int64_t;
  enum Entry : UnderlyingType {
    Sword = 0,
    Bow = 1,
  };
  explicit WeaponType(UnderlyingType value = Invalid);
  WeaponType(Entry value);
  WeaponType::Entry GetValue() const;
  static WeaponType FromString(std::string_view str);
  const char *ToString() const;
  WeaponType &operator=(UnderlyingType rhs);
  bool operator==(UnderlyingType rhs) const;
  bool operator==(const WeaponType &rhs) const;
  bool operator!=(UnderlyingType rhs) const;
  bool operator!=(const WeaponType &rhs) const;
  bool operator<(UnderlyingType rhs) const;
  bool operator<(const WeaponType &rhs) const;
  constexpr static std::array<WeaponType::Entry, 2> GetEntries() {
    return std::array<WeaponType::Entry, 2>{Sword, Bow};
  }
  bool ParseJson(const rapidjson::Value &json, const Converter &converter);
  void PushToLua(lua_State *luaState) const;
  // This only works with negative indices
  static WeaponType ReadFromLua(lua_State *luaState, int32_t idx);
  static void PushEnumToLua(lua_State *luaState);
  inline static constexpr const UnderlyingType Invalid = 2;
private:
  UnderlyingType mValue;
};
}
namespace std {
template <>
struct hash<ex3_schemas::WeaponType> {
public:
  size_t operator()(const ex3_schemas::WeaponType &obj) const {
    return std::hash<ex3_schemas::WeaponType::UnderlyingType>()(obj.GetValue());
  }
};
}
namespace std {
template <>
struct formatter<ex3_schemas::WeaponType::Entry> : public formatter<string> {
public:
  template <typename FormatContext>
  auto format(const ex3_schemas::WeaponType::Entry &obj, FormatContext &ctx) const {
    return format_to(ctx.out(), "{}", ex3_schemas::WeaponType(obj).ToString());
  }
};
}
namespace std {
template <>
struct formatter<ex3_schemas::WeaponType> : public formatter<string> {
public:
  template <typename FormatContext>
  auto format(const ex3_schemas::WeaponType &obj, FormatContext &ctx) const {
    return format_to(ctx.out(), "{}", obj.ToString());
  }
};
}
