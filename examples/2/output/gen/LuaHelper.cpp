// This file is generated by holgen. Do not modify manually.
#include "LuaHelper.h"

#include "Armor.h"
#include "Character.h"
#include "Race.h"
#include "Weapon.h"

namespace ex2_schemas {
bool LuaHelper::Read(bool &data, lua_State *luaState, int32_t luaIndex) {
  HOLGEN_WARN_AND_RETURN_IF(!lua_isboolean(luaState, luaIndex), false, "Reading from lua failed! Expected bool, got {}.", lua_typename(luaState, luaIndex));
  data = lua_toboolean(luaState, luaIndex);
  return true;
}

bool LuaHelper::Read(double &data, lua_State *luaState, int32_t luaIndex) {
  HOLGEN_WARN_AND_RETURN_IF(!lua_isnumber(luaState, luaIndex), false, "Reading from lua failed! Expected double, got {}.", lua_typename(luaState, luaIndex));
  data = lua_tonumber(luaState, luaIndex);
  return true;
}

bool LuaHelper::Read(float &data, lua_State *luaState, int32_t luaIndex) {
  HOLGEN_WARN_AND_RETURN_IF(!lua_isnumber(luaState, luaIndex), false, "Reading from lua failed! Expected float, got {}.", lua_typename(luaState, luaIndex));
  data = lua_tonumber(luaState, luaIndex);
  return true;
}

bool LuaHelper::Read(int16_t &data, lua_State *luaState, int32_t luaIndex) {
  HOLGEN_WARN_AND_RETURN_IF(!lua_isnumber(luaState, luaIndex), false, "Reading from lua failed! Expected int16_t, got {}.", lua_typename(luaState, luaIndex));
  data = lua_tonumber(luaState, luaIndex);
  return true;
}

bool LuaHelper::Read(int32_t &data, lua_State *luaState, int32_t luaIndex) {
  HOLGEN_WARN_AND_RETURN_IF(!lua_isnumber(luaState, luaIndex), false, "Reading from lua failed! Expected int32_t, got {}.", lua_typename(luaState, luaIndex));
  data = lua_tonumber(luaState, luaIndex);
  return true;
}

bool LuaHelper::Read(int64_t &data, lua_State *luaState, int32_t luaIndex) {
  HOLGEN_WARN_AND_RETURN_IF(!lua_isnumber(luaState, luaIndex), false, "Reading from lua failed! Expected int64_t, got {}.", lua_typename(luaState, luaIndex));
  data = lua_tonumber(luaState, luaIndex);
  return true;
}

bool LuaHelper::Read(int8_t &data, lua_State *luaState, int32_t luaIndex) {
  HOLGEN_WARN_AND_RETURN_IF(!lua_isnumber(luaState, luaIndex), false, "Reading from lua failed! Expected int8_t, got {}.", lua_typename(luaState, luaIndex));
  data = lua_tonumber(luaState, luaIndex);
  return true;
}

bool LuaHelper::Read(std::string &data, lua_State *luaState, int32_t luaIndex) {
  HOLGEN_WARN_AND_RETURN_IF(!lua_isstring(luaState, luaIndex), false, "Reading from lua failed! Expected std::string, got {}.", lua_typename(luaState, luaIndex));
  data = lua_tostring(luaState, luaIndex);
  return true;
}

bool LuaHelper::Read(uint16_t &data, lua_State *luaState, int32_t luaIndex) {
  HOLGEN_WARN_AND_RETURN_IF(!lua_isnumber(luaState, luaIndex), false, "Reading from lua failed! Expected uint16_t, got {}.", lua_typename(luaState, luaIndex));
  data = lua_tonumber(luaState, luaIndex);
  return true;
}

bool LuaHelper::Read(uint32_t &data, lua_State *luaState, int32_t luaIndex) {
  HOLGEN_WARN_AND_RETURN_IF(!lua_isnumber(luaState, luaIndex), false, "Reading from lua failed! Expected uint32_t, got {}.", lua_typename(luaState, luaIndex));
  data = lua_tonumber(luaState, luaIndex);
  return true;
}

bool LuaHelper::Read(uint64_t &data, lua_State *luaState, int32_t luaIndex) {
  HOLGEN_WARN_AND_RETURN_IF(!lua_isnumber(luaState, luaIndex), false, "Reading from lua failed! Expected uint64_t, got {}.", lua_typename(luaState, luaIndex));
  data = lua_tonumber(luaState, luaIndex);
  return true;
}

bool LuaHelper::Read(uint8_t &data, lua_State *luaState, int32_t luaIndex) {
  HOLGEN_WARN_AND_RETURN_IF(!lua_isnumber(luaState, luaIndex), false, "Reading from lua failed! Expected uint8_t, got {}.", lua_typename(luaState, luaIndex));
  data = lua_tonumber(luaState, luaIndex);
  return true;
}

bool LuaHelper::Read(std::function<void(lua_State *)> &data, lua_State *luaState, int32_t luaIndex) {
  if (luaIndex < 0) {
    luaIndex = lua_gettop(luaState) + luaIndex + 1;
  }
  data = [luaIndex](lua_State *lsInner) {
    lua_pushvalue(lsInner, luaIndex);
  };
  return true;
}

void LuaHelper::CreateMetatables(lua_State *luaState) {
  Armor::CreateLuaMetatable(luaState);
  Character::CreateLuaMetatable(luaState);
  Weapon::CreateLuaMetatable(luaState);
  Race::PushEnumToLua(luaState);
}
}
