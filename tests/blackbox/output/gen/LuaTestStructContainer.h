// This file is generated by holgen. Do not modify manually.
#pragma once

#include "../holgen.h"
#include <vector>
#include <cstdint>
#include <map>
#include <string>
#include <rapidjson/fwd.h>

struct lua_State;
namespace holgen_blackbox_test {
  class Converter;
}
namespace holgen_blackbox_test {
class LuaTestStructContainer {
public:
  bool operator==(const LuaTestStructContainer &rhs) const;
  const std::vector<uint32_t> &GetTestVector() const;
  std::vector<uint32_t> &GetTestVector();
  const std::map<std::string, uint32_t> &GetTestMap() const;
  std::map<std::string, uint32_t> &GetTestMap();
  void SetTestVector(const std::vector<uint32_t> &val);
  void SetTestMap(const std::map<std::string, uint32_t> &val);
  uint32_t *AddTestVectorElem(uint32_t elem);
  const uint32_t *GetTestVectorElem(size_t idx) const;
  uint32_t *GetTestVectorElem(size_t idx);
  void DeleteTestVectorElem(size_t idx);
  size_t GetTestVectorElemCount() const;
  bool ParseJson(const rapidjson::Value &json, const Converter &converter);
  void PushToLua(lua_State *luaState) const;
  void PushGlobalToLua(lua_State *luaState, const char *name) const;
  // This only works with negative indices
  static LuaTestStructContainer *ReadFromLua(lua_State *luaState, int32_t idx);
  static void CreateLuaMetatable(lua_State *luaState);
private:
  static int IndexMetaMethod(lua_State *luaState);
  static int NewIndexMetaMethod(lua_State *luaState);
  std::vector<uint32_t> mTestVector;
  std::map<std::string, uint32_t> mTestMap;
};
}
