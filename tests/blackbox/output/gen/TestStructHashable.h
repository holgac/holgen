// This file is generated by holgen. Do not modify manually.
#pragma once

#include "../holgen.h"
#include <cstdint>
#include <rapidjson/fwd.h>

struct lua_State;
namespace holgen_blackbox_test {
  class Converter;
}
namespace holgen_blackbox_test {
// Defined in tests/blackbox/schemas/teststruct.hsc
class TestStructHashable {
public:
  TestStructHashable() = default;
  TestStructHashable(const TestStructHashable &rhs) = default;
  TestStructHashable(TestStructHashable &&rhs) noexcept = default;
  ~TestStructHashable() = default;
  uint32_t GetField1() const;
  uint32_t GetField2() const;
  void SetField1(uint32_t val);
  void SetField2(uint32_t val);
  uint64_t Hash() const;
  bool operator==(const TestStructHashable &rhs) const;
  bool ParseJson(const rapidjson::Value &json, const Converter &converter);
  rapidjson::Value DumpJson(rapidjson::Document &doc) const;
  void PushToLua(lua_State *luaState) const;
  void PushMirrorToLua(lua_State *luaState) const;
  void PushGlobalToLua(lua_State *luaState, const char *name) const;
  /*
   * This only works with negative indices
   * Reads proxy object (a table with a metatable and an embedded pointer or an index)
   */
  static TestStructHashable *ReadProxyFromLua(lua_State *luaState, int32_t idx);
  /*
   * This only works with negative indices
   * Reads a mirror object (a table with entries that mirror the c++ data structure)
   */
  static TestStructHashable ReadMirrorFromLua(lua_State *luaState, int32_t idx);
  static void CreateLuaMetatable(lua_State *luaState);
  TestStructHashable &operator=(const TestStructHashable &rhs) = default;
  TestStructHashable &operator=(TestStructHashable &&rhs) noexcept = default;
  inline static const char *CLASS_NAME = "TestStructHashable";
private:
  static int NewIndexMetaMethod(lua_State *luaState);
  static int HashCallerFromLua(lua_State *luaState);
  static int IndexMetaMethod(lua_State *luaState);
  uint32_t mField1;
  uint32_t mField2;
};
}
namespace std {
template <>
struct hash<holgen_blackbox_test::TestStructHashable> {
public:
  size_t operator()(const holgen_blackbox_test::TestStructHashable &obj) const {
    return obj.Hash();
  }
};
}
