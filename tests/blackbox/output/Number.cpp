// This file is generated by holgen. Do not modify manually.
#include "Number.h"

#include <rapidjson/document.h>
#include <lua.hpp>
#include "JsonHelper.h"
#include "LuaHelper.h"

namespace holgen_blackbox_test {
int64_t Number::GetValue() const {
  return mValue;
}
void Number::SetValue(int64_t val) {
  mValue = val;
}
bool Number::ParseJson(const rapidjson::Value& json, const Converter& converter) {
  HOLGEN_WARN_AND_RETURN_IF(!json.IsObject(), false, "Found non-object json element when parsing Number");
  for(const auto& data: json.GetObject()) {
    const auto& name = data.name.GetString();
    if (0 == strcmp(name, "value")) {
      auto res = JsonHelper::Parse(mValue, data.value, converter);
      HOLGEN_WARN_AND_CONTINUE_IF(!res, "Could not json-parse Number.value field");
    } else {
      HOLGEN_WARN("Unexpected entry in json when parsing Number: {}", name);
    }
  }
  return true;
}
void Number::PushToLua(lua_State* luaState) const {
  lua_newtable(luaState);
  lua_pushstring(luaState, "p");
  lua_pushlightuserdata(luaState, (void*)this);
  lua_settable(luaState, -3);
  lua_getglobal(luaState, "NumberMeta");
  lua_setmetatable(luaState, -2);
}
void Number::PushGlobalToLua(lua_State* luaState, const char* name) const {
  PushToLua(luaState);
  lua_setglobal(luaState, name);
}
Number* Number::ReadFromLua(lua_State* luaState, int32_t idx) {
  lua_pushstring(luaState, "p");
  lua_gettable(luaState, idx - 1);
  auto ptr = (Number*)lua_touserdata(luaState, -1);
  lua_pop(luaState, 1);
  return ptr;
}
void Number::PushIndexMetaMethod(lua_State* luaState) {
  lua_pushstring(luaState, "__index");
  lua_pushcfunction(luaState, [](lua_State* ls) {
    auto instance = Number::ReadFromLua(ls, -2);
    const char* key = lua_tostring(ls, -1);
    if (0 == strcmp("value", key)) {
      LuaHelper::Push(instance->mValue, ls);
    } else {
      return 0;
    }
    return 1;
  });
  lua_settable(luaState, -3);
}
void Number::PushNewIndexMetaMethod(lua_State* luaState) {
  lua_pushstring(luaState, "__newindex");
  lua_pushcfunction(luaState, [](lua_State* ls) {
    auto instance = Number::ReadFromLua(ls, -3);
    const char* key = lua_tostring(ls, -2);
    if (0 == strcmp("value", key)) {
      LuaHelper::Read(instance->mValue, ls, -1);
    }
    return 0;
  });
  lua_settable(luaState, -3);
}
void Number::CreateLuaMetatable(lua_State* luaState) {
  lua_newtable(luaState);
  PushIndexMetaMethod(luaState);
  PushNewIndexMetaMethod(luaState);
  lua_setglobal(luaState, "NumberMeta");
}
}
